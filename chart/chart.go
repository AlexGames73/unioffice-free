//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_b "fmt";_f "github.com/AlexGames73/unioffice-free";_cf "github.com/AlexGames73/unioffice-free/color";_bc "github.com/AlexGames73/unioffice-free/drawing";_d "github.com/AlexGames73/unioffice-free/measurement";_g "github.com/AlexGames73/unioffice-free/schema/soo/dml";_c "github.com/AlexGames73/unioffice-free/schema/soo/dml/chart";_dd "math/rand";);

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_fbgg *_c .CT_ScatterSer };

// SetText sets the series text
func (_cdga ScatterChartSeries )SetText (s string ){_cdga ._fbgg .Tx =_c .NewCT_SerTx ();_cdga ._fbgg .Tx .Choice .V =&s ;};func (_gdf CategoryAxis )MajorGridLines ()GridLines {if _gdf ._bacf .MajorGridlines ==nil {_gdf ._bacf .MajorGridlines =_c .NewCT_ChartLines ();};return GridLines {_gdf ._bacf .MajorGridlines };};func (_gf Area3DChart )AddAxis (axis Axis ){_ba :=_c .NewCT_UnsignedInt ();_ba .ValAttr =axis .AxisID ();_gf ._dda .AxId =append (_gf ._dda .AxId ,_ba );};type LineChart struct{chartBase ;_bgd *_c .CT_LineChart ;};type DateAxis struct{_efc *_c .CT_DateAx };func MakeValueAxis (x *_c .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_add CategoryAxis )SetCrosses (axis Axis ){_add ._bacf .Choice =_c .NewEG_AxSharedChoice ();_add ._bacf .Choice .Crosses =_c .NewCT_Crosses ();_add ._bacf .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_add ._bacf .CrossAx .ValAttr =axis .AxisID ();};

// Order returns the order of the series
func (_gcca SurfaceChartSeries )Order ()uint32 {return _gcca ._abe .Order .ValAttr };

// AddAreaChart adds a new area chart to a chart.
func (_fg Chart )AddAreaChart ()AreaChart {_aagc :=_c .NewCT_PlotAreaChoice ();_fg ._dgb .Chart .PlotArea .Choice =append (_fg ._dgb .Chart .PlotArea .Choice ,_aagc );_aagc .AreaChart =_c .NewCT_AreaChart ();_fdfg :=AreaChart {_ca :_aagc .AreaChart };_fdfg .InitializeDefaults ();return _fdfg ;};func (_ddc DateAxis )AxisID ()uint32 {return _ddc ._efc .AxId .ValAttr };func (_ece DateAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_ece ._efc .MajorTickMark =nil ;}else {_ece ._efc .MajorTickMark =_c .NewCT_TickMark ();_ece ._efc .MajorTickMark .ValAttr =m ;};};type nullAxis byte ;

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_debb Chart )AddLegend ()Legend {_debb ._dgb .Chart .Legend =_c .NewCT_Legend ();_bag :=MakeLegend (_debb ._dgb .Chart .Legend );_bag .InitializeDefaults ();return _bag ;};

// Values returns the value data source.
func (_cdae RadarChartSeries )Values ()NumberDataSource {if _cdae ._dceb .Val ==nil {_cdae ._dceb .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_cdae ._dceb .Val );};

// RemoveTitle removes any existing title from the chart.
func (_gfb Chart )RemoveTitle (){_gfb ._dgb .Chart .Title =nil ;_gfb ._dgb .Chart .AutoTitleDeleted =_c .NewCT_Boolean ();_gfb ._dgb .Chart .AutoTitleDeleted .ValAttr =_f .Bool (true );};

// AddSeries adds a default series to an Pie chart.
func (_ecca PieOfPieChart )AddSeries ()PieChartSeries {_debe :=_c .NewCT_PieSer ();_ecca ._ggcd .Ser =append (_ecca ._ggcd .Ser ,_debe );_debe .Idx .ValAttr =uint32 (len (_ecca ._ggcd .Ser )-1);_debe .Order .ValAttr =uint32 (len (_ecca ._ggcd .Ser )-1);_dac :=PieChartSeries {_debe };_dac .InitializeDefaults ();return _dac ;};

// SetText sets the series text.
func (_bgda PieChartSeries )SetText (s string ){_bgda ._dbc .Tx =_c .NewCT_SerTx ();_bgda ._dbc .Tx .Choice .V =&s ;};

// AddStockChart adds a new stock chart.
func (_gcc Chart )AddStockChart ()StockChart {_ag :=_c .NewCT_PlotAreaChoice ();_gcc ._dgb .Chart .PlotArea .Choice =append (_gcc ._dgb .Chart .PlotArea .Choice ,_ag );_ag .StockChart =_c .NewCT_StockChart ();_ege :=StockChart {_bfa :_ag .StockChart };_ege .InitializeDefaults ();return _ege ;};

// Properties returns the Bubble chart series shape properties.
func (_ad BubbleChartSeries )Properties ()_bc .ShapeProperties {if _ad ._eae .SpPr ==nil {_ad ._eae .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_ad ._eae .SpPr );};

// AddSeries adds a default series to an area chart.
func (_fc AreaChart )AddSeries ()AreaChartSeries {_bad :=_fc .nextColor (len (_fc ._ca .Ser ));_gc :=_c .NewCT_AreaSer ();_fc ._ca .Ser =append (_fc ._ca .Ser ,_gc );_gc .Idx .ValAttr =uint32 (len (_fc ._ca .Ser )-1);_gc .Order .ValAttr =uint32 (len (_fc ._ca .Ser )-1);_de :=AreaChartSeries {_gc };_de .InitializeDefaults ();_de .Properties ().SetSolidFill (_bad );return _de ;};

// X returns the inner wrapped XML type.
func (_ffe GridLines )X ()*_c .CT_ChartLines {return _ffe ._bda };

// Values returns the value data source.
func (_ae AreaChartSeries )Values ()NumberDataSource {if _ae ._eg .Val ==nil {_ae ._eg .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ae ._eg .Val );};func (_baad Title )ParagraphProperties ()_bc .ParagraphProperties {if _baad ._eafe .Tx ==nil {_baad .SetText ("");};if _baad ._eafe .Tx .Choice .Rich .P [0].PPr ==nil {_baad ._eafe .Tx .Choice .Rich .P [0].PPr =_g .NewCT_TextParagraphProperties ();};return _bc .MakeParagraphProperties (_baad ._eafe .Tx .Choice .Rich .P [0].PPr );};func (_eeb Legend )Properties ()_bc .ShapeProperties {if _eeb ._gfe .SpPr ==nil {_eeb ._gfe .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_eeb ._gfe .SpPr );};type Marker struct{_afb *_c .CT_Marker };

// AddRadarChart adds a new radar chart to a chart.
func (_ecb Chart )AddRadarChart ()RadarChart {_fea :=_c .NewCT_PlotAreaChoice ();_ecb ._dgb .Chart .PlotArea .Choice =append (_ecb ._dgb .Chart .PlotArea .Choice ,_fea );_fea .RadarChart =_c .NewCT_RadarChart ();_be :=RadarChart {_ede :_fea .RadarChart };_be .InitializeDefaults ();return _be ;};func (_agc NumberDataSource )SetReference (s string ){_agc .ensureChoice ();if _agc ._badd .Choice .NumRef ==nil {_agc ._badd .Choice .NumRef =_c .NewCT_NumRef ();};_agc ._badd .Choice .NumRef .F =s ;};

// Index returns the index of the series
func (_aaab ScatterChartSeries )Index ()uint32 {return _aaab ._fbgg .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_gedf ValueAxis )X ()*_c .CT_ValAx {return _gedf ._ffga };

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_egae *_c .CT_Surface3DChart ;};func MakeChart (x *_c .ChartSpace )Chart {return Chart {x }};

// Properties returns the line chart series shape properties.
func (_fcee ScatterChartSeries )Properties ()_bc .ShapeProperties {if _fcee ._fbgg .SpPr ==nil {_fcee ._fbgg .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_fcee ._fbgg .SpPr );};

// Values returns the value data source.
func (_ed BarChartSeries )Values ()NumberDataSource {if _ed ._aaf .Val ==nil {_ed ._aaf .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ed ._aaf .Val );};

// X returns the inner wrapped XML type.
func (_fbed DateAxis )X ()*_c .CT_DateAx {return _fbed ._efc };type SeriesAxis struct{_gdfa *_c .CT_SerAx };

// AddSeries adds a default series to a Bubble chart.
func (_fdb BubbleChart )AddSeries ()BubbleChartSeries {_egc :=_fdb .nextColor (len (_fdb ._ea .Ser ));_bfe :=_c .NewCT_BubbleSer ();_fdb ._ea .Ser =append (_fdb ._ea .Ser ,_bfe );_bfe .Idx .ValAttr =uint32 (len (_fdb ._ea .Ser )-1);_bfe .Order .ValAttr =uint32 (len (_fdb ._ea .Ser )-1);_da :=BubbleChartSeries {_bfe };_da .InitializeDefaults ();_da .Properties ().SetSolidFill (_egc );return _da ;};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_faad *_c .CT_AxDataSource };

// Marker returns the marker properties.
func (_ebdd LineChartSeries )Marker ()Marker {if _ebdd ._gaa .Marker ==nil {_ebdd ._gaa .Marker =_c .NewCT_Marker ();};return MakeMarker (_ebdd ._gaa .Marker );};

// SetText sets the series text.
func (_df BubbleChartSeries )SetText (s string ){_df ._eae .Tx =_c .NewCT_SerTx ();_df ._eae .Tx .Choice .V =&s ;};func (_dfbbf ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dfbbf ._fbgg .XVal ==nil {_dfbbf ._fbgg .XVal =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_dfbbf ._fbgg .XVal );};func (_bab Title )SetText (s string ){if _bab ._eafe .Tx ==nil {_bab ._eafe .Tx =_c .NewCT_Tx ();};if _bab ._eafe .Tx .Choice .Rich ==nil {_bab ._eafe .Tx .Choice .Rich =_g .NewCT_TextBody ();};var _deef *_g .CT_TextParagraph ;if len (_bab ._eafe .Tx .Choice .Rich .P )==0{_deef =_g .NewCT_TextParagraph ();_bab ._eafe .Tx .Choice .Rich .P =[]*_g .CT_TextParagraph {_deef };}else {_deef =_bab ._eafe .Tx .Choice .Rich .P [0];};var _gbd *_g .EG_TextRun ;if len (_deef .EG_TextRun )==0{_gbd =_g .NewEG_TextRun ();_deef .EG_TextRun =[]*_g .EG_TextRun {_gbd };}else {_gbd =_deef .EG_TextRun [0];};if _gbd .R ==nil {_gbd .R =_g .NewCT_RegularTextRun ();};_gbd .R .T =s ;};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// X returns the inner wrapped XML type.
func (_cfcca Legend )X ()*_c .CT_Legend {return _cfcca ._gfe };type Title struct{_eafe *_c .CT_Title };

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_eba *_c .CT_Pie3DChart ;};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_gbfa Chart )AddDoughnutChart ()DoughnutChart {_aga :=_c .NewCT_PlotAreaChoice ();_gbfa ._dgb .Chart .PlotArea .Choice =append (_gbfa ._dgb .Chart .PlotArea .Choice ,_aga );_aga .DoughnutChart =_c .NewCT_DoughnutChart ();_eac :=DoughnutChart {_deg :_aga .DoughnutChart };_eac .InitializeDefaults ();return _eac ;};func (_fdbe Marker )SetSize (sz uint8 ){_fdbe ._afb .Size =_c .NewCT_MarkerSize ();_fdbe ._afb .Size .ValAttr =&sz ;};

// X returns the inner wrapped XML type.
func (_debg Surface3DChart )X ()*_c .CT_Surface3DChart {return _debg ._egae };func (_cfc DataLabels )SetShowCategoryName (b bool ){_cfc .ensureChoice ();_cfc ._fge .Choice .ShowCatName =_c .NewCT_Boolean ();_cfc ._fge .Choice .ShowCatName .ValAttr =_f .Bool (b );};func (_bfef LineChartSeries )Values ()NumberDataSource {if _bfef ._gaa .Val ==nil {_bfef ._gaa .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_bfef ._gaa .Val );};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_fcd NumberDataSource )CreateEmptyNumberCache (){_fcd .ensureChoice ();if _fcd ._badd .Choice .NumRef ==nil {_fcd ._badd .Choice .NumRef =_c .NewCT_NumRef ();};_fcd ._badd .Choice .NumLit =nil ;_fcd ._badd .Choice .NumRef .NumCache =_c .NewCT_NumData ();_fcd ._badd .Choice .NumRef .NumCache .PtCount =_c .NewCT_UnsignedInt ();_fcd ._badd .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// SetValues is used to set the source data to a set of values.
func (_cgc CategoryAxisDataSource )SetValues (v []string ){_cgc ._faad .Choice =_c .NewCT_AxDataSourceChoice ();_cgc ._faad .Choice .StrLit =_c .NewCT_StrData ();_cgc ._faad .Choice .StrLit .PtCount =_c .NewCT_UnsignedInt ();_cgc ._faad .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _ebf ,_feb :=range v {_cgc ._faad .Choice .StrLit .Pt =append (_cgc ._faad .Choice .StrLit .Pt ,&_c .CT_StrVal {IdxAttr :uint32 (_ebf ),V :_feb });};};

// InitializeDefaults the bar chart to its defaults
func (_gab PieChart )InitializeDefaults (){_gab ._bdb .VaryColors =_c .NewCT_Boolean ();_gab ._bdb .VaryColors .ValAttr =_f .Bool (true );};

// AddSeries adds a default series to a Stock chart.
func (_eggd StockChart )AddSeries ()LineChartSeries {_ggd :=_c .NewCT_LineSer ();_eggd ._bfa .Ser =append (_eggd ._bfa .Ser ,_ggd );_ggd .Idx .ValAttr =uint32 (len (_eggd ._bfa .Ser )-1);_ggd .Order .ValAttr =uint32 (len (_eggd ._bfa .Ser )-1);_eee :=LineChartSeries {_ggd };_eee .Values ().CreateEmptyNumberCache ();_eee .Properties ().LineProperties ().SetNoFill ();return _eee ;};

// X returns the inner wrapped XML type.
func (_bf BarChart )X ()*_c .CT_BarChart {return _bf ._ab };

// InitializeDefaults the bar chart to its defaults
func (_cd Area3DChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_ac AreaChart )X ()*_c .CT_AreaChart {return _ac ._ca };func (_edd ValueAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_edd ._ffga .TickLblPos =nil ;}else {_edd ._ffga .TickLblPos =_c .NewCT_TickLblPos ();_edd ._ffga .TickLblPos .ValAttr =p ;};};func (_gac SurfaceChartSeries )InitializeDefaults (){_gac .Properties ().LineProperties ().SetWidth (1*_d .Point );_gac .Properties ().LineProperties ().SetSolidFill (_cf .Black );_gac .Properties ().LineProperties ().SetJoin (_bc .LineJoinRound );};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_aaf *_c .CT_BarSer };

// SetOrder sets the order of the series
func (_dde ScatterChartSeries )SetOrder (idx uint32 ){_dde ._fbgg .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_becg ScatterChartSeries )X ()*_c .CT_ScatterSer {return _becg ._fbgg };func (_abd ValueAxis )AxisID ()uint32 {return _abd ._ffga .AxId .ValAttr };func (_cgab chartBase )nextColor (_gadc int )_cf .Color {return _cdg [_gadc %len (_cdg )]};

// AddPie3DChart adds a new pie chart to a chart.
func (_bcc Chart )AddPie3DChart ()Pie3DChart {_caa (_bcc ._dgb .Chart );_gfc :=_c .NewCT_PlotAreaChoice ();_bcc ._dgb .Chart .PlotArea .Choice =append (_bcc ._dgb .Chart .PlotArea .Choice ,_gfc );_gfc .Pie3DChart =_c .NewCT_Pie3DChart ();_adf :=Pie3DChart {_eba :_gfc .Pie3DChart };_adf .InitializeDefaults ();return _adf ;};

// AddDateAxis adds a value axis to the chart.
func (_dfbb Chart )AddDateAxis ()DateAxis {_ebc :=_c .NewCT_DateAx ();if _dfbb ._dgb .Chart .PlotArea .CChoice ==nil {_dfbb ._dgb .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_ebc .AxId =_c .NewCT_UnsignedInt ();_ebc .AxId .ValAttr =0x7FFFFFFF&_dd .Uint32 ();_dfbb ._dgb .Chart .PlotArea .CChoice .DateAx =append (_dfbb ._dgb .Chart .PlotArea .CChoice .DateAx ,_ebc );_ebc .Delete =_c .NewCT_Boolean ();_ebc .Delete .ValAttr =_f .Bool (false );_ebc .Scaling =_c .NewCT_Scaling ();_ebc .Scaling .Orientation =_c .NewCT_Orientation ();_ebc .Scaling .Orientation .ValAttr =_c .ST_OrientationMinMax ;_ebc .Choice =&_c .EG_AxSharedChoice {};_ebc .Choice .Crosses =_c .NewCT_Crosses ();_ebc .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_fbaf :=DateAxis {_ebc };_fbaf .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cf .LightGray );_fbaf .SetMajorTickMark (_c .ST_TickMarkOut );_fbaf .SetMinorTickMark (_c .ST_TickMarkIn );_fbaf .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_fbaf .Properties ().LineProperties ().SetSolidFill (_cf .Black );_fbaf .SetPosition (_c .ST_AxPosL );return _fbaf ;};

// AddBubbleChart adds a new bubble chart.
func (_cda Chart )AddBubbleChart ()BubbleChart {_bbb :=_c .NewCT_PlotAreaChoice ();_cda ._dgb .Chart .PlotArea .Choice =append (_cda ._dgb .Chart .PlotArea .Choice ,_bbb );_bbb .BubbleChart =_c .NewCT_BubbleChart ();_bff :=BubbleChart {_ea :_bbb .BubbleChart };_bff .InitializeDefaults ();return _bff ;};

// InitializeDefaults the bar chart to its defaults
func (_eb BarChart )InitializeDefaults (){_eb .SetDirection (_c .ST_BarDirCol )};

// AddScatterChart adds a scatter (X/Y) chart.
func (_cagf Chart )AddScatterChart ()ScatterChart {_ded :=_c .NewCT_PlotAreaChoice ();_cagf ._dgb .Chart .PlotArea .Choice =append (_cagf ._dgb .Chart .PlotArea .Choice ,_ded );_ded .ScatterChart =_c .NewCT_ScatterChart ();_aeb :=ScatterChart {_gda :_ded .ScatterChart };_aeb .InitializeDefaults ();return _aeb ;};

// Index returns the index of the series
func (_aed LineChartSeries )Index ()uint32 {return _aed ._gaa .Idx .ValAttr };

// RemoveLegend removes the legend if the chart has one.
func (_bed Chart )RemoveLegend (){_bed ._dgb .Chart .Legend =nil };

// SetText sets the series text
func (_fffe LineChartSeries )SetText (s string ){_fffe ._gaa .Tx =_c .NewCT_SerTx ();_fffe ._gaa .Tx .Choice .V =&s ;};

// AddCategoryAxis adds a category axis.
func (_dff Chart )AddCategoryAxis ()CategoryAxis {_bfd :=_c .NewCT_CatAx ();if _dff ._dgb .Chart .PlotArea .CChoice ==nil {_dff ._dgb .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_bfd .AxId =_c .NewCT_UnsignedInt ();_bfd .AxId .ValAttr =0x7FFFFFFF&_dd .Uint32 ();_dff ._dgb .Chart .PlotArea .CChoice .CatAx =append (_dff ._dgb .Chart .PlotArea .CChoice .CatAx ,_bfd );_bfd .Auto =_c .NewCT_Boolean ();_bfd .Auto .ValAttr =_f .Bool (true );_bfd .Delete =_c .NewCT_Boolean ();_bfd .Delete .ValAttr =_f .Bool (false );_dfe :=MakeCategoryAxis (_bfd );_dfe .InitializeDefaults ();return _dfe ;};type DataLabels struct{_fge *_c .CT_DLbls };func (_gdfaf ValueAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_gdfaf ._ffga .MajorTickMark =nil ;}else {_gdfaf ._ffga .MajorTickMark =_c .NewCT_TickMark ();_gdfaf ._ffga .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_gfce Title )X ()*_c .CT_Title {return _gfce ._eafe };func (_db nullAxis )AxisID ()uint32 {return 0};

// Order returns the order of the series
func (_ccdf LineChartSeries )Order ()uint32 {return _ccdf ._gaa .Order .ValAttr };

// AddValueAxis adds a value axis to the chart.
func (_gad Chart )AddValueAxis ()ValueAxis {_cb :=_c .NewCT_ValAx ();if _gad ._dgb .Chart .PlotArea .CChoice ==nil {_gad ._dgb .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_cb .AxId =_c .NewCT_UnsignedInt ();_cb .AxId .ValAttr =0x7FFFFFFF&_dd .Uint32 ();_gad ._dgb .Chart .PlotArea .CChoice .ValAx =append (_gad ._dgb .Chart .PlotArea .CChoice .ValAx ,_cb );_cb .Delete =_c .NewCT_Boolean ();_cb .Delete .ValAttr =_f .Bool (false );_cb .Scaling =_c .NewCT_Scaling ();_cb .Scaling .Orientation =_c .NewCT_Orientation ();_cb .Scaling .Orientation .ValAttr =_c .ST_OrientationMinMax ;_cb .Choice =&_c .EG_AxSharedChoice {};_cb .Choice .Crosses =_c .NewCT_Crosses ();_cb .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_cb .CrossBetween =_c .NewCT_CrossBetween ();_cb .CrossBetween .ValAttr =_c .ST_CrossBetweenBetween ;_bdeg :=MakeValueAxis (_cb );_bdeg .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cf .LightGray );_bdeg .SetMajorTickMark (_c .ST_TickMarkOut );_bdeg .SetMinorTickMark (_c .ST_TickMarkIn );_bdeg .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_bdeg .Properties ().LineProperties ().SetSolidFill (_cf .Black );_bdeg .SetPosition (_c .ST_AxPosL );return _bdeg ;};func MakeLegend (l *_c .CT_Legend )Legend {return Legend {l }};func (_bgdf ScatterChartSeries )InitializeDefaults (){_bgdf .Properties ().LineProperties ().SetNoFill ();_bgdf .Marker ().SetSymbol (_c .ST_MarkerStyleAuto );_bgdf .Labels ().SetShowLegendKey (false );_bgdf .Labels ().SetShowValue (true );_bgdf .Labels ().SetShowPercent (false );_bgdf .Labels ().SetShowCategoryName (false );_bgdf .Labels ().SetShowSeriesName (false );_bgdf .Labels ().SetShowLeaderLines (false );};

// Labels returns the data label properties.
func (_dee ScatterChartSeries )Labels ()DataLabels {if _dee ._fbgg .DLbls ==nil {_dee ._fbgg .DLbls =_c .NewCT_DLbls ();};return MakeDataLabels (_dee ._fbgg .DLbls );};

// X returns the inner wrapped XML type.
func (_bge LineChart )X ()*_c .CT_LineChart {return _bge ._bgd };

// SetText sets the series text.
func (_fa AreaChartSeries )SetText (s string ){_fa ._eg .Tx =_c .NewCT_SerTx ();_fa ._eg .Tx .Choice .V =&s };func (_bced ValueAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_bced ._ffga .MinorTickMark =nil ;}else {_bced ._ffga .MinorTickMark =_c .NewCT_TickMark ();_bced ._ffga .MinorTickMark .ValAttr =m ;};};func (_egcfc NumberDataSource )ensureChoice (){if _egcfc ._badd .Choice ==nil {_egcfc ._badd .Choice =_c .NewCT_NumDataSourceChoice ();};};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_eda Chart )SetDisplayBlanksAs (v _c .ST_DispBlanksAs ){_eda ._dgb .Chart .DispBlanksAs =_c .NewCT_DispBlanksAs ();_eda ._dgb .Chart .DispBlanksAs .ValAttr =v ;};

// AddSeries adds a default series to a Surface chart.
func (_ebag SurfaceChart )AddSeries ()SurfaceChartSeries {_gee :=_ebag .nextColor (len (_ebag ._afda .Ser ));_bbfd :=_c .NewCT_SurfaceSer ();_ebag ._afda .Ser =append (_ebag ._afda .Ser ,_bbfd );_bbfd .Idx .ValAttr =uint32 (len (_ebag ._afda .Ser )-1);_bbfd .Order .ValAttr =uint32 (len (_ebag ._afda .Ser )-1);_feg :=SurfaceChartSeries {_bbfd };_feg .InitializeDefaults ();_feg .Properties ().LineProperties ().SetSolidFill (_gee );return _feg ;};func (_egg Legend )SetOverlay (b bool ){_egg ._gfe .Overlay =_c .NewCT_Boolean ();_egg ._gfe .Overlay .ValAttr =_f .Bool (b );};

// SetIndex sets the index of the series
func (_fff LineChartSeries )SetIndex (idx uint32 ){_fff ._gaa .Idx .ValAttr =idx };func (_bae CategoryAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_bae ._bacf .MajorTickMark =nil ;}else {_bae ._bacf .MajorTickMark =_c .NewCT_TickMark ();_bae ._bacf .MajorTickMark .ValAttr =m ;};};

// InitializeDefaults the bar chart to its defaults
func (_egf PieOfPieChart )InitializeDefaults (){_egf ._ggcd .VaryColors =_c .NewCT_Boolean ();_egf ._ggcd .VaryColors .ValAttr =_f .Bool (true );_egf .SetType (_c .ST_OfPieTypePie );_egf ._ggcd .SecondPieSize =_c .NewCT_SecondPieSize ();_egf ._ggcd .SecondPieSize .ValAttr =&_c .ST_SecondPieSize {};_egf ._ggcd .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_f .Uint16 (75);_afe :=_c .NewCT_ChartLines ();_afe .SpPr =_g .NewCT_ShapeProperties ();_cffa :=_bc .MakeShapeProperties (_afe .SpPr );_cffa .LineProperties ().SetSolidFill (_cf .Auto );_egf ._ggcd .SerLines =append (_egf ._ggcd .SerLines ,_afe );};

// AddSeries adds a default series to a line chart.
func (_egcf LineChart )AddSeries ()LineChartSeries {_bgdd :=_egcf .nextColor (len (_egcf ._bgd .Ser ));_eca :=_c .NewCT_LineSer ();_egcf ._bgd .Ser =append (_egcf ._bgd .Ser ,_eca );_eca .Idx .ValAttr =uint32 (len (_egcf ._bgd .Ser )-1);_eca .Order .ValAttr =uint32 (len (_egcf ._bgd .Ser )-1);_fgf :=LineChartSeries {_eca };_fgf .InitializeDefaults ();_fgf .Properties ().LineProperties ().SetSolidFill (_bgdd );return _fgf ;};

// Order returns the order of the series
func (_dfg ScatterChartSeries )Order ()uint32 {return _dfg ._fbgg .Order .ValAttr };func (_ffeb Legend )SetPosition (p _c .ST_LegendPos ){if p ==_c .ST_LegendPosUnset {_ffeb ._gfe .LegendPos =nil ;}else {_ffeb ._gfe .LegendPos =_c .NewCT_LegendPos ();_ffeb ._gfe .LegendPos .ValAttr =p ;};};

// SetOrder sets the order of the series
func (_ddf LineChartSeries )SetOrder (idx uint32 ){_ddf ._gaa .Order .ValAttr =idx };type CategoryAxis struct{_bacf *_c .CT_CatAx };func (_bagb DataLabels )SetPosition (p _c .ST_DLblPos ){_bagb .ensureChoice ();_bagb ._fge .Choice .DLblPos =_c .NewCT_DLblPos ();_bagb ._fge .Choice .DLblPos .ValAttr =p ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_aae BarChart )SetDirection (d _c .ST_BarDir ){_aae ._ab .BarDir .ValAttr =d };func (_cga CategoryAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_cga ._bacf .TickLblPos =nil ;}else {_cga ._bacf .TickLblPos =_c .NewCT_TickLblPos ();_cga ._bacf .TickLblPos .ValAttr =p ;};};

// X returns the inner wrapped XML type.
func (_gbcc RadarChart )X ()*_c .CT_RadarChart {return _gbcc ._ede };func (_ce CategoryAxis )Properties ()_bc .ShapeProperties {if _ce ._bacf .SpPr ==nil {_ce ._bacf .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_ce ._bacf .SpPr );};

// SetValues sets values directly on a source.
func (_cbf NumberDataSource )SetValues (v []float64 ){_cbf .ensureChoice ();_cbf ._badd .Choice .NumRef =nil ;_cbf ._badd .Choice .NumLit =_c .NewCT_NumData ();_cbf ._badd .Choice .NumLit .PtCount =_c .NewCT_UnsignedInt ();_cbf ._badd .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _gbc ,_bccc :=range v {_cbf ._badd .Choice .NumLit .Pt =append (_cbf ._badd .Choice .NumLit .Pt ,&_c .CT_NumVal {IdxAttr :uint32 (_gbc ),V :_b .Sprintf ("\u0025\u0067",_bccc )});};};func (_faa Bar3DChart )AddAxis (axis Axis ){_ddb :=_c .NewCT_UnsignedInt ();_ddb .ValAttr =axis .AxisID ();_faa ._dg .AxId =append (_faa ._dg .AxId ,_ddb );};

// X returns the inner wrapped XML type.
func (_dbgc SeriesAxis )X ()*_c .CT_SerAx {return _dbgc ._gdfa };

// Values returns the bubble size data source.
func (_ga BubbleChartSeries )BubbleSizes ()NumberDataSource {if _ga ._eae .BubbleSize ==nil {_ga ._eae .BubbleSize =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ga ._eae .BubbleSize );};

// AddAxis adds an axis to a line chart.
func (_gbg LineChart )AddAxis (axis Axis ){_egcb :=_c .NewCT_UnsignedInt ();_egcb .ValAttr =axis .AxisID ();_gbg ._bgd .AxId =append (_gbg ._bgd .AxId ,_egcb );};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_ffc Chart )AddSurface3DChart ()Surface3DChart {_gea :=_c .NewCT_PlotAreaChoice ();_ffc ._dgb .Chart .PlotArea .Choice =append (_ffc ._dgb .Chart .PlotArea .Choice ,_gea );_gea .Surface3DChart =_c .NewCT_Surface3DChart ();_caa (_ffc ._dgb .Chart );_fce :=Surface3DChart {_egae :_gea .Surface3DChart };_fce .InitializeDefaults ();return _fce ;};

// X returns the inner wrapped XML type.
func (_bde AreaChartSeries )X ()*_c .CT_AreaSer {return _bde ._eg };

// AddAxis adds an axis to a Scatter chart.
func (_dcef ScatterChart )AddAxis (axis Axis ){_bcf :=_c .NewCT_UnsignedInt ();_bcf .ValAttr =axis .AxisID ();_dcef ._gda .AxId =append (_dcef ._gda .AxId ,_bcf );};func (_fdf CategoryAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_fdf ._bacf .MinorTickMark =nil ;}else {_fdf ._bacf .MinorTickMark =_c .NewCT_TickMark ();_fdf ._bacf .MinorTickMark .ValAttr =m ;};};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_ede *_c .CT_RadarChart ;};func (_bcb GridLines )Properties ()_bc .ShapeProperties {if _bcb ._bda .SpPr ==nil {_bcb ._bda .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_bcb ._bda .SpPr );};type ScatterChart struct{chartBase ;_gda *_c .CT_ScatterChart ;};var NullAxis Axis =nullAxis (0);

// X returns the inner wrapped XML type.
func (_dce DoughnutChart )X ()*_c .CT_DoughnutChart {return _dce ._deg };

// AddSeries adds a default series to a bar chart.
func (_aba BarChart )AddSeries ()BarChartSeries {_gd :=_aba .nextColor (len (_aba ._ab .Ser ));_af :=_c .NewCT_BarSer ();_aba ._ab .Ser =append (_aba ._ab .Ser ,_af );_af .Idx .ValAttr =uint32 (len (_aba ._ab .Ser )-1);_af .Order .ValAttr =uint32 (len (_aba ._ab .Ser )-1);_fcg :=BarChartSeries {_af };_fcg .InitializeDefaults ();_fcg .Properties ().SetSolidFill (_gd );return _fcg ;};

// X returns the inner wrapped XML type.
func (_cgg Line3DChart )X ()*_c .CT_Line3DChart {return _cgg ._dbde };

// X returns the inner wrapped XML type.
func (_bdg ScatterChart )X ()*_c .CT_ScatterChart {return _bdg ._gda };func (_fag BarChart )AddAxis (axis Axis ){_fbe :=_c .NewCT_UnsignedInt ();_fbe .ValAttr =axis .AxisID ();_fag ._ab .AxId =append (_fag ._ab .AxId ,_fbe );};func (_baff ValueAxis )Properties ()_bc .ShapeProperties {if _baff ._ffga .SpPr ==nil {_baff ._ffga .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_baff ._ffga .SpPr );};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_dda *_c .CT_Area3DChart ;};

// SetText sets the series text.
func (_adda RadarChartSeries )SetText (s string ){_adda ._dceb .Tx =_c .NewCT_SerTx ();_adda ._dceb .Tx .Choice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_adac RadarChart )InitializeDefaults (){_adac ._ede .RadarStyle .ValAttr =_c .ST_RadarStyleMarker };

// SetIndex sets the index of the series
func (_cac SurfaceChartSeries )SetIndex (idx uint32 ){_cac ._abe .Idx .ValAttr =idx };func MakeNumberDataSource (x *_c .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// Properties returns the line chart series shape properties.
func (_ggc LineChartSeries )Properties ()_bc .ShapeProperties {if _ggc ._gaa .SpPr ==nil {_ggc ._gaa .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_ggc ._gaa .SpPr );};

// X returns the inner wrapped XML type.
func (_fbg Bar3DChart )X ()*_c .CT_Bar3DChart {return _fbg ._dg };

// InitializeDefaults initializes an Pie series to the default values.
func (_bccf PieChartSeries )InitializeDefaults (){};

// InitializeDefaults the bar chart to its defaults
func (_aafc Pie3DChart )InitializeDefaults (){_aafc ._eba .VaryColors =_c .NewCT_Boolean ();_aafc ._eba .VaryColors .ValAttr =_f .Bool (true );};

// SetText sets the series text.
func (_fcc BarChartSeries )SetText (s string ){_fcc ._aaf .Tx =_c .NewCT_SerTx ();_fcc ._aaf .Tx .Choice .V =&s ;};

// SetIndex sets the index of the series
func (_afd ScatterChartSeries )SetIndex (idx uint32 ){_afd ._fbgg .Idx .ValAttr =idx };

// AddSeries adds a default series to an Radar chart.
func (_ecf RadarChart )AddSeries ()RadarChartSeries {_cdd :=_ecf .nextColor (len (_ecf ._ede .Ser ));_faada :=_c .NewCT_RadarSer ();_ecf ._ede .Ser =append (_ecf ._ede .Ser ,_faada );_faada .Idx .ValAttr =uint32 (len (_ecf ._ede .Ser )-1);_faada .Order .ValAttr =uint32 (len (_ecf ._ede .Ser )-1);_cgda :=RadarChartSeries {_faada };_cgda .InitializeDefaults ();_cgda .Properties ().SetSolidFill (_cdd );return _cgda ;};

// X returns the inner wrapped XML type.
func (_ec BarChartSeries )X ()*_c .CT_BarSer {return _ec ._aaf };

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_dceb *_c .CT_RadarSer };

// AddSeries adds a default series to a Surface chart.
func (_cgcd Surface3DChart )AddSeries ()SurfaceChartSeries {_ebdf :=_cgcd .nextColor (len (_cgcd ._egae .Ser ));_afad :=_c .NewCT_SurfaceSer ();_cgcd ._egae .Ser =append (_cgcd ._egae .Ser ,_afad );_afad .Idx .ValAttr =uint32 (len (_cgcd ._egae .Ser )-1);_afad .Order .ValAttr =uint32 (len (_cgcd ._egae .Ser )-1);_bbf :=SurfaceChartSeries {_afad };_bbf .InitializeDefaults ();_bbf .Properties ().LineProperties ().SetSolidFill (_ebdf );return _bbf ;};type NumberDataSource struct{_badd *_c .CT_NumDataSource };

// InitializeDefaults the Stock chart to its defaults
func (_caab StockChart )InitializeDefaults (){_caab ._bfa .HiLowLines =_c .NewCT_ChartLines ();_caab ._bfa .UpDownBars =_c .NewCT_UpDownBars ();_caab ._bfa .UpDownBars .GapWidth =_c .NewCT_GapAmount ();_caab ._bfa .UpDownBars .GapWidth .ValAttr =&_c .ST_GapAmount {};_caab ._bfa .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_f .Uint16 (150);_caab ._bfa .UpDownBars .UpBars =_c .NewCT_UpDownBar ();_caab ._bfa .UpDownBars .DownBars =_c .NewCT_UpDownBar ();};func (_dfb CategoryAxis )InitializeDefaults (){_dfb .SetPosition (_c .ST_AxPosB );_dfb .SetMajorTickMark (_c .ST_TickMarkOut );_dfb .SetMinorTickMark (_c .ST_TickMarkIn );_dfb .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_dfb .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cf .LightGray );_dfb .Properties ().LineProperties ().SetSolidFill (_cf .Black );};

// AddSurfaceChart adds a new surface chart to a chart.
func (_geb Chart )AddSurfaceChart ()SurfaceChart {_fde :=_c .NewCT_PlotAreaChoice ();_geb ._dgb .Chart .PlotArea .Choice =append (_geb ._dgb .Chart .PlotArea .Choice ,_fde );_fde .SurfaceChart =_c .NewCT_SurfaceChart ();_caa (_geb ._dgb .Chart );_geb ._dgb .Chart .View3D .RotX .ValAttr =_f .Int8 (90);_geb ._dgb .Chart .View3D .RotY .ValAttr =_f .Uint16 (0);_geb ._dgb .Chart .View3D .Perspective =_c .NewCT_Perspective ();_geb ._dgb .Chart .View3D .Perspective .ValAttr =_f .Uint8 (0);_afa :=SurfaceChart {_afda :_fde .SurfaceChart };_afa .InitializeDefaults ();return _afa ;};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_ggcd *_c .CT_OfPieChart ;};func (_bfbc ValueAxis )SetPosition (p _c .ST_AxPos ){_bfbc ._ffga .AxPos =_c .NewCT_AxPos ();_bfbc ._ffga .AxPos .ValAttr =p ;};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_bdbb PieChartSeries )SetExplosion (v uint32 ){_bdbb ._dbc .Explosion =_c .NewCT_UnsignedInt ();_bdbb ._dbc .Explosion .ValAttr =v ;};func (_cfcc DateAxis )Properties ()_bc .ShapeProperties {if _cfcc ._efc .SpPr ==nil {_cfcc ._efc .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_cfcc ._efc .SpPr );};func (_fga DataLabels )ensureChoice (){if _fga ._fge .Choice ==nil {_fga ._fge .Choice =_c .NewCT_DLblsChoice ();};};func (_aebe SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aebe ._abe .Cat ==nil {_aebe ._abe .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_aebe ._abe .Cat );};

// X returns the inner wrapped XML type.
func (_dgc SurfaceChartSeries )X ()*_c .CT_SurfaceSer {return _dgc ._abe };

// InitializeDefaults the Bubble chart to its defaults
func (_bac BubbleChart )InitializeDefaults (){};

// AddAxis adds an axis to a Surface chart.
func (_efca Surface3DChart )AddAxis (axis Axis ){_fad :=_c .NewCT_UnsignedInt ();_fad .ValAttr =axis .AxisID ();_efca ._egae .AxId =append (_efca ._egae .AxId ,_fad );};

// AddSeries adds a default series to an area chart.
func (_fb Area3DChart )AddSeries ()AreaChartSeries {_e :=_fb .nextColor (len (_fb ._dda .Ser ));_fe :=_c .NewCT_AreaSer ();_fb ._dda .Ser =append (_fb ._dda .Ser ,_fe );_fe .Idx .ValAttr =uint32 (len (_fb ._dda .Ser )-1);_fe .Order .ValAttr =uint32 (len (_fb ._dda .Ser )-1);_aa :=AreaChartSeries {_fe };_aa .InitializeDefaults ();_aa .Properties ().SetSolidFill (_e );return _aa ;};type Line3DChart struct{chartBase ;_dbde *_c .CT_Line3DChart ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_dbd Bar3DChart )SetDirection (d _c .ST_BarDir ){_dbd ._dg .BarDir .ValAttr =d };func (_ebe DataLabels )SetShowValue (b bool ){_ebe .ensureChoice ();_ebe ._fge .Choice .ShowVal =_c .NewCT_Boolean ();_ebe ._fge .Choice .ShowVal .ValAttr =_f .Bool (b );};

// X returns the inner wrapped XML type.
func (_cfge Marker )X ()*_c .CT_Marker {return _cfge ._afb };

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_ab *_c .CT_BarChart ;};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_deg *_c .CT_DoughnutChart ;};

// X returns the inner wrapped XML type.
func (_bfc RadarChartSeries )X ()*_c .CT_RadarSer {return _bfc ._dceb };

// CategoryAxis returns the category data source.
func (_aead RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aead ._dceb .Cat ==nil {_aead ._dceb .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_aead ._dceb .Cat );};func MakeSeriesAxis (x *_c .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// AddArea3DChart adds a new area chart to a chart.
func (_ged Chart )AddArea3DChart ()Area3DChart {_caa (_ged ._dgb .Chart );_dcg :=_c .NewCT_PlotAreaChoice ();_ged ._dgb .Chart .PlotArea .Choice =append (_ged ._dgb .Chart .PlotArea .Choice ,_dcg );_dcg .Area3DChart =_c .NewCT_Area3DChart ();_cae :=Area3DChart {_dda :_dcg .Area3DChart };_cae .InitializeDefaults ();return _cae ;};func (_gcg Surface3DChart )InitializeDefaults (){_gcg ._egae .Wireframe =_c .NewCT_Boolean ();_gcg ._egae .Wireframe .ValAttr =_f .Bool (false );_gcg ._egae .BandFmts =_c .NewCT_BandFmts ();for _cagg :=0;_cagg < 15;_cagg ++{_fed :=_c .NewCT_BandFmt ();_fed .Idx .ValAttr =uint32 (_cagg );_fed .SpPr =_g .NewCT_ShapeProperties ();_baf :=_bc .MakeShapeProperties (_fed .SpPr );_baf .SetSolidFill (_gcg .nextColor (_cagg ));_gcg ._egae .BandFmts .BandFmt =append (_gcg ._egae .BandFmts .BandFmt ,_fed );};};func (_gef SurfaceChart )InitializeDefaults (){_gef ._afda .Wireframe =_c .NewCT_Boolean ();_gef ._afda .Wireframe .ValAttr =_f .Bool (false );_gef ._afda .BandFmts =_c .NewCT_BandFmts ();for _fbcf :=0;_fbcf < 15;_fbcf ++{_abf :=_c .NewCT_BandFmt ();_abf .Idx .ValAttr =uint32 (_fbcf );_abf .SpPr =_g .NewCT_ShapeProperties ();_afeg :=_bc .MakeShapeProperties (_abf .SpPr );_afeg .SetSolidFill (_gef .nextColor (_fbcf ));_gef ._afda .BandFmts .BandFmt =append (_gef ._afda .BandFmts .BandFmt ,_abf );};};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_c .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};func (_bedf DataLabels )SetShowLegendKey (b bool ){_bedf .ensureChoice ();_bedf ._fge .Choice .ShowLegendKey =_c .NewCT_Boolean ();_bedf ._fge .Choice .ShowLegendKey .ValAttr =_f .Bool (b );};

// X returns the inner wrapped XML type.
func (_gdad StockChart )X ()*_c .CT_StockChart {return _gdad ._bfa };func (_gae DateAxis )SetPosition (p _c .ST_AxPos ){_gae ._efc .AxPos =_c .NewCT_AxPos ();_gae ._efc .AxPos .ValAttr =p ;};

// InitializeDefaults initializes a bar chart series to the default values.
func (_cag BarChartSeries )InitializeDefaults (){};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_aag Chart )AddLine3DChart ()Line3DChart {_caa (_aag ._dgb .Chart );_cabb :=_c .NewCT_PlotAreaChoice ();_aag ._dgb .Chart .PlotArea .Choice =append (_aag ._dgb .Chart .PlotArea .Choice ,_cabb );_cabb .Line3DChart =_c .NewCT_Line3DChart ();_cabb .Line3DChart .Grouping =_c .NewCT_Grouping ();_cabb .Line3DChart .Grouping .ValAttr =_c .ST_GroupingStandard ;return Line3DChart {_dbde :_cabb .Line3DChart };};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_dge DoughnutChart )SetHoleSize (pct uint8 ){if _dge ._deg .HoleSize ==nil {_dge ._deg .HoleSize =_c .NewCT_HoleSize ();};if _dge ._deg .HoleSize .ValAttr ==nil {_dge ._deg .HoleSize .ValAttr =&_c .ST_HoleSize {};};_dge ._deg .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};func MakeTitle (x *_c .CT_Title )Title {return Title {x }};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_bdb *_c .CT_PieChart ;};func (_caag Marker )Properties ()_bc .ShapeProperties {if _caag ._afb .SpPr ==nil {_caag ._afb .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_caag ._afb .SpPr );};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_bfa *_c .CT_StockChart ;};

// AddBarChart adds a new bar chart to a chart.
func (_bfb Chart )AddBarChart ()BarChart {_bg :=_c .NewCT_PlotAreaChoice ();_bfb ._dgb .Chart .PlotArea .Choice =append (_bfb ._dgb .Chart .PlotArea .Choice ,_bg );_bg .BarChart =_c .NewCT_BarChart ();_bg .BarChart .Grouping =_c .NewCT_BarGrouping ();_bg .BarChart .Grouping .ValAttr =_c .ST_BarGroupingStandard ;_adgc :=BarChart {_ab :_bg .BarChart };_adgc .InitializeDefaults ();return _adgc ;};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_dg *_c .CT_Bar3DChart ;};func (_fgg Legend )InitializeDefaults (){_fgg .SetPosition (_c .ST_LegendPosR );_fgg .SetOverlay (false );_fgg .Properties ().SetNoFill ();_fgg .Properties ().LineProperties ().SetNoFill ();};func MakeCategoryAxis (x *_c .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// Values returns the value data source.
func (_egef PieChartSeries )Values ()NumberDataSource {if _egef ._dbc .Val ==nil {_egef ._dbc .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_egef ._dbc .Val );};

// InitializeDefaults initializes an Radar series to the default values.
func (_dgf RadarChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_ggcg PieChartSeries )X ()*_c .CT_PieSer {return _ggcg ._dbc };

// X returns the inner wrapped XML type.
func (_cfd LineChartSeries )X ()*_c .CT_LineSer {return _cfd ._gaa };func (_cfg DateAxis )SetCrosses (axis Axis ){_cfg ._efc .CrossAx .ValAttr =axis .AxisID ()};

// X returns the inner wrapped XML type.
func (_cfb BubbleChartSeries )X ()*_c .CT_BubbleSer {return _cfb ._eae };

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_fbag Chart )AddBar3DChart ()Bar3DChart {_caa (_fbag ._dgb .Chart );_fbga :=_c .NewCT_PlotAreaChoice ();_fbag ._dgb .Chart .PlotArea .Choice =append (_fbag ._dgb .Chart .PlotArea .Choice ,_fbga );_fbga .Bar3DChart =_c .NewCT_Bar3DChart ();_fbga .Bar3DChart .Grouping =_c .NewCT_BarGrouping ();_fbga .Bar3DChart .Grouping .ValAttr =_c .ST_BarGroupingStandard ;_gcd :=Bar3DChart {_dg :_fbga .Bar3DChart };_gcd .InitializeDefaults ();return _gcd ;};

// AddSeries adds a default series to a line chart.
func (_dcgb Line3DChart )AddSeries ()LineChartSeries {_bec :=_dcgb .nextColor (len (_dcgb ._dbde .Ser ));_baa :=_c .NewCT_LineSer ();_dcgb ._dbde .Ser =append (_dcgb ._dbde .Ser ,_baa );_baa .Idx .ValAttr =uint32 (len (_dcgb ._dbde .Ser )-1);_baa .Order .ValAttr =uint32 (len (_dcgb ._dbde .Ser )-1);_fac :=LineChartSeries {_baa };_fac .InitializeDefaults ();_fac .Properties ().LineProperties ().SetSolidFill (_bec );_fac .Properties ().SetSolidFill (_bec );return _fac ;};

// CategoryAxis returns the category data source.
func (_ffa BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ffa ._aaf .Cat ==nil {_ffa ._aaf .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_ffa ._aaf .Cat );};

// Properties returns the chart's shape properties.
func (_cff Chart )Properties ()_bc .ShapeProperties {if _cff ._dgb .SpPr ==nil {_cff ._dgb .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_cff ._dgb .SpPr );};

// Properties returns the line chart series shape properties.
func (_decb SurfaceChartSeries )Properties ()_bc .ShapeProperties {if _decb ._abe .SpPr ==nil {_decb ._abe .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_decb ._abe .SpPr );};

// AddSeries adds a default series to an Pie3D chart.
func (_efd Pie3DChart )AddSeries ()PieChartSeries {_ddbg :=_c .NewCT_PieSer ();_efd ._eba .Ser =append (_efd ._eba .Ser ,_ddbg );_ddbg .Idx .ValAttr =uint32 (len (_efd ._eba .Ser )-1);_ddbg .Order .ValAttr =uint32 (len (_efd ._eba .Ser )-1);_eaf :=PieChartSeries {_ddbg };_eaf .InitializeDefaults ();return _eaf ;};

// CategoryAxis returns the category data source.
func (_aef BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aef ._eae .XVal ==nil {_aef ._eae .XVal =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_aef ._eae .XVal );};

// Labels returns the data label properties.
func (_ada LineChartSeries )Labels ()DataLabels {if _ada ._gaa .DLbls ==nil {_ada ._gaa .DLbls =_c .NewCT_DLbls ();};return MakeDataLabels (_ada ._gaa .DLbls );};type chartBase struct{};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_ea *_c .CT_BubbleChart ;};func (_dc BubbleChart )AddAxis (axis Axis ){_abc :=_c .NewCT_UnsignedInt ();_abc .ValAttr =axis .AxisID ();_dc ._ea .AxId =append (_dc ._ea .AxId ,_abc );};func (_fba AreaChart )AddAxis (axis Axis ){_cg :=_c .NewCT_UnsignedInt ();_cg .ValAttr =axis .AxisID ();_fba ._ca .AxId =append (_fba ._ca .AxId ,_cg );};

// AddLineChart adds a new line chart to a chart.
func (_bb Chart )AddLineChart ()LineChart {_gbe :=_c .NewCT_PlotAreaChoice ();_bb ._dgb .Chart .PlotArea .Choice =append (_bb ._dgb .Chart .PlotArea .Choice ,_gbe );_gbe .LineChart =_c .NewCT_LineChart ();_gbe .LineChart .Grouping =_c .NewCT_Grouping ();_gbe .LineChart .Grouping .ValAttr =_c .ST_GroupingStandard ;return LineChart {_bgd :_gbe .LineChart };};

// Index returns the index of the series
func (_addc SurfaceChartSeries )Index ()uint32 {return _addc ._abe .Idx .ValAttr };

// CategoryAxis returns the category data source.
func (_dfd PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dfd ._dbc .Cat ==nil {_dfd ._dbc .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_dfd ._dbc .Cat );};func (_dca RadarChart )AddAxis (axis Axis ){_gaeg :=_c .NewCT_UnsignedInt ();_gaeg .ValAttr =axis .AxisID ();_dca ._ede .AxId =append (_dca ._ede .AxId ,_gaeg );};func (_gff ScatterChartSeries )Values ()NumberDataSource {if _gff ._fbgg .YVal ==nil {_gff ._fbgg .YVal =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_gff ._fbgg .YVal );};

// AddAxis adds an axis to a line chart.
func (_ddac Line3DChart )AddAxis (axis Axis ){_egb :=_c .NewCT_UnsignedInt ();_egb .ValAttr =axis .AxisID ();_ddac ._dbde .AxId =append (_ddac ._dbde .AxId ,_egb );};

// Properties returns the bar chart series shape properties.
func (_bef RadarChartSeries )Properties ()_bc .ShapeProperties {if _bef ._dceb .SpPr ==nil {_bef ._dceb .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_bef ._dceb .SpPr );};func (_bacg SeriesAxis )AxisID ()uint32 {return _bacg ._gdfa .AxId .ValAttr };

// AddAxis adds an axis to a Surface chart.
func (_dcb SurfaceChart )AddAxis (axis Axis ){_debf :=_c .NewCT_UnsignedInt ();_debf .ValAttr =axis .AxisID ();_dcb ._afda .AxId =append (_dcb ._afda .AxId ,_debf );};

// AddSeries adds a default series to a Scatter chart.
func (_cdc ScatterChart )AddSeries ()ScatterChartSeries {_bee :=_cdc .nextColor (len (_cdc ._gda .Ser ));_ebac :=_c .NewCT_ScatterSer ();_cdc ._gda .Ser =append (_cdc ._gda .Ser ,_ebac );_ebac .Idx .ValAttr =uint32 (len (_cdc ._gda .Ser )-1);_ebac .Order .ValAttr =uint32 (len (_cdc ._gda .Ser )-1);_dfbf :=ScatterChartSeries {_ebac };_dfbf .InitializeDefaults ();_dfbf .Marker ().Properties ().LineProperties ().SetSolidFill (_bee );_dfbf .Marker ().Properties ().SetSolidFill (_bee );return _dfbf ;};func (_beef SeriesAxis )SetCrosses (axis Axis ){_beef ._gdfa .CrossAx .ValAttr =axis .AxisID ()};

// X returns the inner wrapped XML type.
func (_bcd Chart )X ()*_c .ChartSpace {return _bcd ._dgb };func (_cbc SurfaceChartSeries )Values ()NumberDataSource {if _cbc ._abe .Val ==nil {_cbc ._abe .Val =_c .NewCT_NumDataSource ();};_gfg :=MakeNumberDataSource (_cbc ._abe .Val );_gfg .CreateEmptyNumberCache ();return _gfg ;};

// AddSeries adds a default series to an Doughnut chart.
func (_dbg DoughnutChart )AddSeries ()PieChartSeries {_fbb :=_c .NewCT_PieSer ();_dbg ._deg .Ser =append (_dbg ._deg .Ser ,_fbb );_fbb .Idx .ValAttr =uint32 (len (_dbg ._deg .Ser )-1);_fbb .Order .ValAttr =uint32 (len (_dbg ._deg .Ser )-1);_febf :=PieChartSeries {_fbb };_febf .InitializeDefaults ();return _febf ;};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_ffb CategoryAxisDataSource )SetNumberReference (s string ){_ffb ._faad .Choice =_c .NewCT_AxDataSourceChoice ();_ffb ._faad .Choice .NumRef =_c .NewCT_NumRef ();_ffb ._faad .Choice .NumRef .F =s ;};func MakeMarker (x *_c .CT_Marker )Marker {return Marker {x }};func (_acg ValueAxis )SetCrosses (axis Axis ){_acg ._ffga .CrossAx .ValAttr =axis .AxisID ()};

// AddTitle sets a new title on the chart.
func (_ef Chart )AddTitle ()Title {_ef ._dgb .Chart .Title =_c .NewCT_Title ();_ef ._dgb .Chart .Title .Overlay =_c .NewCT_Boolean ();_ef ._dgb .Chart .Title .Overlay .ValAttr =_f .Bool (false );_ef ._dgb .Chart .AutoTitleDeleted =_c .NewCT_Boolean ();_ef ._dgb .Chart .AutoTitleDeleted .ValAttr =_f .Bool (false );_cef :=MakeTitle (_ef ._dgb .Chart .Title );_cef .InitializeDefaults ();return _cef ;};

// SetType sets the type the secone pie to either pie or bar
func (_dfba PieOfPieChart )SetType (t _c .ST_OfPieType ){_dfba ._ggcd .OfPieType .ValAttr =t };func (_aad LineChartSeries )InitializeDefaults (){_aad .Properties ().LineProperties ().SetWidth (1*_d .Point );_aad .Properties ().LineProperties ().SetSolidFill (_cf .Black );_aad .Properties ().LineProperties ().SetJoin (_bc .LineJoinRound );_aad .Marker ().SetSymbol (_c .ST_MarkerStyleNone );_aad .Labels ().SetShowLegendKey (false );_aad .Labels ().SetShowValue (false );_aad .Labels ().SetShowPercent (false );_aad .Labels ().SetShowCategoryName (false );_aad .Labels ().SetShowSeriesName (false );_aad .Labels ().SetShowLeaderLines (false );};func (_adb DateAxis )MajorGridLines ()GridLines {if _adb ._efc .MajorGridlines ==nil {_adb ._efc .MajorGridlines =_c .NewCT_ChartLines ();};return GridLines {_adb ._efc .MajorGridlines };};

// InitializeDefaults the bar chart to its defaults
func (_eacc DoughnutChart )InitializeDefaults (){_eacc ._deg .VaryColors =_c .NewCT_Boolean ();_eacc ._deg .VaryColors .ValAttr =_f .Bool (true );_eacc ._deg .HoleSize =_c .NewCT_HoleSize ();_eacc ._deg .HoleSize .ValAttr =&_c .ST_HoleSize {};_eacc ._deg .HoleSize .ValAttr .ST_HoleSizeUByte =_f .Uint8 (50);};

// X returns the inner wrapped XML type.
func (_egad PieChart )X ()*_c .CT_PieChart {return _egad ._bdb };

// Marker returns the marker properties.
func (_dbgb ScatterChartSeries )Marker ()Marker {if _dbgb ._fbgg .Marker ==nil {_dbgb ._fbgg .Marker =_c .NewCT_Marker ();};return MakeMarker (_dbgb ._fbgg .Marker );};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_ca *_c .CT_AreaChart ;};func (_egefg SeriesAxis )InitializeDefaults (){};func (_cde DateAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_cde ._efc .TickLblPos =nil ;}else {_cde ._efc .TickLblPos =_c .NewCT_TickLblPos ();_cde ._efc .TickLblPos .ValAttr =p ;};};

// InitializeDefaults the bar chart to its defaults
func (_cgd Bar3DChart )InitializeDefaults (){_cgd .SetDirection (_c .ST_BarDirCol )};func (_cggb LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cggb ._gaa .Cat ==nil {_cggb ._gaa .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_cggb ._gaa .Cat );};func (_fdfe DateAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_fdfe ._efc .MinorTickMark =nil ;}else {_fdfe ._efc .MinorTickMark =_c .NewCT_TickMark ();_fdfe ._efc .MinorTickMark .ValAttr =m ;};};

// AddPieChart adds a new pie chart to a chart.
func (_ebd Chart )AddPieChart ()PieChart {_ega :=_c .NewCT_PlotAreaChoice ();_ebd ._dgb .Chart .PlotArea .Choice =append (_ebd ._dgb .Chart .PlotArea .Choice ,_ega );_ega .PieChart =_c .NewCT_PieChart ();_ffg :=PieChart {_bdb :_ega .PieChart };_ffg .InitializeDefaults ();return _ffg ;};

// AddSeries adds a default series to a bar chart.
func (_gb Bar3DChart )AddSeries ()BarChartSeries {_ff :=_gb .nextColor (len (_gb ._dg .Ser ));_gbf :=_c .NewCT_BarSer ();_gb ._dg .Ser =append (_gb ._dg .Ser ,_gbf );_gbf .Idx .ValAttr =uint32 (len (_gb ._dg .Ser )-1);_gbf .Order .ValAttr =uint32 (len (_gb ._dg .Ser )-1);_gga :=BarChartSeries {_gbf };_gga .InitializeDefaults ();_gga .Properties ().SetSolidFill (_ff );return _gga ;};

// Properties returns the bar chart series shape properties.
func (_gg AreaChartSeries )Properties ()_bc .ShapeProperties {if _gg ._eg .SpPr ==nil {_gg ._eg .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_gg ._eg .SpPr );};func (_egfg StockChart )AddAxis (axis Axis ){_abg :=_c .NewCT_UnsignedInt ();_abg .ValAttr =axis .AxisID ();_egfg ._bfa .AxId =append (_egfg ._bfa .AxId ,_abg );};

// SetText sets the series text
func (_cgcg SurfaceChartSeries )SetText (s string ){_cgcg ._abe .Tx =_c .NewCT_SerTx ();_cgcg ._abe .Tx .Choice .V =&s ;};func (_adg CategoryAxis )SetPosition (p _c .ST_AxPos ){_adg ._bacf .AxPos =_c .NewCT_AxPos ();_adg ._bacf .AxPos .ValAttr =p ;};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_aaa BubbleChartSeries )InitializeDefaults (){};func (_bgdda ScatterChartSeries )SetSmooth (b bool ){_bgdda ._fbgg .Smooth =_c .NewCT_Boolean ();_bgdda ._fbgg .Smooth .ValAttr =&b ;};type SurfaceChartSeries struct{_abe *_c .CT_SurfaceSer };

// CategoryAxis returns the category data source.
func (_ee AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ee ._eg .Cat ==nil {_ee ._eg .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_ee ._eg .Cat );};

// InitializeDefaults initializes an area series to the default values.
func (_fd AreaChartSeries )InitializeDefaults (){};var _cdg =[]_cf .Color {_cf .RGB (0x33,0x66,0xcc),_cf .RGB (0xDC,0x39,0x12),_cf .RGB (0xFF,0x99,0x00),_cf .RGB (0x10,0x96,0x18),_cf .RGB (0x99,0x00,0x99),_cf .RGB (0x3B,0x3E,0xAC),_cf .RGB (0x00,0x99,0xC6),_cf .RGB (0xDD,0x44,0x77),_cf .RGB (0x66,0xAA,0x00),_cf .RGB (0xB8,0x2E,0x2E),_cf .RGB (0x31,0x63,0x95),_cf .RGB (0x99,0x44,0x99),_cf .RGB (0x22,0xAA,0x99),_cf .RGB (0xAA,0xAA,0x11),_cf .RGB (0x66,0x33,0xCC),_cf .RGB (0xE6,0x73,0x00),_cf .RGB (0x8B,0x07,0x07),_cf .RGB (0x32,0x92,0x62),_cf .RGB (0x55,0x74,0xA6),_cf .RGB (0x3B,0x3E,0xAC)};

// X returns the inner wrapped XML type.
func (_dcc SurfaceChart )X ()*_c .CT_SurfaceChart {return _dcc ._afda };func (_fdbd Title )InitializeDefaults (){_fdbd .SetText ("\u0054\u0069\u0074l\u0065");_fdbd .RunProperties ().SetSize (16*_d .Point );_fdbd .RunProperties ().SetSolidFill (_cf .Black );_fdbd .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_fdbd .RunProperties ().SetBold (false );};

// InitializeDefaults the bar chart to its defaults
func (_bd AreaChart )InitializeDefaults (){};

// Values returns the value data source.
func (_deb BubbleChartSeries )Values ()NumberDataSource {if _deb ._eae .YVal ==nil {_deb ._eae .YVal =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_deb ._eae .YVal );};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_eae *_c .CT_BubbleSer };func (_ecc CategoryAxis )AxisID ()uint32 {return _ecc ._bacf .AxId .ValAttr };

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_afda *_c .CT_SurfaceChart ;};

// X returns the inner wrapped XML type.
func (_ffcb PieOfPieChart )X ()*_c .CT_OfPieChart {return _ffcb ._ggcd };func (_bbd ScatterChart )InitializeDefaults (){_bbd ._gda .ScatterStyle .ValAttr =_c .ST_ScatterStyleMarker ;};func (_ceb DataLabels )SetShowSeriesName (b bool ){_ceb .ensureChoice ();_ceb ._fge .Choice .ShowSerName =_c .NewCT_Boolean ();_ceb ._fge .Choice .ShowSerName .ValAttr =_f .Bool (b );};type GridLines struct{_bda *_c .CT_ChartLines };

// AddPieOfPieChart adds a new pie chart to a chart.
func (_ggf Chart )AddPieOfPieChart ()PieOfPieChart {_faac :=_c .NewCT_PlotAreaChoice ();_ggf ._dgb .Chart .PlotArea .Choice =append (_ggf ._dgb .Chart .PlotArea .Choice ,_faac );_faac .OfPieChart =_c .NewCT_OfPieChart ();_fbc :=PieOfPieChart {_ggcd :_faac .OfPieChart };_fbc .InitializeDefaults ();return _fbc ;};

// Properties returns the bar chart series shape properties.
func (_bce BarChartSeries )Properties ()_bc .ShapeProperties {if _bce ._aaf .SpPr ==nil {_bce ._aaf .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_bce ._aaf .SpPr );};func (_gdb Marker )SetSymbol (s _c .ST_MarkerStyle ){if s ==_c .ST_MarkerStyleUnset {_gdb ._afb .Symbol =nil ;}else {_gdb ._afb .Symbol =_c .NewCT_MarkerStyle ();_gdb ._afb .Symbol .ValAttr =s ;};};func (_dae Chart )AddSeriesAxis ()SeriesAxis {_cc :=_c .NewCT_SerAx ();if _dae ._dgb .Chart .PlotArea .CChoice ==nil {_dae ._dgb .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_cc .AxId =_c .NewCT_UnsignedInt ();_cc .AxId .ValAttr =0x7FFFFFFF&_dd .Uint32 ();_dae ._dgb .Chart .PlotArea .CChoice .SerAx =append (_dae ._dgb .Chart .PlotArea .CChoice .SerAx ,_cc );_cc .Delete =_c .NewCT_Boolean ();_cc .Delete .ValAttr =_f .Bool (false );_eed :=MakeSeriesAxis (_cc );_eed .InitializeDefaults ();return _eed ;};func (_afg Title )RunProperties ()_bc .RunProperties {if _afg ._eafe .Tx ==nil {_afg .SetText ("");};if _afg ._eafe .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_afg ._eafe .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_g .NewCT_TextCharacterProperties ();};return _bc .MakeRunProperties (_afg ._eafe .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func (_ebef DataLabels )SetShowPercent (b bool ){_ebef .ensureChoice ();_ebef ._fge .Choice .ShowPercent =_c .NewCT_Boolean ();_ebef ._fge .Choice .ShowPercent .ValAttr =_f .Bool (b );};type Legend struct{_gfe *_c .CT_Legend };func (_ffef LineChartSeries )SetSmooth (b bool ){_ffef ._gaa .Smooth =_c .NewCT_Boolean ();_ffef ._gaa .Smooth .ValAttr =&b ;};

// X returns the inner wrapped XML type.
func (_dec Pie3DChart )X ()*_c .CT_Pie3DChart {return _dec ._eba };

// X returns the inner wrapped XML type.
func (_ffab BubbleChart )X ()*_c .CT_BubbleChart {return _ffab ._ea };

// Properties returns the bar chart series shape properties.
func (_gfba PieChartSeries )Properties ()_bc .ShapeProperties {if _gfba ._dbc .SpPr ==nil {_gfba ._dbc .SpPr =_g .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_gfba ._dbc .SpPr );};func _caa (_cab *_c .CT_Chart ){_cab .View3D =_c .NewCT_View3D ();_cab .View3D .RotX =_c .NewCT_RotX ();_cab .View3D .RotX .ValAttr =_f .Int8 (15);_cab .View3D .RotY =_c .NewCT_RotY ();_cab .View3D .RotY .ValAttr =_f .Uint16 (20);_cab .View3D .RAngAx =_c .NewCT_Boolean ();_cab .View3D .RAngAx .ValAttr =_f .Bool (false );_cab .Floor =_c .NewCT_Surface ();_cab .Floor .Thickness =_c .NewCT_Thickness ();_cab .Floor .Thickness .ValAttr .Uint32 =_f .Uint32 (0);_cab .SideWall =_c .NewCT_Surface ();_cab .SideWall .Thickness =_c .NewCT_Thickness ();_cab .SideWall .Thickness .ValAttr .Uint32 =_f .Uint32 (0);_cab .BackWall =_c .NewCT_Surface ();_cab .BackWall .Thickness =_c .NewCT_Thickness ();_cab .BackWall .Thickness .ValAttr .Uint32 =_f .Uint32 (0);};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_dbc *_c .CT_PieSer };func (_fedg ValueAxis )MajorGridLines ()GridLines {if _fedg ._ffga .MajorGridlines ==nil {_fedg ._ffga .MajorGridlines =_c .NewCT_ChartLines ();};return GridLines {_fedg ._ffga .MajorGridlines };};type ValueAxis struct{_ffga *_c .CT_ValAx };

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_gaa *_c .CT_LineSer };func (_ccd DataLabels )SetShowLeaderLines (b bool ){_ccd .ensureChoice ();_ccd ._fge .Choice .ShowLeaderLines =_c .NewCT_Boolean ();_ccd ._fge .Choice .ShowLeaderLines .ValAttr =_f .Bool (b );};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_eg *_c .CT_AreaSer };

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_gge CategoryAxisDataSource )SetLabelReference (s string ){_gge ._faad .Choice =_c .NewCT_AxDataSourceChoice ();_gge ._faad .Choice .StrRef =_c .NewCT_StrRef ();_gge ._faad .Choice .StrRef .F =s ;};func MakeDataLabels (x *_c .CT_DLbls )DataLabels {return DataLabels {x }};

// AddSeries adds a default series to an Pie chart.
func (_aea PieChart )AddSeries ()PieChartSeries {_fef :=_c .NewCT_PieSer ();_aea ._bdb .Ser =append (_aea ._bdb .Ser ,_fef );_fef .Idx .ValAttr =uint32 (len (_aea ._bdb .Ser )-1);_fef .Order .ValAttr =uint32 (len (_aea ._bdb .Ser )-1);_acd :=PieChartSeries {_fef };_acd .InitializeDefaults ();return _acd ;};

// Chart is a generic chart.
type Chart struct{_dgb *_c .ChartSpace };

// SetOrder sets the order of the series
func (_daca SurfaceChartSeries )SetOrder (idx uint32 ){_daca ._abe .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_ge Area3DChart )X ()*_c .CT_Area3DChart {return _ge ._dda };