//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_ca "bytes";_b "errors";_cb "fmt";_db "github.com/AlexGames73/unioffice-free/common/logger";_a "github.com/AlexGames73/unioffice-free/internal/mergesort";_geb "github.com/AlexGames73/unioffice-free/internal/wildcard";_gdf "github.com/AlexGames73/unioffice-free/spreadsheet/format";_f "github.com/AlexGames73/unioffice-free/spreadsheet/reference";_ef "github.com/AlexGames73/unioffice-free/spreadsheet/update";_bg "io";_cd "math";_g "math/big";_gf "math/rand";_gd "regexp";_e "sort";_dd "strconv";_ea "strings";_ge "sync";_ee "time";_d "unicode";);

// Update updates references in the BinaryExpr after removing a row/column.
func (_gcf BinaryExpr )Update (q *_ef .UpdateQuery )Expression {_afd :=_gcf ;_afd ._ba =_gcf ._ba .Update (q );_afd ._af =_gcf ._af .Update (q );return _afd ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ecff ,_dgefb :=_ebaba (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _dgefb .Type ==ResultTypeError {return _dgefb ;};_dbed :=_ecff ._aabe ;_ggg :=_ecff ._cgbe ;_aeab :=_ecff ._fddf ;_fcfdf :=_ecff ._fbgc ;_fdacc :=_ecff ._adbc ;_ggfga :=_ecff ._edcb ;return _cgde (_dbed ,_ggg ,_aeab ,_fcfdf ,_fdacc ,_ggfga );};var _acg =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_afbg :=args [0];if _afbg .Type !=ResultTypeNumber &&_afbg .Type !=ResultTypeString &&_afbg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_bcdg :=args [1].ValueString ;switch _afbg .Type {case ResultTypeNumber :return MakeStringResult (_gdf .Number (_afbg .ValueNumber ,_bcdg ));case ResultTypeString :return MakeStringResult (_gdf .String (_afbg .ValueString ,_bcdg ));case ResultTypeEmpty :return MakeStringResult (_gdf .Number (0,_bcdg ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ggaad :=args [0];if _ggaad .Type ==ResultTypeError ||_ggaad .Type ==ResultTypeString {return _ggaad ;};return _fcc ;};func _eaafc (_abbdf ,_dcdeb int )string {const TOKSTART =4;if !_edag {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_eccaa :=range _acdc {if _eccaa ._badec ==_abbdf &&_eccaa ._afcg ==_dcdeb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_eccaa ._abbb ;};};_ggcfg :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_gecg (_dcdeb );_bedgb :=make ([]int ,0,4);_eeegf :=_bfcgd [_abbdf ];for _abdfe :=TOKSTART ;_abdfe -1< len (_bgbcg );_abdfe ++{if _eeaf :=_eeegf +_abdfe ;_eeaf >=0&&_eeaf < _bdbb &&_fagea [_ebbgg [_eeaf ]]==_abdfe {if len (_bedgb )==cap (_bedgb ){return _ggcfg ;};_bedgb =append (_bedgb ,_abdfe );};};if _dgdfa [_abbdf ]==-2{_cgbaa :=0;for _eceb [_cgbaa ]!=-1||_eceb [_cgbaa +1]!=_abbdf {_cgbaa +=2;};for _cgbaa +=2;_eceb [_cgbaa ]>=0;_cgbaa +=2{_gcab :=_eceb [_cgbaa ];if _gcab < TOKSTART ||_eceb [_cgbaa +1]==0{continue ;};if len (_bedgb )==cap (_bedgb ){return _ggcfg ;};_bedgb =append (_bedgb ,_gcab );};if _eceb [_cgbaa +1]!=0{return _ggcfg ;};};for _eede ,_efggf :=range _bedgb {if _eede ==0{_ggcfg +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_ggcfg +="\u0020\u006f\u0072\u0020";};_ggcfg +=_gecg (_efggf );};return _ggcfg ;};func _ddgdb (_gggd string ,_abggg _ee .Time )(_ee .Time ,error ){_ddgb ,_ ,_gfag :=_g .ParseFloat (_gggd ,10,128,_g .ToNearestEven );if _gfag !=nil {return _ee .Time {},_gfag ;};_deffec :=new (_g .Float );_deffec .SetUint64 (uint64 (24*_ee .Hour ));_ddgb .Mul (_ddgb ,_deffec );_ccaaa ,_ :=_ddgb .Uint64 ();_feccae :=_abggg .Add (_ee .Duration (_ccaaa ));return _eegc (_feccae ),nil ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _dcaed (args ,false )};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgbgg :=args [0].Type ;for _ ,_cffbe :=range args {if _cffbe .Type !=_fgbgg {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _fgbgg {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_bfead :=len (args [0].ListValues ());_caaf :=make ([]float64 ,_bfead );for _eddgf :=range _caaf {_caaf [_eddgf ]=1.0;};for _ ,_efdb :=range args {if len (_efdb .ListValues ())!=_bfead {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _aagd ,_bdcc :=range _efdb .ListValues (){_bdcc =_bdcc .AsNumber ();if _bdcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_caaf [_aagd ]=_caaf [_aagd ]*_bdcc .ValueNumber ;};};_ggbee :=0.0;for _ ,_baaf :=range _caaf {_ggbee +=_baaf ;};return MakeNumberResult (_ggbee );};return MakeNumberResult (1.0);};

// Reference returns a string reference value to a sheet.
func (_eafg SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_eafg ._dcecf };};

// Reference returns an invalid reference for Error.
func (_fbe Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns an invalid reference for Bool.
func (_cce Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_bbae :=len (args );if _bbae < 4||_bbae > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fadfc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfcb :=args [1].ValueNumber ;if _cfcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edcg :=args [2].ValueNumber ;if _edcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fefd :=args [3].ValueNumber ;_bafg :=0.0;if _bbae > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bafg =args [4].ValueNumber ;};_dab :=0;if _bbae ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dab =int (args [5].ValueNumber );if _dab !=0{_dab =1;};};return MakeNumberResult (_agead (_fadfc ,_cfcb ,_edcg ,_fefd ,_bafg ,_dab ));};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbdcb :=args [0].AsNumber ();if _fbdcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edcfd :=args [1].AsNumber ();if _edcfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cggga :=int (_edcfd .ValueNumber );if _cggga < 0||_cggga > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_dabc :=0;if len (args )> 2{_ebabe :=args [2].AsNumber ();if _ebabe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dabc =int (_ebabe .ValueNumber );};_fafd :=_dd .FormatInt (int64 (_fbdcb .ValueNumber ),_cggga );if len (_fafd )< _dabc {_fafd =_ea .Repeat ("\u0030",_dabc -len (_fafd ))+_fafd ;};return MakeStringResult (_fafd );};func (_dfba *Lexer )Next ()*node {_dfba ._dgcag .Lock ();defer _dfba ._dgcag .Unlock ();if len (_dfba ._aefbe )> 0{_bcfec :=_dfba ._aefbe [0];_dfba ._aefbe =_dfba ._aefbe [1:];return _bcfec ;};return _dfba .nextRaw ();};const _eagf =57351;var _bfd =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Eval evaluates and returns an expression with prefix.
func (_gagfe PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_fgdf :=_gagfe ._fefed .Reference (ctx ,ev );switch _fgdf .Type {case ReferenceTypeSheet :if _eadf (_fgdf ,ctx ){return MakeErrorResultType (ErrorTypeName ,_cb .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fgdf .Value ));};_efdga :=ctx .Sheet (_fgdf .Value );return _gagfe ._dcec .Eval (_efdga ,ev );default:return MakeErrorResult (_cb .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fgdf .Type ));};};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_ggfg ,_daee :=_gcbc (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _daee .Type ==ResultTypeError {return _daee ;};_fga :=_cdb (_ggfg ._bce );_cbggg :=_cdb (_ggfg ._dgf );_cfcg :=_ggfg ._fdef ;_deeb :=_ggfg ._fab ;_fbbf :=_aed (_fga ,_cbggg ,_cfcg ,_deeb );_begc ,_edd ,_beeg :=_fbbf .Date ();return MakeNumberResult (_decg (_begc ,int (_edd ),_beeg ));};const _geea =57368;var _aceed =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };func _gefca (_fegfg string )string {_fegfg =_ea .Replace (_fegfg ,"\u000a","\u005c\u006e",-1);_fegfg =_ea .Replace (_fegfg ,"\u000d","\u005c\u0072",-1);_fegfg =_ea .Replace (_fegfg ,"\u0009","\u005c\u0074",-1);return _fegfg ;};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddfc :=int (args [0].ValueNumber );return MakeBoolResult (_ddfc ==_ddfc /2*2);};func (_fcefd *Lexer )lex (_dfff _bg .Reader ){_caff ,_acbg ,_cfda :=0,0,0;_eeac :=-1;_aabeg ,_adda ,_abbc :=0,0,0;_ =_abbc ;_fbgda :=1;_ =_fbgda ;_adef :=make ([]byte ,4096);_aadfd :=false ;for !_aadfd {_dgcda :=0;if _aabeg > 0{_dgcda =_acbg -_aabeg ;};_acbg =0;_ggdf ,_gffce :=_dfff .Read (_adef [_dgcda :]);if _ggdf ==0||_gffce !=nil {_aadfd =true ;};_cfda =_ggdf +_dgcda ;if _cfda < len (_adef ){_eeac =_cfda ;};{_caff =_ebaaa ;_aabeg =0;_adda =0;_abbc =0;};{var _gbegf int ;var _cfcef uint ;if _acbg ==_cfda {goto _dcbed ;};if _caff ==0{goto _gged ;};_fbgcb :_gbegf =int (_aeaf [_caff ]);_cfcef =uint (_ggae [_gbegf ]);_gbegf ++;for ;_cfcef > 0;_cfcef --{_gbegf ++;switch _ggae [_gbegf -1]{case 2:_aabeg =_acbg ;};};switch _caff {case 30:switch _adef [_acbg ]{case 34:goto _dbgf ;case 35:goto _fgbe ;case 36:goto _ebeb ;case 38:goto _gcaf ;case 39:goto _cfdg ;case 40:goto _fdbag ;case 41:goto _cgbb ;case 42:goto _fdbaf ;case 43:goto _egfd ;case 44:goto _agae ;case 45:goto _dgdcd ;case 47:goto _cadg ;case 58:goto _effce ;case 59:goto _dgee ;case 60:goto _gcaa ;case 61:goto _afab ;case 62:goto _fdefe ;case 63:goto _fbcd ;case 70:goto _fbcdc ;case 84:goto _afggba ;case 92:goto _bdgfd ;case 94:goto _ebde ;case 95:goto _ceegg ;case 123:goto _cdegg ;case 125:goto _gdaadg ;};switch {case _adef [_acbg ]< 65:switch {case _adef [_acbg ]> 37:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _cbegg ;};case _adef [_acbg ]>=33:goto _fbcd ;};case _adef [_acbg ]> 90:switch {case _adef [_acbg ]> 93:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _ddce ;};case _adef [_acbg ]>=91:goto _fbcd ;};default:goto _defe ;};goto _fbgab ;case 1:switch _adef [_acbg ]{case 33:goto _dcfb ;case 47:goto _ggdd ;case 123:goto _ggdd ;case 125:goto _ggdd ;};switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _ggdd ;};case _adef [_acbg ]> 45:switch {case _adef [_acbg ]> 63:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _ggdd ;};case _adef [_acbg ]>=58:goto _ggdd ;};default:goto _ggdd ;};goto _fbgab ;case 0:goto _gged ;case 2:if _adef [_acbg ]==34{goto _cebd ;};goto _dbgf ;case 31:if _adef [_acbg ]==34{goto _dbgf ;};goto _gdag ;case 3:switch _adef [_acbg ]{case 78:goto _ffcf ;case 82:goto _eegb ;};goto _fbcd ;case 4:switch _adef [_acbg ]{case 47:goto _egcc ;case 85:goto _geca ;};goto _fbcd ;case 5:if _adef [_acbg ]==65{goto _acagg ;};goto _fbcd ;case 6:switch _adef [_acbg ]{case 76:goto _gfbe ;case 77:goto _fceg ;};goto _fbcd ;case 7:if _adef [_acbg ]==76{goto _fceg ;};goto _fbcd ;case 8:if _adef [_acbg ]==33{goto _acagg ;};goto _fbcd ;case 9:if _adef [_acbg ]==69{goto _dbbgd ;};goto _fbcd ;case 10:if _adef [_acbg ]==70{goto _aafgg ;};goto _fbcd ;case 11:if _adef [_acbg ]==33{goto _eadeg ;};goto _fbcd ;case 12:switch _adef [_acbg ]{case 33:goto _dcfb ;case 47:goto _fbcd ;case 123:goto _fbcd ;case 125:goto _fbcd ;};switch {case _adef [_acbg ]< 48:switch {case _adef [_acbg ]> 35:if 37<=_adef [_acbg ]&&_adef [_acbg ]<=45{goto _fbcd ;};case _adef [_acbg ]>=34:goto _fbcd ;};case _adef [_acbg ]> 57:switch {case _adef [_acbg ]< 65:if 58<=_adef [_acbg ]&&_adef [_acbg ]<=63{goto _fbcd ;};case _adef [_acbg ]> 90:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _fbcd ;};default:goto _gbadf ;};default:goto _cfagg ;};goto _fbgab ;case 13:switch _adef [_acbg ]{case 33:goto _dcfb ;case 47:goto _fbcd ;case 58:goto _begcd ;case 123:goto _fbcd ;case 125:goto _fbcd ;};switch {case _adef [_acbg ]< 48:switch {case _adef [_acbg ]> 35:if 37<=_adef [_acbg ]&&_adef [_acbg ]<=45{goto _fbcd ;};case _adef [_acbg ]>=34:goto _fbcd ;};case _adef [_acbg ]> 57:switch {case _adef [_acbg ]> 63:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _fbcd ;};case _adef [_acbg ]>=59:goto _fbcd ;};default:goto _cfagg ;};goto _fbgab ;case 14:if _adef [_acbg ]==36{goto _aafb ;};if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _cdcea ;};goto _ggdd ;case 15:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _cdcea ;};goto _ggdd ;case 32:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _cdcea ;};goto _acaab ;case 16:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 47:goto _fbcd ;case 58:goto _ccga ;case 123:goto _fbcd ;case 125:goto _fbcd ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 45:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _ggad ;};case _adef [_acbg ]>=34:goto _fbcd ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]> 90:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _fbcd ;};case _adef [_acbg ]>=65:goto _gbadf ;};default:goto _fbcd ;};goto _fbgab ;case 17:switch _adef [_acbg ]{case 33:goto _dcfb ;case 47:goto _ggdd ;case 123:goto _ggdd ;case 125:goto _ggdd ;};switch {case _adef [_acbg ]< 48:switch {case _adef [_acbg ]> 35:if 37<=_adef [_acbg ]&&_adef [_acbg ]<=45{goto _ggdd ;};case _adef [_acbg ]>=34:goto _ggdd ;};case _adef [_acbg ]> 57:switch {case _adef [_acbg ]> 63:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _ggdd ;};case _adef [_acbg ]>=58:goto _ggdd ;};default:goto _ggad ;};goto _fbgab ;case 33:switch _adef [_acbg ]{case 33:goto _dcfb ;case 47:goto _cgce ;case 123:goto _cgce ;case 125:goto _cgce ;};switch {case _adef [_acbg ]< 48:switch {case _adef [_acbg ]> 35:if 37<=_adef [_acbg ]&&_adef [_acbg ]<=45{goto _cgce ;};case _adef [_acbg ]>=34:goto _cgce ;};case _adef [_acbg ]> 57:switch {case _adef [_acbg ]> 63:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _cgce ;};case _adef [_acbg ]>=58:goto _cgce ;};default:goto _ggad ;};goto _fbgab ;case 18:if _adef [_acbg ]==36{goto _feggc ;};if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dgfee ;};goto _ggdd ;case 19:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dgfee ;};goto _ggdd ;case 34:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dgfee ;};goto _aged ;case 20:switch _adef [_acbg ]{case 39:goto _fbcd ;case 42:goto _fbcd ;case 47:goto _fbcd ;case 58:goto _fbcd ;case 63:goto _fbcd ;};if 91<=_adef [_acbg ]&&_adef [_acbg ]<=93{goto _fbcd ;};goto _adab ;case 21:switch _adef [_acbg ]{case 39:goto _fdgde ;case 42:goto _fbcd ;case 47:goto _fbcd ;case 58:goto _fbcd ;case 63:goto _fbcd ;};if 91<=_adef [_acbg ]&&_adef [_acbg ]<=93{goto _fbcd ;};goto _adab ;case 22:if _adef [_acbg ]==33{goto _abbea ;};goto _fbcd ;case 35:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _ggaec ;case 58:goto _begcd ;case 101:goto _gegcf ;case 123:goto _cdabg ;case 125:goto _cdabg ;};switch {case _adef [_acbg ]< 48:switch {case _adef [_acbg ]> 35:if 37<=_adef [_acbg ]&&_adef [_acbg ]<=47{goto _cdabg ;};case _adef [_acbg ]>=34:goto _cdabg ;};case _adef [_acbg ]> 57:switch {case _adef [_acbg ]> 63:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _cdabg ;};case _adef [_acbg ]>=59:goto _cdabg ;};default:goto _cbegg ;};goto _fbgab ;case 36:switch _adef [_acbg ]{case 33:goto _dcfb ;case 47:goto _cdabg ;case 101:goto _gegcf ;case 123:goto _cdabg ;case 125:goto _cdabg ;};switch {case _adef [_acbg ]< 48:switch {case _adef [_acbg ]> 35:if 37<=_adef [_acbg ]&&_adef [_acbg ]<=45{goto _cdabg ;};case _adef [_acbg ]>=34:goto _cdabg ;};case _adef [_acbg ]> 57:switch {case _adef [_acbg ]> 63:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _cdabg ;};case _adef [_acbg ]>=58:goto _cdabg ;};default:goto _ggaec ;};goto _fbgab ;case 23:switch _adef [_acbg ]{case 33:goto _dcfb ;case 47:goto _efega ;case 123:goto _efega ;case 125:goto _efega ;};switch {case _adef [_acbg ]< 48:switch {case _adef [_acbg ]> 35:if 37<=_adef [_acbg ]&&_adef [_acbg ]<=45{goto _efega ;};case _adef [_acbg ]>=34:goto _efega ;};case _adef [_acbg ]> 57:switch {case _adef [_acbg ]> 63:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _efega ;};case _adef [_acbg ]>=58:goto _efega ;};default:goto _eggaf ;};goto _fbgab ;case 37:switch _adef [_acbg ]{case 33:goto _dcfb ;case 47:goto _cdabg ;case 123:goto _cdabg ;case 125:goto _cdabg ;};switch {case _adef [_acbg ]< 48:switch {case _adef [_acbg ]> 35:if 37<=_adef [_acbg ]&&_adef [_acbg ]<=45{goto _cdabg ;};case _adef [_acbg ]>=34:goto _cdabg ;};case _adef [_acbg ]> 57:switch {case _adef [_acbg ]> 63:if 91<=_adef [_acbg ]&&_adef [_acbg ]<=94{goto _cdabg ;};case _adef [_acbg ]>=58:goto _cdabg ;};default:goto _eggaf ;};goto _fbgab ;case 38:switch _adef [_acbg ]{case 61:goto _bccbb ;case 62:goto _geffe ;};goto _gccc ;case 39:if _adef [_acbg ]==61{goto _fbgb ;};goto _ggcd ;case 24:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _fbcd ;case 125:goto _fbcd ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _fbcd ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _fbcd ;};default:goto _fbcd ;};goto _fbgab ;case 40:switch _adef [_acbg ]{case 33:goto _dcfb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _aecag ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _aecag ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 41:switch _adef [_acbg ]{case 46:goto _cfbaa ;case 92:goto _cfbaa ;case 95:goto _cfbaa ;};switch {case _adef [_acbg ]< 65:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _cfbaa ;};case _adef [_acbg ]> 90:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _cfbaa ;};default:goto _cfbaa ;};goto _bgdc ;case 42:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 43:switch _adef [_acbg ]{case 33:goto _dcfb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _cgce ;case 125:goto _cgce ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _cgce ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};default:goto _cgce ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _aecag ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _cgce ;};default:goto _cgce ;};goto _fbgab ;case 44:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _ggdd ;case 125:goto _ggdd ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _ggdd ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _ggdd ;};default:goto _ggdd ;};goto _fbgab ;case 25:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 65:goto _gdgfe ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _fbcd ;case 125:goto _fbcd ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _fbcd ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 66<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _fbcd ;};default:goto _fbcd ;};goto _fbgab ;case 45:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 76:goto _adaa ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 46:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 83:goto _gffcd ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 47:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 69:goto _ddae ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 26:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 79:goto _bgddf ;case 82:goto _agcd ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _fbcd ;case 125:goto _fbcd ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _fbcd ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _fbcd ;};default:goto _fbcd ;};goto _fbgab ;case 48:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 68:goto _egfeb ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 49:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 79:goto _baga ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 50:switch _adef [_acbg ]{case 33:goto _dcfb ;case 36:goto _aggb ;case 40:goto _fbgg ;case 46:goto _aecag ;case 58:goto _ccga ;case 85:goto _gffcd ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 59:switch {case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _eabe ;};case _adef [_acbg ]>=34:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dged ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 27:switch _adef [_acbg ]{case 46:goto _cfbaa ;case 92:goto _cfbaa ;case 95:goto _cfbaa ;};switch {case _adef [_acbg ]< 65:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _cfbaa ;};case _adef [_acbg ]> 90:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _cfbaa ;};default:goto _cfbaa ;};goto _fbcd ;case 28:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 120:goto _gedf ;case 123:goto _fbcd ;case 125:goto _fbcd ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _fbcd ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _fbcd ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _fbcd ;};default:goto _fbcd ;};goto _fbgab ;case 51:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 108:goto _gcdeb ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 52:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 102:goto _cefde ;case 110:goto _fbcbe ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 53:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 110:goto _ecbdbb ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 54:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _bgaa ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 55:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _dbdd ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dbdd ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 56:switch _adef [_acbg ]{case 33:goto _dcfb ;case 40:goto _gdgec ;case 46:goto _dbdd ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _dbdd ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _dbdd ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 57:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 109:goto _bafe ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 58:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gecb ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _bgdc ;case 125:goto _bgdc ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _bgdc ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _bgdc ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _bgdc ;};default:goto _bgdc ;};goto _fbgab ;case 59:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _efdg ;case 123:goto _ggdd ;case 125:goto _ggdd ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _ggdd ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _ggdd ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _efdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _ggdd ;};default:goto _ggdd ;};goto _fbgab ;case 29:switch _adef [_acbg ]{case 33:goto _dcfb ;case 46:goto _gbgdg ;case 92:goto _cfbaa ;case 95:goto _gbgdg ;case 123:goto _fbcd ;case 125:goto _fbcd ;};switch {case _adef [_acbg ]< 58:switch {case _adef [_acbg ]< 37:if 34<=_adef [_acbg ]&&_adef [_acbg ]<=35{goto _fbcd ;};case _adef [_acbg ]> 47:if 48<=_adef [_acbg ]&&_adef [_acbg ]<=57{goto _gbgdg ;};default:goto _fbcd ;};case _adef [_acbg ]> 63:switch {case _adef [_acbg ]< 91:if 65<=_adef [_acbg ]&&_adef [_acbg ]<=90{goto _gbgdg ;};case _adef [_acbg ]> 94:if 97<=_adef [_acbg ]&&_adef [_acbg ]<=122{goto _gbgdg ;};default:goto _fbcd ;};default:goto _fbcd ;};goto _fbgab ;};_fbcd :_caff =0;goto _egecb ;_fbgab :_caff =1;goto _egecb ;_dbgf :_caff =2;goto _egecb ;_fgbe :_caff =3;goto _egecb ;_ffcf :_caff =4;goto _egecb ;_egcc :_caff =5;goto _egecb ;_geca :_caff =6;goto _egecb ;_gfbe :_caff =7;goto _egecb ;_fceg :_caff =8;goto _egecb ;_eegb :_caff =9;goto _egecb ;_dbbgd :_caff =10;goto _egecb ;_aafgg :_caff =11;goto _egecb ;_ebeb :_caff =12;goto _egecb ;_cfagg :_caff =13;goto _egecb ;_begcd :_caff =14;goto _egecb ;_aafb :_caff =15;goto _egecb ;_gbadf :_caff =16;goto _egecb ;_aggb :_caff =17;goto _egecb ;_ccga :_caff =18;goto _egecb ;_feggc :_caff =19;goto _egecb ;_cfdg :_caff =20;goto _egecb ;_adab :_caff =21;goto _egecb ;_fdgde :_caff =22;goto _egecb ;_gegcf :_caff =23;goto _egecb ;_defe :_caff =24;goto _egecb ;_fbcdc :_caff =25;goto _egecb ;_afggba :_caff =26;goto _egecb ;_bdgfd :_caff =27;goto _egecb ;_ceegg :_caff =28;goto _egecb ;_ddce :_caff =29;goto _egecb ;_ggdd :_caff =30;goto _fcbf ;_dcfb :_caff =30;goto _dgcad ;_acagg :_caff =30;goto _cggaa ;_eadeg :_caff =30;goto _dbcdf ;_abbea :_caff =30;goto _dfgcc ;_efega :_caff =30;goto _gcbba ;_fbgg :_caff =30;goto _eebcg ;_gcaf :_caff =30;goto _ebbeg ;_fdbag :_caff =30;goto _bdac ;_cgbb :_caff =30;goto _ccfa ;_fdbaf :_caff =30;goto _cfcgg ;_egfd :_caff =30;goto _dbde ;_agae :_caff =30;goto _ebeg ;_dgdcd :_caff =30;goto _fcag ;_cadg :_caff =30;goto _gbfgd ;_effce :_caff =30;goto _cbgec ;_dgee :_caff =30;goto _abbeb ;_afab :_caff =30;goto _gcccc ;_ebde :_caff =30;goto _gcfgg ;_cdegg :_caff =30;goto _debfg ;_gdaadg :_caff =30;goto _cefaeg ;_gdag :_caff =30;goto _dade ;_acaab :_caff =30;goto _gcfae ;_cgce :_caff =30;goto _aagbf ;_aged :_caff =30;goto _efdc ;_cdabg :_caff =30;goto _gcfc ;_gccc :_caff =30;goto _bedd ;_bccbb :_caff =30;goto _acbgg ;_geffe :_caff =30;goto _egefb ;_ggcd :_caff =30;goto _fgec ;_fbgb :_caff =30;goto _cffdg ;_bgdc :_caff =30;goto _dce ;_gdgec :_caff =30;goto _eacc ;_cebd :_caff =31;goto _caafd ;_cdcea :_caff =32;goto _egecb ;_ggad :_caff =33;goto _gacee ;_dgfee :_caff =34;goto _egecb ;_cbegg :_caff =35;goto _cdcc ;_ggaec :_caff =36;goto _cdcc ;_eggaf :_caff =37;goto _cdcc ;_gcaa :_caff =38;goto _egecb ;_fdefe :_caff =39;goto _egecb ;_aecag :_caff =40;goto _fgab ;_cfbaa :_caff =41;goto _egecb ;_gbgdg :_caff =42;goto _fgab ;_eabe :_caff =43;goto _gacee ;_dged :_caff =44;goto _fgab ;_ddae :_caff =44;goto _afadf ;_baga :_caff =44;goto _aebcb ;_gdgfe :_caff =45;goto _fgab ;_adaa :_caff =46;goto _fgab ;_gffcd :_caff =47;goto _fgab ;_bgddf :_caff =48;goto _fgab ;_egfeb :_caff =49;goto _fgab ;_agcd :_caff =50;goto _fgab ;_gedf :_caff =51;goto _fgab ;_gcdeb :_caff =52;goto _fgab ;_cefde :_caff =53;goto _fgab ;_ecbdbb :_caff =54;goto _fgab ;_bgaa :_caff =55;goto _fgab ;_dbdd :_caff =56;goto _fgab ;_fbcbe :_caff =57;goto _fgab ;_bafe :_caff =58;goto _fgab ;_gecb :_caff =59;goto _fgab ;_efdg :_caff =59;goto _fccb ;_cggaa :_gbegf =3;goto _dace ;_dbcdf :_gbegf =5;goto _dace ;_dgcad :_gbegf =7;goto _dace ;_dfgcc :_gbegf =9;goto _dace ;_eebcg :_gbegf =11;goto _dace ;_eacc :_gbegf =13;goto _dace ;_ebbeg :_gbegf =15;goto _dace ;_debfg :_gbegf =17;goto _dace ;_cefaeg :_gbegf =19;goto _dace ;_bdac :_gbegf =21;goto _dace ;_ccfa :_gbegf =23;goto _dace ;_dbde :_gbegf =25;goto _dace ;_fcag :_gbegf =27;goto _dace ;_cfcgg :_gbegf =29;goto _dace ;_gbfgd :_gbegf =31;goto _dace ;_gcfgg :_gbegf =33;goto _dace ;_gcccc :_gbegf =35;goto _dace ;_acbgg :_gbegf =37;goto _dace ;_cffdg :_gbegf =39;goto _dace ;_egefb :_gbegf =41;goto _dace ;_cbgec :_gbegf =43;goto _dace ;_abbeb :_gbegf =45;goto _dace ;_ebeg :_gbegf =47;goto _dace ;_gcfc :_gbegf =49;goto _dace ;_aagbf :_gbegf =51;goto _dace ;_gcfae :_gbegf =53;goto _dace ;_efdc :_gbegf =55;goto _dace ;_dce :_gbegf =57;goto _dace ;_dade :_gbegf =59;goto _dace ;_bedd :_gbegf =61;goto _dace ;_fgec :_gbegf =63;goto _dace ;_gcbba :_gbegf =65;goto _dace ;_fcbf :_gbegf =67;goto _dace ;_afadf :_gbegf =72;goto _dace ;_cdcc :_gbegf =75;goto _dace ;_gacee :_gbegf =78;goto _dace ;_aebcb :_gbegf =81;goto _dace ;_fccb :_gbegf =84;goto _dace ;_fgab :_gbegf =87;goto _dace ;_caafd :_gbegf =90;goto _dace ;_dace :_cfcef =uint (_ggae [_gbegf ]);_gbegf ++;for ;_cfcef > 0;_cfcef --{_gbegf ++;switch _ggae [_gbegf -1]{case 3:_adda =_acbg +1;case 4:_abbc =1;case 5:_abbc =2;case 6:_abbc =3;case 7:_abbc =4;case 8:_abbc =11;case 9:_abbc =14;case 10:_abbc =15;case 11:_adda =_acbg +1;{_fcefd .emit (_eecea ,_adef [_aabeg :_adda ]);};case 12:_adda =_acbg +1;{_fcefd .emit (_fdgc ,_adef [_aabeg :_adda ]);};case 13:_adda =_acbg +1;{_fcefd .emit (_debg ,_adef [_aabeg :_adda -1]);};case 14:_adda =_acbg +1;{_fcefd .emit (_debg ,_adef [_aabeg +1:_adda -2]);};case 15:_adda =_acbg +1;{_fcefd .emit (_ecbb ,_adef [_aabeg :_adda -1]);};case 16:_adda =_acbg +1;{_fcefd .emit (_ecbb ,_adef [_aabeg :_adda -1]);};case 17:_adda =_acbg +1;{_fcefd .emit (_fbcfb ,_adef [_aabeg :_adda ]);};case 18:_adda =_acbg +1;{_fcefd .emit (_gddd ,_adef [_aabeg :_adda ]);};case 19:_adda =_acbg +1;{_fcefd .emit (_fgeg ,_adef [_aabeg :_adda ]);};case 20:_adda =_acbg +1;{_fcefd .emit (_badd ,_adef [_aabeg :_adda ]);};case 21:_adda =_acbg +1;{_fcefd .emit (_ecbfa ,_adef [_aabeg :_adda ]);};case 22:_adda =_acbg +1;{_fcefd .emit (_egada ,_adef [_aabeg :_adda ]);};case 23:_adda =_acbg +1;{_fcefd .emit (_bdgfb ,_adef [_aabeg :_adda ]);};case 24:_adda =_acbg +1;{_fcefd .emit (_begf ,_adef [_aabeg :_adda ]);};case 25:_adda =_acbg +1;{_fcefd .emit (_abgc ,_adef [_aabeg :_adda ]);};case 26:_adda =_acbg +1;{_fcefd .emit (_geea ,_adef [_aabeg :_adda ]);};case 27:_adda =_acbg +1;{_fcefd .emit (_eceg ,_adef [_aabeg :_adda ]);};case 28:_adda =_acbg +1;{_fcefd .emit (_dcgb ,_adef [_aabeg :_adda ]);};case 29:_adda =_acbg +1;{_fcefd .emit (_dgeg ,_adef [_aabeg :_adda ]);};case 30:_adda =_acbg +1;{_fcefd .emit (_edbf ,_adef [_aabeg :_adda ]);};case 31:_adda =_acbg +1;{_fcefd .emit (_eggaa ,_adef [_aabeg :_adda ]);};case 32:_adda =_acbg +1;{_fcefd .emit (_cbfef ,_adef [_aabeg :_adda ]);};case 33:_adda =_acbg +1;{_fcefd .emit (_cbdf ,_adef [_aabeg :_adda ]);};case 34:_adda =_acbg ;_acbg --;{_fcefd .emit (_cdggf ,_adef [_aabeg :_adda ]);};case 35:_adda =_acbg ;_acbg --;{_fcefd .emit (_faacc ,_adef [_aabeg :_adda ]);};case 36:_adda =_acbg ;_acbg --;{_fcefd .emit (_ecaa ,_adef [_aabeg :_adda ]);};case 37:_adda =_acbg ;_acbg --;{_fcefd .emit (_deaf ,_adef [_aabeg :_adda ]);};case 38:_adda =_acbg ;_acbg --;{_fcefd .emit (_eagf ,_adef [_aabeg :_adda ]);};case 39:_adda =_acbg ;_acbg --;{_fcefd .emit (_cbgbb ,_adef [_aabeg +1:_adda -1]);};case 40:_adda =_acbg ;_acbg --;{_fcefd .emit (_ggegg ,_adef [_aabeg :_adda ]);};case 41:_adda =_acbg ;_acbg --;{_fcefd .emit (_dddca ,_adef [_aabeg :_adda ]);};case 42:_acbg =(_adda )-1;{_fcefd .emit (_cdggf ,_adef [_aabeg :_adda ]);};case 43:switch _abbc {case 0:{_caff =0;goto _egecb ;};case 1:{_acbg =(_adda )-1;_fcefd .emit (_ccdba ,_adef [_aabeg :_adda ]);};case 2:{_acbg =(_adda )-1;_fcefd .emit (_cdggf ,_adef [_aabeg :_adda ]);};case 3:{_acbg =(_adda )-1;_fcefd .emit (_faacc ,_adef [_aabeg :_adda ]);};case 4:{_acbg =(_adda )-1;_fcefd .emit (_cbfdd ,_adef [_aabeg :_adda ]);};case 11:{_acbg =(_adda )-1;_fcefd .emit (_ccgbd ,_adef [_aabeg :_adda ]);};case 14:{_acbg =(_adda )-1;_fcefd .emit (_eagf ,_adef [_aabeg :_adda ]);};case 15:{_acbg =(_adda )-1;_fcefd .emit (_cbgbb ,_adef [_aabeg +1:_adda -1]);};};};};goto _egecb ;_egecb :_gbegf =int (_ffacfe [_caff ]);_cfcef =uint (_ggae [_gbegf ]);_gbegf ++;for ;_cfcef > 0;_cfcef --{_gbegf ++;switch _ggae [_gbegf -1]{case 0:_aabeg =0;case 1:_abbc =0;};};if _caff ==0{goto _gged ;};if _acbg ++;_acbg !=_cfda {goto _fbgcb ;};_dcbed :{};if _acbg ==_eeac {switch _caff {case 1:goto _ggdd ;case 2:goto _ggdd ;case 31:goto _gdag ;case 14:goto _ggdd ;case 15:goto _ggdd ;case 32:goto _acaab ;case 17:goto _ggdd ;case 33:goto _cgce ;case 18:goto _ggdd ;case 19:goto _ggdd ;case 34:goto _aged ;case 35:goto _cdabg ;case 36:goto _cdabg ;case 23:goto _efega ;case 37:goto _cdabg ;case 38:goto _gccc ;case 39:goto _ggcd ;case 40:goto _bgdc ;case 41:goto _bgdc ;case 42:goto _bgdc ;case 43:goto _cgce ;case 44:goto _ggdd ;case 45:goto _bgdc ;case 46:goto _bgdc ;case 47:goto _bgdc ;case 48:goto _bgdc ;case 49:goto _bgdc ;case 50:goto _bgdc ;case 51:goto _bgdc ;case 52:goto _bgdc ;case 53:goto _bgdc ;case 54:goto _bgdc ;case 55:goto _bgdc ;case 56:goto _bgdc ;case 57:goto _bgdc ;case 58:goto _bgdc ;case 59:goto _ggdd ;};};_gged :{};};if _aabeg > 0{copy (_adef [0:],_adef [_aabeg :]);};};_ =_eeac ;if _caff ==_dgcfg {_fcefd .emit (_fbebc ,nil );};close (_fcefd ._aabcee );};

// Eval evaluates and returns a number.
func (_aaga Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_aaga ._fcfe )};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_aaed :=args [0];if _aaed .Type !=ResultTypeArray &&_aaed .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abdfd :=_aaed .ValueArray ;if len (_abdfd )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_abdfd [0])));};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_eccae :=_ea .Split (v ,"\u003a");if len (_eccae )!=2{return nil ;};if _eccae [0]> _eccae [1]{_eccae [0],_eccae [1]=_eccae [1],_eccae [0];};return VerticalRange {_ccdcd :_eccae [0],_ggfec :_eccae [1]};};type defEval struct{evCache ;_aeb bool ;};func _def (_abdf int ,_gdfe _ee .Month ,_fccf int )int64 {if _abdf ==1900&&int (_gdfe )<=2{_fccf --;};_fbdc :=_ee .Date (_abdf ,_gdfe ,_fccf ,0,0,0,0,_ee .UTC );return _fbdc .Unix ();};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_bcee HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_ebbab :=_bcee .horizontalRangeReference ();if _daebc ,_abcfg :=ev .GetFromCache (_ebbab );_abcfg {return _daebc ;};_ffeca ,_ecea :=_fadgd (ctx ,_bcee ._cbgge ,_bcee ._faff );_bdbge :=_bgggd (ctx ,ev ,_ffeca ,_ecea );ev .SetCache (_ebbab ,_bdbge );return _bdbge ;};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dgecg :=args [0].AsNumber ();if _dgecg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feec :=0;if len (args )> 1{_cfced :=args [1];if _cfced .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_feec =int (_cfced .ValueNumber );if _feec < 0{_feec =0;}else if _feec > 4{_feec =4;};};_fefa :=_bfdg ;switch _feec {case 1:_fefa =_aada ;case 2:_fefa =_beb ;case 3:_fefa =_geaca ;case 4:_fefa =_eebg ;};_dgfe :=_cd .Trunc (_dgecg .ValueNumber );_edbe :=_ca .Buffer {};for _ ,_bfae :=range _fefa {for _dgfe >=_bfae ._faba {_edbe .WriteString (_bfae ._begg );_dgfe -=_bfae ._faba ;};};return MakeStringResult (_edbe .String ());};type durationArgs struct{_aabe float64 ;_cgbe float64 ;_fddf float64 ;_fbgc float64 ;_adbc float64 ;_edcb int ;};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgga :=args [0].AsNumber ();if _bgga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bgga .ValueNumber < 0{return MakeNumberResult (-1);}else if _bgga .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};const _fbcfb =57377;

// Number is a nubmer expression.
type Number struct{_fcfe float64 };

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ceed :=args [0].AsString ();if _ceed .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_ea .ToUpper (_ceed .ValueString ));};var _geaca =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ddbad :=args [0];if _ddbad .Type ==ResultTypeList {_eggd :=[][]Result {};for _ ,_cegd :=range _ddbad .ValueList {_eggd =append (_eggd ,[]Result {_cegd });};return MakeArrayResult (_eggd );};_cdaff :=make ([][]Result ,len (_ddbad .ValueArray [0]));for _ ,_ebec :=range _ddbad .ValueArray {for _efabb ,_gaag :=range _ebec {_cdaff [_efabb ]=append (_cdaff [_efabb ],_gaag );};};return MakeArrayResult (_cdaff );};func (_cabg Result )AsString ()Result {switch _cabg .Type {case ResultTypeNumber :return MakeStringResult (_cabg .Value ());default:return _cabg ;};};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_defd :=args [0].AsNumber ();_bfgfa :=args [1].AsNumber ();if _defd .Type !=ResultTypeNumber ||_bfgfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fcgg :=_cd .Trunc (_defd .ValueNumber );_fabbcb :=_cd .Trunc (_bfgfa .ValueNumber );if _fcgg < _fabbcb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _fcgg ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_fcgg +_fabbcb -1);args [1]=MakeNumberResult (_fcgg -1);return Combin (args );};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dddb :=args [0].AsString ();if _dddb .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_dddb .ValueString ,ev );};func _acedgd (_feeaa Result ,_gfgc *criteriaParsed )bool {if _feeaa .IsBoolean {return false ;};_bebe :=_feeaa .Type ;if _gfgc ._dggf {return _bebe ==ResultTypeNumber &&_feeaa .ValueNumber ==_gfgc ._daab ;}else if _bebe ==ResultTypeNumber {return _ccad (_feeaa .ValueNumber ,_gfgc ._gfac );};return _fcfde (_feeaa ,_gfgc );};func _egec (_dabgf []Result )[]rangeIndex {_cddfg :=[]rangeIndex {};_dcbe :=len (_dabgf );for _degece :=0;_degece < _dcbe -1;_degece +=2{_dadgb :=[]rangeIndex {};_efee :=_dacf (_dabgf [_degece ]);_gceb :=_cacde (_dabgf [_degece +1]);if _degece ==0{for _eggb ,_daag :=range _efee {for _cgfcg ,_bcdaaf :=range _daag {if _acedgd (_bcdaaf ,_gceb ){_dadgb =append (_dadgb ,rangeIndex {_eggb ,_cgfcg });};};};}else {for _ ,_bccdg :=range _cddfg {_ffcgd :=_efee [_bccdg ._fedb ][_bccdg ._ggafd ];if _acedgd (_ffcgd ,_gceb ){_dadgb =append (_dadgb ,_bccdg );};};};if len (_dadgb )==0{return []rangeIndex {};};_cddfg =_dadgb [:];};return _cddfg ;};

// Update returns the same object as updating sheet references does not affect Number.
func (_efgbb Number )Update (q *_ef .UpdateQuery )Expression {return _efgbb };

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_bgegf :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_bgegf =int (args [1].ValueNumber );if _bgegf < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _bgegf ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cffda :=args [0].Value ();if _bgegf > len (_cffda ){return MakeStringResult (_cffda );};return MakeStringResult (_cffda [0:_bgegf ]);};

// Bool is a boolean expression.
type Bool struct{_cf bool };const (_ byte =iota ;_fafdf ;_dgbg ;_debfe ;_acaaa ;_ccedf ;);const _eag ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _cca (_dfca string )bool {for _ ,_eca :=range _fcg {_egf :=_eca .FindStringSubmatch (_dfca );if len (_egf )> 1{return true ;};};return false ;};func _gfde (_caeg ,_fbf ,_eead float64 )float64 {return (_caeg *3600+_fbf *60+_eead )/86400};type parsedReplaceObject struct{_ffge string ;_adagg int ;_ccgg int ;_bcecb string ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bdgc :=_ea .Split (v ,"\u003a");if len (_bdgc )!=2{return nil ;};_ddec ,_ :=_dd .Atoi (_bdgc [0]);_ebcaf ,_ :=_dd .Atoi (_bdgc [1]);if _ddec > _ebcaf {_ddec ,_ebcaf =_ebcaf ,_ddec ;};return HorizontalRange {_cbgge :_ddec ,_faff :_ebcaf };};const _bdgfb =57365;var _cacg int64 =_def (1900,_ee .January ,1);func _agde (_caee ,_ebaa _ee .Time )bool {_fagg :=_caee .Unix ();_cab :=_ebaa .Unix ();_dee :=_caee .Year ();_dbee :=_def (_dee ,_ee .March ,1);if _eabc (_dee )&&_fagg < _dbee &&_cab >=_dbee {return true ;};var _bdbgc =_ebaa .Year ();var _gebd =_def (_bdbgc ,_ee .March ,1);return (_eabc (_bdbgc )&&_cab >=_gebd &&_fagg < _gebd );};func _afaf (_febe []Result )Result {_bcfe :=_febe [0].ValueList ;_cgeg :=len (_bcfe );switch len (_febe ){case 1:_fbbcd :=[]Result {};for _ ,_ggbe :=range _bcfe {_fbbcd =append (_fbbcd ,MakeBoolResult (_ggbe .ValueNumber !=0));};return MakeListResult (_fbbcd );case 2:_cedb :=_febe [1];switch _cedb .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_bddd :=[]Result {};for _ ,_dbga :=range _bcfe {var _fbfcf Result ;if _dbga .ValueNumber ==0{_fbfcf =MakeBoolResult (false );}else {_fbfcf =_cedb ;};_bddd =append (_bddd ,_fbfcf );};return MakeListResult (_bddd );case ResultTypeList :_affd :=_cdbdb (_cedb ,_cgeg );_eebb :=[]Result {};for _bcgc ,_ecac :=range _bcfe {var _bfbd Result ;if _ecac .ValueNumber ==0{_bfbd =MakeBoolResult (false );}else {_bfbd =_affd [_bcgc ];};_eebb =append (_eebb ,_bfbd );};return MakeListResult (_eebb );case ResultTypeArray :_ddgee :=_ceeeb (_cedb ,len (_cedb .ValueArray ),_cgeg );_cfbf :=[][]Result {};for _ ,_cggf :=range _ddgee {_cbgbf :=[]Result {};for _afdbb ,_debfb :=range _bcfe {var _cacad Result ;if _debfb .ValueNumber ==0{_cacad =MakeBoolResult (false );}else {_cacad =_cggf [_afdbb ];};_cbgbf =append (_cbgbf ,_cacad );};_cfbf =append (_cfbf ,_cbgbf );};return MakeArrayResult (_cfbf );};case 3:_fdaaa :=_febe [1];_fbaf :=_febe [2];_dedeg :=_fdfd (_fdaaa );_cdeeg :=_fdfd (_fbaf );if _dedeg &&_cdeeg {_cbec :=[]Result {};for _ ,_geff :=range _bcfe {var _cdga Result ;if _geff .ValueNumber ==0{_cdga =_fbaf ;}else {_cdga =_fdaaa ;};_cbec =append (_cbec ,_cdga );};return MakeListResult (_cbec );};if _fdaaa .Type !=ResultTypeArray &&_fbaf .Type !=ResultTypeArray {_gbed :=_cdbdb (_fdaaa ,_cgeg );_ddgdbc :=_cdbdb (_fbaf ,_cgeg );_fdbe :=[]Result {};for _cfbe ,_dcag :=range _bcfe {var _dfgbf Result ;if _dcag .ValueNumber ==0{_dfgbf =_ddgdbc [_cfbe ];}else {_dfgbf =_gbed [_cfbe ];};_fdbe =append (_fdbe ,_dfgbf );};return MakeListResult (_fdbe );};_cabdb ,_bfca :=len (_fdaaa .ValueArray ),len (_fbaf .ValueArray );_dbgbf ,_abcg :=_cabdb ,_bfca ;if _bfca > _dbgbf {_dbgbf ,_abcg =_abcg ,_dbgbf ;};_ffde :=_ceeeb (_fdaaa ,_dbgbf ,_cgeg );_gabc :=_ceeeb (_fbaf ,_dbgbf ,_cgeg );_fcfg :=[][]Result {};for _bdcab :=0;_bdcab < _dbgbf ;_bdcab ++{_ecddb :=[]Result {};for _agff ,_eced :=range _bcfe {var _cacd Result ;if _eced .ValueNumber ==0{if _bdcab < _bfca {_cacd =_gabc [_bdcab ][_agff ];}else {_cacd =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _bdcab < _cabdb {_cacd =_ffde [_bdcab ][_agff ];}else {_cacd =MakeErrorResultType (ErrorTypeNA ,"");};};_ecddb =append (_ecddb ,_cacd );};_fcfg =append (_fcfg ,_ecddb );};return MakeArrayResult (_fcfg );};return MakeErrorResult ("");};func _adebg (_cdac yyLexer )int {return _aege ().Parse (_cdac )};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _edeb (args ,false )};const _eceg =57369;func init (){_abd ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};var _dgdfa =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};type Expression interface{Eval (_eae Context ,_bfgd Evaluator )Result ;Reference (_dagd Context ,_ffdg Evaluator )Reference ;String ()string ;Update (_bdb *_ef .UpdateQuery )Expression ;};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbf :=true ;for _ ,_ggeabb :=range args {_ggeabb =_ggeabb .AsNumber ();switch _ggeabb .Type {case ResultTypeList ,ResultTypeArray :_dacg :=And (_ggeabb .ListValues ());if _dacg .Type ==ResultTypeError {return _dacg ;};if _dacg .ValueNumber ==0{_bgbf =false ;};case ResultTypeNumber :if _ggeabb .ValueNumber ==0{_bgbf =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _ggeabb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_bgbf );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gacd ,_gbee ,_ddge :=_fcfd (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _ddge .Type ==ResultTypeError {return _ddge ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cadb :=_gbee -_gacd ;if _cadb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_fgee :=args [2].ValueNumber ;if _fgee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_fgee *_cadb /360));};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edfc :=args [0].ValueNumber ;if _edfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_effee :=args [1].ValueNumber ;if _effee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgba :=args [2].ValueNumber ;if _bgba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_cd .Pow (_bgba /_effee ,1/_edfc )-1);};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_egad :=len (args );if _egad ==0||_egad > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_aaa :=_dacf (args [0]);_dddc :=[]float64 {};for _ ,_bdbf :=range _aaa {for _ ,_fbgcf :=range _bdbf {if _fbgcf .Type ==ResultTypeNumber &&!_fbgcf .IsBoolean {_dddc =append (_dddc ,_fbgcf .ValueNumber );};};};_ceeee :=len (_dddc );if len (_dddc )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_gbbc :=0.1;if _egad ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gbbc =args [1].ValueNumber ;if _gbbc <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_bfgg :=[]float64 {};for _edcf :=0;_edcf < _ceeee ;_edcf ++{if _edcf ==0{_bfgg =append (_bfgg ,0);}else {_bfgg =append (_bfgg ,_bfgg [_edcf -1]+365);};};return _fcec (_dddc ,_bfgg ,_gbbc );};func (_ffgeb *yyParserImpl )Parse (yylex yyLexer )int {_dcfa :=_ee .Now ();var _afgcaf int ;var _abfb yySymType ;var _gcgd []yySymType ;_ =_gcgd ;_acgac :=_ffgeb ._agaf [:];Nerrs :=0;Errflag :=0;_fdfg :=0;_ffgeb ._acegd =-1;_bacgg :=-1;defer func (){_fdfg =-1;_ffgeb ._acegd =-1;_bacgg =-1}();_dccf :=-1;goto _agccg ;_ffec :return 0;_eagff :return 1;_agccg :if _afaeg (_dcfa ){_db .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _eagff ;};if _dbged >=4{_cb .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_gecg (_bacgg ),_bbff (_fdfg ));};_dccf ++;if _dccf >=len (_acgac ){_gdfd :=make ([]yySymType ,len (_acgac )*2);copy (_gdfd ,_acgac );_acgac =_gdfd ;};_acgac [_dccf ]=_abfb ;_acgac [_dccf ]._ggbb =_fdfg ;_bagca :if _afaeg (_dcfa ){_db .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _eagff ;};_afgcaf =_bfcgd [_fdfg ];if _afgcaf <=_ddfde {goto _efegb ;};if _ffgeb ._acegd < 0{_ffgeb ._acegd ,_bacgg =_ceba (yylex ,&_ffgeb ._dbffd );};_afgcaf +=_bacgg ;if _afgcaf < 0||_afgcaf >=_bdbb {goto _efegb ;};_afgcaf =_ebbgg [_afgcaf ];if _fagea [_afgcaf ]==_bacgg {_ffgeb ._acegd =-1;_bacgg =-1;_abfb =_ffgeb ._dbffd ;_fdfg =_afgcaf ;if Errflag > 0{Errflag --;};goto _agccg ;};_efegb :if _afaeg (_dcfa ){_db .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _eagff ;};_afgcaf =_dgdfa [_fdfg ];if _afgcaf ==-2{if _ffgeb ._acegd < 0{_ffgeb ._acegd ,_bacgg =_ceba (yylex ,&_ffgeb ._dbffd );};_eeded :=0;for {if _eceb [_eeded +0]==-1&&_eceb [_eeded +1]==_fdfg {break ;};_eeded +=2;};for _eeded +=2;;_eeded +=2{_afgcaf =_eceb [_eeded +0];if _afgcaf < 0||_afgcaf ==_bacgg {break ;};};_afgcaf =_eceb [_eeded +1];if _afgcaf < 0{goto _ffec ;};};if _afgcaf ==0{switch Errflag {case 0:yylex .Error (_eaafc (_fdfg ,_bacgg ));Nerrs ++;if _dbged >=1{_cb .Printf ("\u0025\u0073",_bbff (_fdfg ));_cb .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_gecg (_bacgg ));};fallthrough;case 1,2:Errflag =3;for _dccf >=0{_afgcaf =_bfcgd [_acgac [_dccf ]._ggbb ]+_gdgc ;if _afgcaf >=0&&_afgcaf < _bdbb {_fdfg =_ebbgg [_afgcaf ];if _fagea [_fdfg ]==_gdgc {goto _agccg ;};};if _dbged >=2{_cb .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_acgac [_dccf ]._ggbb );};_dccf --;};goto _eagff ;case 3:if _dbged >=2{_cb .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_gecg (_bacgg ));};if _bacgg ==_eaafg {goto _eagff ;};_ffgeb ._acegd =-1;_bacgg =-1;goto _bagca ;};};if _dbged >=2{_cb .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_afgcaf ,_bbff (_fdfg ));};_affb :=_afgcaf ;_fgdc :=_dccf ;_ =_fgdc ;_dccf -=_ddfe [_afgcaf ];if _dccf +1>=len (_acgac ){_fgff :=make ([]yySymType ,len (_acgac )*2);copy (_fgff ,_acgac );_acgac =_fgff ;};_abfb =_acgac [_dccf +1];_afgcaf =_dgfa [_afgcaf ];_egea :=_cdbaa [_afgcaf ];_cabce :=_egea +_acgac [_dccf ]._ggbb +1;if _cabce >=_bdbb {_fdfg =_ebbgg [_egea ];}else {_fdfg =_ebbgg [_cabce ];if _fagea [_fdfg ]!=-_afgcaf {_fdfg =_ebbgg [_egea ];};};switch _affb {case 1:_gcgd =_acgac [_fgdc -1:_fgdc +1];{yylex .(*plex )._addfd =_abfb ._fadga ;};case 3:_gcgd =_acgac [_fgdc -2:_fgdc +1];{_abfb ._fadga =_gcgd [2]._fadga ;};case 4:_gcgd =_acgac [_fgdc -4:_fgdc +1];{};case 5:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewBool (_gcgd [1]._dfee ._acfe );};case 6:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewNumber (_gcgd [1]._dfee ._acfe );};case 7:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewString (_gcgd [1]._dfee ._acfe );};case 8:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewError (_gcgd [1]._dfee ._acfe );};case 9:_gcgd =_acgac [_fgdc -2:_fgdc +1];{_abfb ._fadga =_gcgd [2]._fadga ;};case 10:_gcgd =_acgac [_fgdc -2:_fgdc +1];{_abfb ._fadga =NewNegate (_gcgd [2]._fadga );};case 15:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =_gcgd [2]._fadga ;};case 17:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewConstArrayExpr (_gcgd [2]._afadd );};case 18:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._afadd =append (_abfb ._afadd ,_gcgd [1]._cageb );};case 19:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._afadd =append (_gcgd [1]._afadd ,_gcgd [3]._cageb );};case 20:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._cageb =append (_abfb ._cageb ,_gcgd [1]._fadga );};case 21:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._cageb =append (_gcgd [1]._cageb ,_gcgd [3]._fadga );};case 23:_gcgd =_acgac [_fgdc -2:_fgdc +1];{_abfb ._fadga =NewPrefixExpr (_gcgd [1]._fadga ,_gcgd [2]._fadga );};case 25:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewSheetPrefixExpr (_gcgd [1]._dfee ._acfe );};case 26:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewCellRef (_gcgd [1]._dfee ._acfe );};case 27:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewRange (_gcgd [1]._fadga ,_gcgd [3]._fadga );};case 28:_gcgd =_acgac [_fgdc -4:_fgdc +1];{_abfb ._fadga =NewPrefixRangeExpr (_gcgd [1]._fadga ,_gcgd [2]._fadga ,_gcgd [4]._fadga );};case 29:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewNamedRangeRef (_gcgd [1]._dfee ._acfe );};case 30:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewHorizontalRange (_gcgd [1]._dfee ._acfe );};case 31:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._fadga =NewVerticalRange (_gcgd [1]._dfee ._acfe );};case 32:_gcgd =_acgac [_fgdc -2:_fgdc +1];{_abfb ._fadga =NewPrefixHorizontalRange (_gcgd [1]._fadga ,_gcgd [2]._dfee ._acfe );};case 33:_gcgd =_acgac [_fgdc -2:_fgdc +1];{_abfb ._fadga =NewPrefixVerticalRange (_gcgd [1]._fadga ,_gcgd [2]._dfee ._acfe );};case 34:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypePlus ,_gcgd [3]._fadga );};case 35:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeMinus ,_gcgd [3]._fadga );};case 36:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeMult ,_gcgd [3]._fadga );};case 37:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeDiv ,_gcgd [3]._fadga );};case 38:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeExp ,_gcgd [3]._fadga );};case 39:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeLT ,_gcgd [3]._fadga );};case 40:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeGT ,_gcgd [3]._fadga );};case 41:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeLEQ ,_gcgd [3]._fadga );};case 42:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeGEQ ,_gcgd [3]._fadga );};case 43:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeEQ ,_gcgd [3]._fadga );};case 44:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeNE ,_gcgd [3]._fadga );};case 45:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewBinaryExpr (_gcgd [1]._fadga ,BinOpTypeConcat ,_gcgd [3]._fadga );};case 47:_gcgd =_acgac [_fgdc -2:_fgdc +1];{_abfb ._fadga =NewFunction (_gcgd [1]._dfee ._acfe ,nil );};case 48:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._fadga =NewFunction (_gcgd [1]._dfee ._acfe ,_gcgd [2]._cageb );};case 49:_gcgd =_acgac [_fgdc -1:_fgdc +1];{_abfb ._cageb =append (_abfb ._cageb ,_gcgd [1]._fadga );};case 50:_gcgd =_acgac [_fgdc -3:_fgdc +1];{_abfb ._cageb =append (_gcgd [1]._cageb ,_gcgd [3]._fadga );};case 53:_gcgd =_acgac [_fgdc -0:_fgdc +1];{_abfb ._fadga =NewEmptyExpr ();};};goto _agccg ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_cdgd :=_ca .Buffer {};for _ ,_eeba :=range args {switch _eeba .Type {case ResultTypeString :_cdgd .WriteString (_eeba .ValueString );case ResultTypeNumber :var _ecde string ;if _eeba .IsBoolean {if _eeba .ValueNumber ==0{_ecde ="\u0046\u0041\u004cS\u0045";}else {_ecde ="\u0054\u0052\u0055\u0045";};}else {_ecde =_eeba .AsString ().ValueString ;};_cdgd .WriteString (_ecde );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_cdgd .String ());};

// GetFormat returns an empty string for the invalid reference context.
func (_affeb *ivr )GetFormat (cellRef string )string {return ""};const _cbdf =57376;

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _dcaed (args ,true )};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cbd :=args [0].AsNumber ();_ebca :=args [1].AsNumber ();if _cbd .Type !=ResultTypeNumber ||_ebca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _ebca .ValueNumber < _cbd .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_ffgbc :=int64 (_cbd .ValueNumber );_ecfbd :=int64 (_ebca .ValueNumber );return MakeNumberResult (float64 (_ffefa .Int63n (_ecfbd -_ffgbc +1)+_ffgbc ));};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_ffdb ,_bdfad :=_ccde (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _bdfad .Type ==ResultTypeError {return _bdfad ;};_ead :=_ffdb ._ccdc ;_fgd :=_ffdb ._bde ;_cabd :=_ffdb ._gedc ;_cgfbc :=_ffdb ._abag ;_ada :=_ffdb ._ffdbd ;_agfa :=_ffdb ._ege ;_cdbc :=_ffdb ._befe ;_caca ,_eace :=_bgae (_fgd ,_cabd ,_cdbc );if _eace .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_edcd :=_caca *_agfa *_ead ;if _ada ==0{return MakeNumberResult (_edcd );};_abgb :=_ead *_agfa ;_faad :=_ead -_cgfbc ;_fffa :=int ((_faad -_edcd )/_abgb );if _ada <=_fffa {return MakeNumberResult (_abgb );}else if _ada ==_fffa +1{return MakeNumberResult (_faad -_abgb *float64 (_fffa )-_edcd );}else {return MakeNumberResult (0);};};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ba :lhs ,_af :rhs ,_ad :op };};func (_ffaac ReferenceType )String ()string {if _ffaac >=ReferenceType (len (_cfbac )-1){return _cb .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_ffaac );};return _fggb [_cfbac [_ffaac ]:_cfbac [_ffaac +1]];};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// Reference returns a string reference value to an expression with prefix.
func (_gfbba PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_fdaad :=_gfbba ._fefed .Reference (ctx ,ev );_bbda :=_gfbba ._dcec .Reference (ctx ,ev );if _fdaad .Type ==ReferenceTypeSheet &&_bbda .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_fdaad .Value +"\u0021"+_bbda .Value };};return ReferenceInvalid ;};func _cgdea (_ceffe ,_bfeg float64 )float64 {_ceffe =_cd .Trunc (_ceffe );_bfeg =_cd .Trunc (_bfeg );if _ceffe ==0&&_bfeg ==0{return 0;};return _ceffe *_bfeg /_bcad (_ceffe ,_bfeg );};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_bcde ,_accc ,_bcfbg :=_dgaf (args );if _bcfbg .Type ==ResultTypeError {return _bcfbg ;};return MakeNumberResult (_gfbce (_bcde )/_accc );};func (_agcbe *Lexer )nextRaw ()*node {for len (_agcbe ._cbce )!=0{_dcbf :=<-_agcbe ._cbce [len (_agcbe ._cbce )-1];if _dcbf !=nil {return _dcbf ;};_agcbe ._cbce =_agcbe ._cbce [0:len (_agcbe ._cbce )-1];};return <-_agcbe ._aabcee ;};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fagb :=_ee .Now ();_ ,_bad :=_fagb .Zone ();_feabd :=_ggee (_cacg ,_fagb .Unix ()+int64 (_bad ))+1;return MakeNumberResult (_feabd );};var _eb =map[string ]*_gd .Regexp {};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_dffe :=len (args );if _dffe !=3&&_dffe !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdfdd ,_eafed :=_ccdeb (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _eafed .Type ==ResultTypeError {return _eafed ;};_eedb ,_eafed :=_ccdeb (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _eafed .Type ==ResultTypeError {return _eafed ;};_dbecf ,_eafed :=_ccdeb (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _eafed .Type ==ResultTypeError {return _eafed ;};_dgagc :=0;if _dffe ==3{return MakeStringResult (_ea .Replace (_cdfdd ,_eedb ,_dbecf ,-1));}else {_bbgfe ,_ccega :=_gdgf (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _ccega .Type ==ResultTypeError {return _ccega ;};_dgagc =int (_bbgfe );if _dgagc < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_gfbcg :=_cdfdd ;_ggeg :=_dgagc ;_eefeb :=-1;_caega :=len (_eedb );_eacde :=0;for {_ggeg --;_ebabc :=_ea .Index (_gfbcg ,_eedb );if _ebabc ==-1{_eefeb =-1;break ;}else {_eefeb =_ebabc +_eacde ;if _ggeg ==0{break ;};_bffd :=_caega +_ebabc ;_eacde +=_bffd ;_gfbcg =_gfbcg [_bffd :];};};if _eefeb ==-1{return MakeStringResult (_cdfdd );}else {_cddfa :=_cdfdd [:_eefeb ];_aefcb :=_cdfdd [_eefeb +_caega :];return MakeStringResult (_cddfa +_dbecf +_aefcb );};};};var _gdbfb =[...]int {1};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbad :=args [0].AsNumber ();_bagc :=args [1].AsNumber ();if _gbad .Type !=ResultTypeNumber ||_bagc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bagc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_cd .Trunc (_gbad .ValueNumber /_bagc .ValueNumber ));};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_efaeg :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_efaeg *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_cdfd :=_dacf (args [1]);for _ ,_abagf :=range _cdfd {for _ ,_bgc :=range _abagf {if _bgc .Type !=ResultTypeNumber ||_bgc .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_efaeg *=1.0+_bgc .ValueNumber ;};};return MakeNumberResult (_efaeg );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// FunctionCall is a function call expression.
type FunctionCall struct{_aebg string ;_ebeeae []Expression ;};func _fcfde (_gaeec Result ,_egcfe *criteriaParsed )bool {_bddea :=_ea .ToLower (_gaeec .ValueString );_bgdd :=_egcfe ._gfac ._bfbg ;_debfc :=_egcfe ._gfac ._cgfbcc ;if _bgdd ==_fafdf {return _bddea ==_debfc ||_geb .Match (_debfc ,_bddea );};if _gaeec .Type !=ResultTypeEmpty {if _bddea ==_egcfe ._ddfcf ||_geb .Match (_egcfe ._ddfcf ,_bddea ){return true ;};if _ ,_ffff :=_dd .ParseFloat (_debfc ,64);_ffff ==nil {return false ;};switch _bgdd {case _dgbg :return _bddea <=_debfc ;case _debfe :return _bddea >=_debfc ;case _acaaa :return _bddea < _debfc ;case _ccedf :return _bddea > _debfc ;};};return false ;};

// Reference returns a string reference value to a range.
func (_fdfb Range )Reference (ctx Context ,ev Evaluator )Reference {_ddaeb :=_fdfb ._bgaad .Reference (ctx ,ev );_gdecc :=_fdfb ._eeebc .Reference (ctx ,ev );if _ddaeb .Type ==ReferenceTypeCell &&_gdecc .Type ==ReferenceTypeCell {return MakeRangeReference (_fbfa (_ddaeb ,_gdecc ));};return ReferenceInvalid ;};type countMode byte ;func (_bede tokenType )String ()string {return _gecg (int (_bede ))};const _ccgbd =57348;

// LastRow returns 0 for the invalid reference context.
func (_acdfd *ivr )LastRow (colFrom string )int {return 0};const _dgeg =57373;

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_cfgac :=[]string {};for _fedc :=range _deffb {_cfgac =append (_cfgac ,_fedc );};for _cdece :=range _gecbg {_cfgac =append (_cfgac ,_cdece );};_e .Strings (_cfgac );return _cfgac ;};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaca :=args [0].AsNumber ();_aabed :=args [1].AsNumber ();if _gaca .Type !=ResultTypeNumber ||_aabed .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gfeaf :=_cd .Trunc (_gaca .ValueNumber );_eadbb :=_cd .Trunc (_aabed .ValueNumber );if _eadbb > _gfeaf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _eadbb ==_gfeaf ||_eadbb ==0{return MakeNumberResult (1);};_gecf :=float64 (1);for _fdcc :=float64 (1);_fdcc <=_eadbb ;_fdcc ++{_gecf *=(_gfeaf +1-_fdcc )/_fdcc ;};return MakeNumberResult (_gecf );};type cumulArgs struct{_cdee float64 ;_dgdf float64 ;_eeab float64 ;_bdgg float64 ;_ceaf float64 ;_fbgd int ;};

// Error is called in the case of parsing error and saves an error to a plex.
func (_adabf *plex )Error (s string ){_db .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_adabf ._bbabd =s ;};func _gcbc (_ebc []Result ,_dgfc string )(*couponArgs ,Result ){_bfaa :=len (_ebc );if _bfaa !=3&&_bfaa !=4{return nil ,MakeErrorResult (_dgfc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edca ,_ced ,_gagg :=_fcfd (_ebc [0],_ebc [1],_dgfc );if _gagg .Type ==ResultTypeError {return nil ,_gagg ;};if _ebc [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dgfc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebcb :=_ebc [2].ValueNumber ;if !_egcf (_ebcb ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_dgfc );};_bdd :=0;if _bfaa ==4&&_ebc [3].Type !=ResultTypeEmpty {if _ebc [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dgfc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdd =int (_ebc [3].ValueNumber );if !_dca (_bdd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dgfc );};};return &couponArgs {_edca ,_ced ,int (_ebcb ),_bdd },_fcc ;};type ri struct{_faba float64 ;_begg string ;};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_bgea ,_eadc ,_ddgbe :=_egca (from ,to );if _ddgbe !=nil {_db .Log .Debug (_ddgbe .Error ());return NewError (_ddgbe .Error ());};return PrefixRangeExpr {_aecbe :pfx ,_acdg :_bgea ,_adeff :_eadc };};type evCache struct{_fa map[string ]Result ;_gg *_ge .Mutex ;};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_agcc :=args [0].Ref ;if _agcc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_dega ,_ebfb :=_f .ParseCellReference (_agcc .Value );if _ebfb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_agcc .Value );};return MakeNumberResult (float64 (_dega .RowIdx ));};var _bgbcg =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bedb ,_dbgg ,_bbfc :=_fcfd (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _bbfc .Type ==ResultTypeError {return _bbfc ;};_fgaga ,_bbfc :=_bgg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _bbfc .Type ==ResultTypeError {return _bbfc ;};if _fgaga >=_bedb {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_deca :=args [3];if _deca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_abgg :=_deca .ValueNumber ;if _abgg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_aaaf :=args [4];if _aaaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ffcde :=_aaaf .ValueNumber ;if _ffcde < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_feaac :=args [5];if _feaac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_edec :=_feaac .ValueNumber ;if _edec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bgeg :=args [6];if _bgeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgdc :=float64 (int (_bgeg .ValueNumber ));if !_egcf (_dgdc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_edce :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_bdaa :=args [7];if _bdaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_edce =int (_bdaa .ValueNumber );if !_dca (_edce ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_cafe ,_bbfc :=_bgae (_fgaga ,_dbgg ,_edce );if _bbfc .Type ==ResultTypeError {return _bbfc ;};_cafe *=_dgdc ;_fge ,_bbfc :=_bgae (_bedb ,_dbgg ,_edce );if _bbfc .Type ==ResultTypeError {return _bbfc ;};_fge *=_dgdc ;_defbc ,_bbfc :=_bgae (_fgaga ,_bedb ,_edce );if _bbfc .Type ==ResultTypeError {return _bbfc ;};_defbc *=_dgdc ;_cdce :=_edec +_cafe *100*_abgg /_dgdc ;_cdce /=_fge *_ffcde /_dgdc +1;_cdce -=_defbc *100*_abgg /_dgdc ;return MakeNumberResult (_cdce );};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_ecg :v }};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_dabg :=1.0;for _ ,_bbba :=range args {_bbba =_bbba .AsNumber ();switch _bbba .Type {case ResultTypeNumber :_dabg *=_bbba .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dfeg :=Product (_bbba .ListValues ());if _dfeg .Type !=ResultTypeNumber {return _dfeg ;};_dabg *=_dfeg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bbba ;case ResultTypeEmpty :default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_bbba .Type ));};};return MakeNumberResult (_dabg );};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aecb :=false ;for _ ,_eece :=range args {switch _eece .Type {case ResultTypeList ,ResultTypeArray :_agce :=Or (_eece .ListValues ());if _agce .Type ==ResultTypeError {return _agce ;};if _agce .ValueNumber !=0{_aecb =true ;};case ResultTypeNumber :if _eece .ValueNumber !=0{_aecb =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _eece ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_aecb );};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gegf :=args [0].AsNumber ();if _gegf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efcd :=args [1].AsNumber ();if _efcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_cd .Pow (_gegf .ValueNumber ,_efcd .ValueNumber ));};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gbec :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_edbee :=args [1].ValueNumber !=0;_cgbab :=_egeef (args [2:],[]string {},_edbee );return MakeStringResult (_ea .Join (_cgbab ,_gbec ));};var _bbfe string =string ([]byte {92});func (_cdca VerticalRange )verticalRangeReference ()string {return _cb .Sprintf ("\u0025\u0073\u003a%\u0073",_cdca ._ccdcd ,_cdca ._ggfec );};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_ebfcb PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_eedec :=_ebfcb ._edfe .Reference (ctx ,ev );switch _eedec .Type {case ReferenceTypeSheet :if _eadf (_eedec ,ctx ){return MakeErrorResultType (ErrorTypeName ,_cb .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eedec .Value ));};_gegfc :=_ebfcb .horizontalRangeReference (_eedec .Value );if _ceec ,_efcf :=ev .GetFromCache (_gegfc );_efcf {return _ceec ;};_aagf :=ctx .Sheet (_eedec .Value );_ggaade ,_fegce :=_fadgd (_aagf ,_ebfcb ._ddaba ,_ebfcb ._aageg );_dafg :=_bgggd (_aagf ,ev ,_ggaade ,_fegce );ev .SetCache (_gegfc ,_dafg );return _dafg ;default:return MakeErrorResult (_cb .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eedec .Type ));};};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _daa ,_aef float64 ;switch args [0].Type {case ResultTypeNumber :_aef =args [0].ValueNumber ;case ResultTypeString :_eaf :=DateValue ([]Result {args [0]});if _eaf .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_aef =_eaf .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_daa =args [1].ValueNumber ;if _daa < 62&&_aef >=62{_daa --;};case ResultTypeString :_bfdb :=DateValue ([]Result {args [1]});if _bfdb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_daa =_bfdb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_dde :=float64 (int (_aef -_daa ));return MakeNumberResult (_dde );};func _aaab (_beegd ,_aegfg []float64 ,_acade float64 )float64 {_ggd :=_acade +1;_agfd :=0.0;_ebf :=len (_beegd );_eaeg :=_aegfg [0];for _ffea :=1;_ffea < _ebf ;_ffea ++{_dad :=(_aegfg [_ffea ]-_eaeg )/365;_agfd -=_dad *_beegd [_ffea ]/_cd .Pow (_ggd ,_dad +1);};return _agfd ;};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_bcea :=len (args );if _bcea !=4&&_bcea !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgee :=args [0].ValueNumber ;if _cgee < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gde :=args [1].ValueNumber ;if _gde < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_addg :=args [2].ValueNumber ;if _addg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgfd :=args [3].ValueNumber ;if _dgfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _dgfd -_addg > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_eggc :=12.0;if _bcea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eggc =args [4].ValueNumber ;if _eggc < 1||_eggc > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _eggc ==12&&_dgfd > _addg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _gde >=_cgee {return MakeNumberResult (0);};_dfcad :=1-_cd .Pow (_gde /_cgee ,1/_addg );_dfcad =float64 (int (_dfcad *1000+0.5))/1000;_ecda :=_cgee *_dfcad *_eggc /12;if _dgfd ==1{return MakeNumberResult (_ecda );};_dgcg :=_ecda ;_ggfc :=0.0;_agb :=_addg ;if _agb > _dgfd {_agb =_dgfd ;};for _eaae :=2.0;_eaae <=_agb ;_eaae ++{_ggfc =(_cgee -_dgcg )*_dfcad ;_dgcg +=_ggfc ;};if _dgfd > _addg {return MakeNumberResult ((_cgee -_dgcg )*_dfcad *(12-_eggc )/12);};return MakeNumberResult (_ggfc );};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfae ,_dacc ,_cefd :=_fcfd (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _cefd .Type ==ResultTypeError {return _cefd ;};_bafa ,_cefd :=_bgg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _cefd .Type ==ResultTypeError {return _cefd ;};if _bafa >=_dfae {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_fegc :=args [3].ValueNumber ;if _fegc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dcge :=args [4].ValueNumber ;if _dcge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_efge :=args [5].ValueNumber ;if _efge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcbc :=float64 (int (args [6].ValueNumber ));if !_egcf (_fcbc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dbgbd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dbgbd =int (args [7].ValueNumber );if !_dca (_dbgbd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_fefdc ,_cefd :=_bgae (_bafa ,_dacc ,_dbgbd );if _cefd .Type ==ResultTypeError {return _cefd ;};_fefdc *=_fcbc ;_bbbb ,_cefd :=_bgae (_dfae ,_dacc ,_dbgbd );if _cefd .Type ==ResultTypeError {return _cefd ;};_bbbb *=_fcbc ;_gdec ,_cefd :=_bgae (_bafa ,_dfae ,_dbgbd );if _cefd .Type ==ResultTypeError {return _cefd ;};_gdec *=_fcbc ;_eaed :=_efge +_fefdc *100*_fegc /_fcbc ;_eaed /=_dcge +_gdec *100*_fegc /_fcbc ;_eaed --;_eaed *=_fcbc /_bbbb ;return MakeNumberResult (_eaed );};func (_fbad *noCache )SetCache (key string ,value Result ){};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bcebd :=args [0].AsNumber ();if _bcebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _cgafc float64 ;_gggf :=args [1].AsNumber ();if _gggf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgafc =_gggf .ValueNumber ;if _cgafc < 0&&_bcebd .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_ccgb :=_bcebd .ValueNumber ;_ccgb ,_cdcbga :=_cd .Modf (_ccgb /_cgafc );if _cdcbga !=0{if _bcebd .ValueNumber < 0&&_cdcbga < 0{_ccgb --;};};return MakeNumberResult (_ccgb *_cgafc );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};type yySymType struct{_ggbb int ;_dfee *node ;_fadga Expression ;_cageb []Expression ;_afadd [][]Expression ;};

// String returns a string representation of FunctionCall expression.
func (_egadb FunctionCall )String ()string {_gdbb :=_ca .Buffer {};_gdbb .WriteString (_egadb ._aebg );_gdbb .WriteString ("\u0028");_dgca :=len (_egadb ._ebeeae )-1;for _bgge ,_dbcac :=range _egadb ._ebeeae {_gdbb .WriteString (_dbcac .String ());if _bgge !=_dgca {_gdbb .WriteString ("\u002c");};};_gdbb .WriteString ("\u0029");return _gdbb .String ();};func _ccad (_ccda float64 ,_dacfg *criteriaRegex )bool {_eda ,_dbebc :=_dd .ParseFloat (_dacfg ._cgfbcc ,64);if _dbebc !=nil {return false ;};switch _dacfg ._bfbg {case _fafdf :return _ccda ==_eda ;case _dgbg :return _ccda <=_eda ;case _debfe :return _ccda >=_eda ;case _acaaa :return _ccda < _eda ;case _ccedf :return _ccda > _eda ;};return false ;};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_fgdb :=len (args );if _fgdb !=6&&_fgdb !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bafac ,_fcdd ,_dfef :=_fcfd (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _dfef .Type ==ResultTypeError {return _dfef ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbfb :=args [2].ValueNumber ;if _bbfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_caec :=args [3].ValueNumber ;if _caec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebfd :=args [4].ValueNumber ;if _ebfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eegg :=args [5];if _eegg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_aaeb :=_eegg .ValueNumber ;if !_egcf (_aaeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ggdg :=0;if _fgdb ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggdg =int (args [6].ValueNumber );if !_dca (_ggdg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_bdfbf ,_dfef :=_cgfc (_bafac ,_fcdd ,_bbfb ,_caec ,_ebfd ,_aaeb ,_ggdg );if _dfef .Type ==ResultTypeError {return _dfef ;};return MakeNumberResult (_bdfbf );};func _ceeeb (_cbegc Result ,_addgb ,_ebfc int )[][]Result {_fdge :=[][]Result {};switch _cbegc .Type {case ResultTypeArray :for _dagggg ,_bgec :=range _cbegc .ValueArray {if _dagggg < _addgb {_fdge =append (_fdge ,_cdbdb (MakeListResult (_bgec ),_ebfc ));}else {_fdge =append (_fdge ,_cdbdb (MakeErrorResultType (ErrorTypeNA ,""),_ebfc ));};};case ResultTypeList :_cbab :=_cdbdb (_cbegc ,_ebfc );for _ggdc :=0;_ggdc < _addgb ;_ggdc ++{_fdge =append (_fdge ,_cbab );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _cdggb :=0;_cdggb < _addgb ;_cdggb ++{_ffbg :=_cdbdb (_cbegc ,_ebfc );_fdge =append (_fdge ,_ffbg );};};return _fdge ;};

// GetFilename returns an empty string for the invalid reference context.
func (_efdfg *ivr )GetFilename ()string {return ""};

// GetWidth returns 0 for the invalid reference context.
func (_adbg *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// String returns a string representation for Bool.
func (_gfe Bool )String ()string {if _gfe ._cf {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_cbgge ,_faff int };type ivr struct{};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_cfcf :=_cafb (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _cfcf .Type !=ResultTypeEmpty {return _cfcf ;};_fdaaad :=_egec (args [1:]);_eefbf :=_cd .MaxFloat64 ;_cagd :=_dacf (args [0]);for _ ,_cceg :=range _fdaaad {_cbad :=_cagd [_cceg ._fedb ][_cceg ._ggafd ].ValueNumber ;if _eefbf > _cbad {_eefbf =_cbad ;};};if _eefbf ==_cd .MaxFloat64 {_eefbf =0;};return MakeNumberResult (float64 (_eefbf ));};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_feggd :=args [0];switch _feggd .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_dcfc :=0.0;_eggf :=0.0;for _ ,_ecefe :=range _feggd .ValueString {_adeca :=0.0;switch _ecefe {case 'I':_adeca =1;case 'V':_adeca =5;case 'X':_adeca =10;case 'L':_adeca =50;case 'C':_adeca =100;case 'D':_adeca =500;case 'M':_adeca =1000;};_dcfc +=_adeca ;switch {case _eggf ==_adeca &&(_eggf ==5||_eggf ==50||_eggf ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_eggf ==_adeca :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _eggf < _adeca {_dcfc -=2*_eggf ;};_eggf =_adeca ;};return MakeNumberResult (_dcfc );case ResultTypeError :return _feggd ;default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_feggd .Type ));};};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_cdabe :=args [0].AsString ();if _cdabe .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gaab :=args [1].AsNumber ();if _gaab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _gaab .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _gaab .ValueNumber ==0{return MakeStringResult ("");};_degc :=_ca .Buffer {};for _gfaef :=0;_gfaef < int (_gaab .ValueNumber );_gfaef ++{_degc .WriteString (_cdabe .ValueString );};return MakeStringResult (_degc .String ());};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);const _ecaa =57346;

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_ceeg ,_acad :=_ccde (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _acad .Type ==ResultTypeError {return _acad ;};_beed :=_ceeg ._ccdc ;_adgg :=_ceeg ._bde ;_cbge :=_ceeg ._gedc ;_dbce :=_ceeg ._abag ;_aceee :=_ceeg ._ffdbd ;_cecf :=_ceeg ._ege ;if _cecf >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_ffad :=_ceeg ._befe ;_fgg :=1.0/_cecf ;_bccc :=2.5;if _fgg < 3{_bccc =1;}else if _fgg < 5{_bccc =1.5;}else if _fgg <=6{_bccc =2;};_cecf *=_bccc ;_gaba ,_gfab :=_bgae (_adgg ,_cbge ,_ffad );if _gfab .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_afbc :=_geba (_gaba *_cecf *_beed );_beed -=_afbc ;_faa :=_beed -_dbce ;for _decge :=0;_decge < _aceee ;_decge ++{_afbc =_geba (_cecf *_beed );_faa -=_afbc ;if _faa < 0{switch _aceee -_decge {case 0:case 1:return MakeNumberResult (_geba (_beed *0.5));default:return MakeNumberResult (0);};};_beed -=_afbc ;};return MakeNumberResult (_afbc );};const _fgc ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func (_feg *defEval )checkLastEvalIsRef (_bbf Context ,_dc Expression ){switch _dc .(type ){case FunctionCall :switch _dc .(FunctionCall )._aebg {case "\u0049\u0053\u0052E\u0046":for _ ,_ecf :=range _dc .(FunctionCall )._ebeeae {switch _ecf .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_cacb :=_ecf .Eval (_bbf ,_feg );_feg ._aeb =!(_cacb .Type ==ResultTypeError &&_cacb .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_feg ._aeb =false ;};};};};};

// GetEpoch returns a null time object for the invalid reference context.
func (_cbgbc *ivr )GetEpoch ()_ee .Time {return _ee .Time {}};func _feca (_fdecb []Result ,_cdfb bool )(float64 ,float64 ){_bdegb :=0.0;_debdb :=0.0;for _ ,_gdfgf :=range _fdecb {switch _gdfgf .Type {case ResultTypeNumber :if _cdfb ||!_gdfgf .IsBoolean {_debdb +=_gdfgf .ValueNumber ;_bdegb ++;};case ResultTypeList ,ResultTypeArray :_bcba ,_afdad :=_feca (_gdfgf .ListValues (),_cdfb );_debdb +=_bcba ;_bdegb +=_afdad ;case ResultTypeString :if _cdfb {_bdegb ++;};case ResultTypeEmpty :};};return _debdb ,_bdegb ;};

// String returns a string representation of Number.
func (_daf Number )String ()string {return _dd .FormatFloat (_daf ._fcfe ,'f',-1,64)};

// LastColumn returns empty string for the invalid reference context.
func (_fbdd *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};func _agbgb (_addfe Result )Result {if _addfe .Type ==ResultTypeEmpty {return _addfe ;};_afgg :=_addfe .AsString ();if _afgg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _addfe .IsBoolean {if _afgg .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _afgg .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_ea .ToLower (_afgg .ValueString ));};};func _gfbce (_dfaaf float64 )float64 {_gfeae :=float64 (1);for _aeaa :=float64 (2);_aeaa <=_dfaaf ;_aeaa ++{_gfeae *=_aeaa ;};return _gfeae ;};const _cdcg ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";var _ebbgg =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};func _dec (_acc string ,_ed *_ef .UpdateQuery )string {_cg ,_aea :=_f .ParseCellReference (_acc );if _aea !=nil {return "\u0023\u0052\u0045F\u0021";};if _ed .UpdateType ==_ef .UpdateActionRemoveColumn {_df :=_ed .ColumnIdx ;_egc :=_cg .ColumnIdx ;if _egc < _df {return _acc ;}else if _egc ==_df {return "\u0023\u0052\u0045F\u0021";}else {return _cg .Update (_ef .UpdateActionRemoveColumn ).String ();};};return _acc ;};func _afaeg (_cgbc _ee .Time )bool {return _ee .Now ().Sub (_cgbc )>=_ggdcg };func _eggad (_cfee []Result )(bool ,Result ){for _ ,_fgad :=range _cfee {if _fgad .Type ==ResultTypeError {return true ,_fgad ;};};return false ,MakeEmptyResult ();};

// Eval evaluates and returns the result of a function call.
func (_aacg FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_ffggb :=LookupFunction (_aacg ._aebg );if _ffggb !=nil {_fbab :=make ([]Result ,len (_aacg ._ebeeae ));for _fgfb ,_abbe :=range _aacg ._ebeeae {_fbab [_fgfb ]=_abbe .Eval (ctx ,ev );_fbab [_fgfb ].Ref =_abbe .Reference (ctx ,ev );};if _ ,_bgggf :=_aceed [_aacg ._aebg ];!_bgggf {if _geabe ,_eabb :=_eggad (_fbab );_geabe {return _eabb ;};};return _ffggb (_fbab );};_fceed :=LookupFunctionComplex (_aacg ._aebg );if _fceed !=nil {_bfeb :=make ([]Result ,len (_aacg ._ebeeae ));for _cfaa ,_edcgb :=range _aacg ._ebeeae {_bfeb [_cfaa ]=_edcgb .Eval (ctx ,ev );_bfeb [_cfaa ].Ref =_edcgb .Reference (ctx ,ev );};if _ ,_ccdb :=_aceed [_aacg ._aebg ];!_ccdb {if _ffeaa ,_bccg :=_eggad (_bfeb );_ffeaa {return _bccg ;};};return _fceed (ctx ,ev ,_bfeb );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_aacg ._aebg );};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_bgaad ,_eeebc Expression };func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcbca :=args [0].AsString ();if _fcbca .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_fcbca .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_fcbca .ValueString [0]));};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbbcf :=args [0].Ref ;if _gbbcf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_eacg ,_fccd :=_f .ParseCellReference (_gbbcf .Value );if _fccd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gbbcf .Value );};return MakeNumberResult (float64 (_eacg .ColumnIdx +1));};

// Update updates the horizontal range references after removing a row/column.
func (_cgcde HorizontalRange )Update (q *_ef .UpdateQuery )Expression {return _cgcde };

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cgf :=args [1].ValueNumber ;_fdaa :=args [0];var _bfc float64 ;switch _fdaa .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_bfc =_fdaa .ValueNumber ;case ResultTypeString :_acee :=DateValue ([]Result {args [0]});if _acee .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bfc =_acee .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cgc :=_cdb (_bfc );_deac :=_cgc .AddDate (0,int (_cgf ),0);_dedd ,_fbdb ,_edf :=_deac .Date ();_fadf :=_decg (_dedd ,int (_fbdb ),_edf );if _fadf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_fadf );};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_gbf string ,_cfd Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_bcce string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_ee .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_cge int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_be string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_cda string )string ;

// GetFormat returns if cell is protected.
GetLocked (_fb string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_cbg string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_cgaf string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_ffac ,_beg int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_dbg string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_add string ,_afg bool );

// NamedRange returns a named range.
NamedRange (_bba string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_deb ,_fda uint32 );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_bcf :=&defEval {};_bcf .evCache =_dfg ();return _bcf };

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abac :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaeaf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afae :=args [2].ValueNumber ;if _afae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffdac :=args [3].ValueNumber ;if _ffdac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _ffdac > _afae {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_gaff :=(_abac -_eaeaf )*(_afae -_ffdac +1)*2;_ffaf :=_afae *(_afae +1);return MakeNumberResult (_gaff /_ffaf );};const _begf =57366;var _ddfe =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};const _cdggf =57353;

// Update updates the FunctionCall references after removing a row/column.
func (_acbd FunctionCall )Update (q *_ef .UpdateQuery )Expression {_aaefgb :=[]Expression {};for _ ,_addeb :=range _acbd ._ebeeae {_cagba :=_addeb .Update (q );_aaefgb =append (_aaefgb ,_cagba );};return FunctionCall {_aebg :_acbd ._aebg ,_ebeeae :_aaefgb };};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_ffead :v }};func _egeef (_gfcg []Result ,_bdga []string ,_cabca bool )[]string {for _ ,_ceag :=range _gfcg {switch _ceag .Type {case ResultTypeEmpty :if !_cabca {_bdga =append (_bdga ,"");};case ResultTypeString :if _ceag .ValueString !=""||!_cabca {_bdga =append (_bdga ,_ceag .ValueString );};case ResultTypeNumber :_bdga =append (_bdga ,_ceag .Value ());case ResultTypeList :_bdga =_ebed (_bdga ,_egeef (_ceag .ValueList ,[]string {},_cabca ));case ResultTypeArray :for _ ,_dfdcg :=range _ceag .ValueArray {_bdga =_ebed (_bdga ,_egeef (_dfdcg ,[]string {},_cabca ));};};};return _bdga ;};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gdaad :=args [0].AsString ();if _gdaad .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_ecdf :=args [1].AsNumber ();if _ecdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egbg :=_gdaad .ValueString ;if len (_egbg )> 2&&(_ea .HasPrefix (_egbg ,"\u0030\u0078")||_ea .HasPrefix (_egbg ,"\u0030\u0058")){_egbg =_egbg [2:];};_baca ,_gegc :=_dd .ParseInt (_egbg ,int (_ecdf .ValueNumber ),64);if _gegc !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_baca ));};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_febda .Lock ();defer _febda .Unlock ();if _ ,_egbc :=_deffb [name ];_egbc {_db .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_deffb [name ]=fn ;};var _deffb =map[string ]Function {};const _fggb ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";var _bfdg =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _ffefa *_gf .Rand ;

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_abdfc Result )ListValues ()[]Result {if _abdfc .Type ==ResultTypeArray {_deffd :=[]Result {};for _ ,_dfece :=range _abdfc .ValueArray {for _ ,_geaff :=range _dfece {_deffd =append (_deffd ,_geaff );};};return _deffd ;};if _abdfc .Type ==ResultTypeList {return _abdfc .ValueList ;};return nil ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_cfg ,_gega :=_gcbc (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _gega .Type ==ResultTypeError {return _gega ;};return MakeNumberResult (_effe (_cfg ._bce ,_cfg ._dgf ,_cfg ._fdef ,_cfg ._fab ));};func _fdbd (_cfead string ,_gdfbc func (_bbcg float64 )float64 )Function {return func (_dfadb []Result )Result {if len (_dfadb )!=1{return MakeErrorResult (_cfead +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fbeca :=_dfadb [0].AsNumber ();switch _fbeca .Type {case ResultTypeNumber :_fefg :=_gdfbc (_fbeca .ValueNumber );if _cd .IsNaN (_fefg ){return MakeErrorResult (_cfead +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cd .IsInf (_fefg ,0){return MakeErrorResult (_cfead +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _fefg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_cfead +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_fefg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_cfead +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _fbeca ;default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cfead ,_fbeca .Type ));};};};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_gcfga :=len (args );if _gcfga < 3||_gcfga > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cadd :=args [0].ValueNumber ;if _cadd !=float64 (int (_cadd )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeec :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_affe :=args [2].ValueNumber ;_cfca :=0.0;if _gcfga >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfca =args [3].ValueNumber ;};_cgcd :=0.0;if _gcfga >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgcd =args [4].ValueNumber ;if _cgcd !=0{_cgcd =1;};};_ddab :=0.1;if _gcfga >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddab =args [5].ValueNumber ;};_aebc :=100;_aeac :=0;_dccg :=false ;_fecf :=1e-6;_eacd :=_ddab ;for _aeac < _aebc &&!_dccg {_agfc :=_cd .Pow (_eacd +1,_cadd );_fcdc :=_cd .Pow (_eacd +1,_cadd -1);_gga :=_eacd *_cgcd +1;_egbd :=_aeec *(_agfc -1);_cdaf :=_cfca +_agfc *_affe +_egbd *_gga /_eacd ;_ece :=_cadd *_fcdc *_affe -_egbd *_gga /_cd .Pow (_eacd ,2);_gfba :=(_cadd *_aeec *_fcdc *_gga +_egbd *_cgcd )/_eacd ;_cdd :=_cdaf /(_ece +_gfba );if _cd .Abs (_cdd )< _fecf {_dccg =true ;};_aeac ++;_eacd -=_cdd ;};return MakeNumberResult (_eacd );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};const _egada =57364;

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_acac ,_gcbae :=_dcfcb ("\u0046\u0049\u004e\u0044",args );if _gcbae .Type !=ResultTypeEmpty {return _gcbae ;};_fdbgf :=_acac ._bfdbg ;if _fdbgf ==""{return MakeNumberResult (1.0);};_abda :=_acac ._egge ;_dfcd :=_acac ._daeag ;_edebg :=1;for _fage :=range _abda {if _edebg < _dfcd {_edebg ++;continue ;};_eebc :=_ea .Index (_abda [_fage :],_fdbgf );if _eebc ==0{return MakeNumberResult (float64 (_edebg ));};_edebg ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afbbc :=args [0].AsString ();if _afbbc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_afbbc .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_afbbc .ValueString [0]));};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _gebdf :=0;_gebdf < len (args )-1;_gebdf +=2{if args [_gebdf ].ValueNumber ==1{return args [_gebdf +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};var _bbfce =[...]string {};type rangeIndex struct{_fedb int ;_ggafd int ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_fefed :pfx ,_dcec :exp }};type amorArgs struct{_ccdc float64 ;_bde float64 ;_gedc float64 ;_abag float64 ;_ffdbd int ;_ege float64 ;_befe int ;};

// Update returns the same object as updating sheet references does not affect String.
func (_afec String )Update (q *_ef .UpdateQuery )Expression {return _afec };const _dgcfg int =0;

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_bbfa :=len (args );if _bbfa < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bbfa > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfag :=args [0];_cddg :=args [1];if _cddg .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gaffc :=args [2].AsNumber ();if _gaffc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dabe :=false ;if _bbfa ==4&&args [3].Type !=ResultTypeEmpty {_gcde :=args [3].AsNumber ();if _gcde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gcde .ValueNumber ==0{_dabe =true ;};};_fbbb :=int (_gaffc .ValueNumber )-1;_cgff :=-1;_aaef :=false ;_fadfcb :for _cdebg ,_fgaf :=range _cddg .ValueArray {if len (_fgaf )==0{continue ;};_ceaa :=_fgaf [0];switch _fdacce (_ceaa ,_cfag ,false ,_dabe ){case _degec :_cgff =_cdebg ;case _gabf :_cgff =_cdebg ;_aaef =true ;break _fadfcb ;};};if _cgff ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_affg :=_cddg .ValueArray [_cgff ];if _fbbb < 0||_fbbb >=len (_affg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _aaef ||!_dabe {return _affg [_fbbb ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Error is an error expression.
type Error struct{_aebf string };

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_dgcd :=len (args );if _dgcd !=4&&_dgcd !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgaed ,_addf ,_dbfbg :=_fcfd (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _dbfbg .Type ==ResultTypeError {return _dbfbg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adaf :=args [2].ValueNumber ;if _adaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bbdbf :=args [3].ValueNumber ;if _bbdbf <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_gdaec :=0;if _dgcd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdaec =int (args [4].ValueNumber );if !_dca (_gdaec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_dffg ,_dbfbg :=_bgae (_cgaed ,_addf ,_gdaec );if _dbfbg .Type ==ResultTypeError {return _dbfbg ;};return MakeNumberResult ((_bbdbf /_adaf -1)/_dffg );};type tokenType int ;func _bff (_gdae BinOpType ,_bc []Result ,_eff Result )Result {_ffe :=[]Result {};switch _eff .Type {case ResultTypeNumber :_bae :=_eff .ValueNumber ;for _dbe :=range _bc {_gfa :=_bc [_dbe ].AsNumber ();if _gfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gdae {case BinOpTypePlus :_ffe =append (_ffe ,MakeNumberResult (_gfa .ValueNumber +_bae ));case BinOpTypeMinus :_ffe =append (_ffe ,MakeNumberResult (_gfa .ValueNumber -_bae ));case BinOpTypeMult :_ffe =append (_ffe ,MakeNumberResult (_gfa .ValueNumber *_bae ));case BinOpTypeDiv :if _bae ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ffe =append (_ffe ,MakeNumberResult (_gfa .ValueNumber /_bae ));case BinOpTypeExp :_ffe =append (_ffe ,MakeNumberResult (_cd .Pow (_gfa .ValueNumber ,_bae )));case BinOpTypeLT :_ffe =append (_ffe ,MakeBoolResult (_gfa .ValueNumber < _bae ));case BinOpTypeGT :_ffe =append (_ffe ,MakeBoolResult (_gfa .ValueNumber > _bae ));case BinOpTypeEQ :_ffe =append (_ffe ,MakeBoolResult (_gfa .ValueNumber ==_bae ));case BinOpTypeLEQ :_ffe =append (_ffe ,MakeBoolResult (_gfa .ValueNumber <=_bae ));case BinOpTypeGEQ :_ffe =append (_ffe ,MakeBoolResult (_gfa .ValueNumber >=_bae ));case BinOpTypeNE :_ffe =append (_ffe ,MakeBoolResult (_gfa .ValueNumber !=_bae ));default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gdae ));};};case ResultTypeString :_dag :=_eff .ValueString ;for _eg :=range _bc {_ag :=_bc [_eg ].AsString ();if _ag .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gdae {case BinOpTypeLT :_ffe =append (_ffe ,MakeBoolResult (_ag .ValueString < _dag ));case BinOpTypeGT :_ffe =append (_ffe ,MakeBoolResult (_ag .ValueString > _dag ));case BinOpTypeEQ :_ffe =append (_ffe ,MakeBoolResult (_ag .ValueString ==_dag ));case BinOpTypeLEQ :_ffe =append (_ffe ,MakeBoolResult (_ag .ValueString <=_dag ));case BinOpTypeGEQ :_ffe =append (_ffe ,MakeBoolResult (_ag .ValueString >=_dag ));case BinOpTypeNE :_ffe =append (_ffe ,MakeBoolResult (_ag .ValueString !=_dag ));default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gdae ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_ffe );};var _aacb =[...]int {0};var (_dbged =0;_edag =false ;);

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgffa :=args [0].Ref ;if _dgffa .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_dgffa .Value ));};const _gad ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_cfage PrefixRangeExpr )Update (q *_ef .UpdateQuery )Expression {_bcbaf :=_cfage ;_cddcg :=_cfage ._aecbe .String ();if _cddcg ==q .SheetToUpdate {_fbadf :=*q ;_fbadf .UpdateCurrentSheet =true ;_bcbaf ._acdg =_cfage ._acdg .Update (&_fbadf );_bcbaf ._adeff =_cfage ._adeff .Update (&_fbadf );};return _bcbaf ;};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbdf :=ctx .GetEpoch ();_gcg ,_fafa :=_ddgdb (args [0].Value (),_fbdf );if _fafa !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_gcg .Year ()));};func _bgg (_ddfd Result ,_adgb ,_aceeb string )(float64 ,Result ){var _ebe float64 ;switch _ddfd .Type {case ResultTypeNumber :_ebe =float64 (int (_ddfd .ValueNumber ));case ResultTypeString :_bdca :=DateValue ([]Result {_ddfd });if _bdca .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_adgb +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_aceeb );};_ebe =_bdca .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_aceeb );};if _ebe < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_adgb +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _ebe ,_fcc ;};const _ffef ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_dbeb :=args [0];if _dbeb .Type !=ResultTypeArray &&_dbeb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_daaf :=_cacde (args [1]);_eabd :=0;for _ ,_gfegf :=range _dacf (_dbeb ){for _ ,_febc :=range _gfegf {if _acedgd (_febc ,_daaf ){_eabd ++;};};};return MakeNumberResult (float64 (_eabd ));};

// String returns a string representation of PrefixExpr.
func (_dgeda PrefixExpr )String ()string {return _cb .Sprintf ("\u0025\u0073\u0021%\u0073",_dgeda ._fefed .String (),_dgeda ._dcec .String ());};

// String is a string expression.
type String struct{_dfcbb string };func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};func _ccee (_fcgcd ,_abc int )int {switch _abc {case 1:if _eabc (_fcgcd ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// String returns a string representation of CellRef.
func (_aad CellRef )String ()string {return _aad ._ecg };var _acdc =[...]struct{_badec int ;_afcg int ;_abbb string ;}{};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afgca :=int (args [0].ValueNumber );return MakeBoolResult (_afgca !=_afgca /2*2);};

// Reference returns an invalid reference for BinaryExpr.
func (_ddd BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ceaad :=args [0];if _ceaad .Type !=ResultTypeArray &&_ceaad .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_baeb :=_dacf (_ceaad );_dagc :=args [2];if _dagc .Type !=ResultTypeArray &&_dagc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bgcc :=_dacf (_dagc );_dffcf :=_cacde (args [1]);_gaea :=0.0;for _cfde ,_dfdg :=range _baeb {for _adce ,_aac :=range _dfdg {if _acedgd (_aac ,_dffcf ){_gaea +=_bgcc [_cfde ][_adce ].ValueNumber ;};};};return MakeNumberResult (_gaea );};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eefaa :=args [0].AsString ();if _eefaa .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgbag :=_ca .Buffer {};_bffce :=false ;_edfac :=false ;_ggde :=0;for _ ,_fcgef :=range _eefaa .ValueString {_accb :=_fcgef ==' ';if _accb {if !_bffce {continue ;};if !_edfac {_ggde ++;_cgbag .WriteRune (_fcgef );};}else {_ggde =0;_bffce =true ;_cgbag .WriteRune (_fcgef );};_edfac =_accb ;};_cgbag .Truncate (_cgbag .Len ()-_ggde );return MakeStringResult (_cgbag .String ());};func _dfb (){_bgca =_gd .MustCompile ("\u005e\u0030\u002b\u0024");_eeeg =_gd .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_dgaa =_gd .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_cbbg =_gd .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_fcbg =_gd .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_gggc =_gd .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_cgebb =_gd .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_gbfc =_gd .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_faac =_gd .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_bcbf =_gd .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_gefc =_gd .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_ebaab =_gd .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_bbfe +_bbfe +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_bbfe +_bbfe +"\u0029\u002b\u0059+\u0024");_ecef =_gd .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_bbfe +_bbfe +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_bbfe +_bbfe +"\u0029\u002b\u0059+\u0024");_aebce =_gd .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_eabac =_gd .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// String returns a string representation of a named range.
func (_bafeb NamedRangeRef )String ()string {return _bafeb ._ffead };var _aaede =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_adf :=len (args );if (_adf !=2&&_adf !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eded :=0;if _adf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eded =int (args [2].ValueNumber );if !_dca (_eded ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_badga :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cccg :=args [1].ValueNumber ;_bdfb ,_gage :=_bgae (_badga ,_cccg ,_eded );if _gage .Type ==ResultTypeError {return _gage ;};return MakeNumberResult (_bdfb );};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_feb :=int (args [0].ValueNumber );if _feb < 0||_feb >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _feb <=1899{_feb +=1900;};_efe :=_ee .Month (args [1].ValueNumber );_fbd :=int (args [2].ValueNumber );_dbc :=_def (_feb ,_efe ,_fbd );_cefc :=_ggee (_cacg ,_dbc )+1;if _cefc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_cefc );};var _bdeg ,_bgfda ,_gafg ,_ccgc ,_ceda ,_faecc *_gd .Regexp ;const _eddfd =57344;const (_gabf cmpResult =0;_degec cmpResult =-1;_aeccf cmpResult =1;_eccb cmpResult =2;);func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acedg :=args [0].AsNumber ();if _acedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abfc :=float64 (0);if len (args )> 1{_dbbb :=args [1].AsNumber ();if _dbbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abfc =_dbbb .ValueNumber ;};_gebaaa :=_acedg .ValueNumber ;_dcaa :=1.0;if _abfc >=0{_dcaa =_cd .Pow (1/10.0,_abfc );}else {return MakeNumberResult (0);};_gebaaa ,_gbeb :=_cd .Modf (_gebaaa /_dcaa );_cfaf :=0.99999;if _gbeb > _cfaf {_gebaaa ++;}else if _gbeb < -_cfaf {_gebaaa --;};_ =_gbeb ;return MakeNumberResult (_gebaaa *_dcaa );};

// Reference returns an invalid reference for ConstArrayExpr.
func (_agf ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _bgae (_bfa ,_cdbd float64 ,_bea int )(float64 ,Result ){_gdc ,_fcgc :=_cdb (_bfa ),_cdb (_cdbd );_afb :=_gdc .Unix ();_egfbg :=_fcgc .Unix ();if _afb ==_egfbg {return 0,_fcc ;};_ceee ,_cbe ,_bdbg :=_gdc .Date ();_aeg ,_cbb ,_gcb :=_fcgc .Date ();_fgce ,_ebab :=int (_cbe ),int (_cbb );var _eaea ,_caag float64 ;switch _bea {case 0:if _bdbg ==31{_bdbg --;};if _bdbg ==30&&_gcb ==31{_gcb --;}else if _ecfa :=_eabc (_ceee );_fgce ==2&&((_ecfa &&_bdbg ==29)||(!_ecfa &&_bdbg ==28)){_bdbg =30;if _bgdg :=_eabc (_aeg );_ebab ==2&&((_bgdg &&_gcb ==29)||(!_bgdg &&_gcb ==28)){_gcb =30;};};_eaea =float64 ((_aeg -_ceee )*360+(_ebab -_fgce )*30+(_gcb -_bdbg ));_caag =360;case 1:_eaea =_cdbd -_bfa ;_bfgdf :=_ceee !=_aeg ;if _bfgdf &&(_aeg !=_ceee +1||_fgce < _ebab ||(_fgce ==_ebab &&_bdbg < _gcb )){_fff :=0;for _efaf :=_ceee ;_efaf <=_aeg ;_efaf ++{_fff +=_ccee (_efaf ,1);};_caag =float64 (_fff )/float64 (_aeg -_ceee +1);}else {if !_bfgdf &&_eabc (_ceee ){_caag =366;}else {if _bfgdf &&((_eabc (_ceee )&&(_fgce < 2||(_fgce ==2&&_bdbg <=29)))||(_eabc (_aeg )&&(_ebab > 2||(_ebab ==2&&_gcb ==29)))){_caag =366;}else {_caag =365;};};};case 2:_eaea =_cdbd -_bfa ;_caag =360;case 3:_eaea =_cdbd -_bfa ;_caag =365;case 4:if _bdbg ==31{_bdbg --;};if _gcb ==31{_gcb --;};_eaea =float64 ((_aeg -_ceee )*360+(_ebab -_fgce )*30+(_gcb -_bdbg ));_caag =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _eaea /_caag ,_fcc ;};const _bccee =_ee .Second *1;func _bcb (_dge []Result ,_cad string )(*cumulArgs ,Result ){if len (_dge )!=6{return nil ,MakeErrorResult (_cad +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dge [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cad +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dcg :=_dge [0].ValueNumber ;if _dcg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cad +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dge [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cad +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbaf :=_dge [1].ValueNumber ;if _cbaf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _dge [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cad +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfgf :=_dge [2].ValueNumber ;if _bfgf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dge [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cad +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dcga :=_dge [3].ValueNumber ;if _dcga <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dge [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cad +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edge :=_dge [4].ValueNumber ;if _edge <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cad +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _edge < _dcga {return nil ,MakeErrorResultType (ErrorTypeNum ,_cad +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _edge > _cbaf {return nil ,MakeErrorResultType (ErrorTypeNum ,_cad +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_edde :=int (_dge [5].ValueNumber );if _edde !=0&&_edde !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_cad +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_dcg ,_cbaf ,_bfgf ,_dcga ,_edge ,_edde },_fcc ;};

// GetLocked returns FALSE for the invalid reference context.
func (_aefcd *ivr )GetLocked (cellRef string )bool {return false };func init (){_dfb ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ba ,_af Expression ;_ad BinOpType ;};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _dbggd (_eeef string ,_eddf []Result )(*parsedReplaceObject ,Result ){if len (_eddf )!=4{return nil ,MakeErrorResult (_eeef +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _eddf [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_eeef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_gggfb :=_eddf [0].ValueString ;if _eddf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eeef +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_bfde :=int (_eddf [1].ValueNumber )-1;if _eddf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eeef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_ggge :=int (_eddf [2].ValueNumber );if _eddf [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_eeef +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_cefae :=_eddf [3].ValueString ;return &parsedReplaceObject {_gggfb ,_bfde ,_ggge ,_cefae },_fcc ;};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_aabcee chan *node ;_dgcag _ge .Mutex ;_cbce []chan *node ;_aefbe []*node ;};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_deed :=args [0].AsNumber ();_fgfe :=args [1].AsNumber ();if _deed .Type ==ResultTypeNumber &&_fgfe .Type ==ResultTypeNumber {_gce :=_cd .Atan2 (_fgfe .ValueNumber ,_deed .ValueNumber );if _gce !=_gce {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_gce );};for _ ,_egdaa :=range []ResultType {_deed .Type ,_fgfe .Type }{switch _egdaa {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _deed ;default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egdaa ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_cd .Pi );};func _gcfgb (_edcbg []Result )Result {_acbc :=_edcbg [0].ValueArray ;if len (_edcbg )==1{_adcd :=[][]Result {};for _ ,_fadfg :=range _acbc {_adcd =append (_adcd ,_afaf ([]Result {MakeListResult (_fadfg )}).ValueList );};return MakeArrayResult (_adcd );}else if len (_edcbg )==2{_cdbdba :=len (_acbc );_egdgb :=len (_acbc [0]);_fdab :=_ceeeb (_edcbg [1],_cdbdba ,_egdgb );_gdge :=len (_fdab );_cgec :=[][]Result {};var _aadc []Result ;for _dbff ,_bgdbe :=range _acbc {if _dbff < _gdge {_aadc =_fdab [_dbff ];}else {_aadc =_cdbdb (MakeErrorResultType (ErrorTypeNA ,""),_egdgb );};_cgec =append (_cgec ,_afaf ([]Result {MakeListResult (_bgdbe ),MakeListResult (_aadc )}).ValueList );};return MakeArrayResult (_cgec );}else if len (_edcbg )==3{_dcfg :=len (_acbc );_gaeb :=len (_acbc [0]);_edbdd :=_ceeeb (_edcbg [1],_dcfg ,_gaeb );_eacae :=_ceeeb (_edcbg [2],_dcfg ,_gaeb );_fdcb :=len (_edbdd );_bcfb :=len (_eacae );_bdgb :=[][]Result {};var _gbgbf ,_ebbg []Result ;for _fcecd ,_ccef :=range _acbc {if _fcecd < _fdcb {_gbgbf =_edbdd [_fcecd ];}else {_gbgbf =_cdbdb (MakeErrorResultType (ErrorTypeNA ,""),_gaeb );};if _fcecd < _bcfb {_ebbg =_eacae [_fcecd ];}else {_ebbg =_cdbdb (MakeErrorResultType (ErrorTypeNA ,""),_gaeb );};_bdgb =append (_bdgb ,_afaf ([]Result {MakeListResult (_ccef ),MakeListResult (_gbgbf ),MakeListResult (_ebbg )}).ValueList );};return MakeArrayResult (_bdgb );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_gfbbc :=len (args );if _gfbbc < 5||_gfbbc > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcec :=args [0].ValueNumber ;if _bcec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcfc :=args [1].ValueNumber ;if _egcfc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbbe :=args [2].ValueNumber ;if _fbbe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fbbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfge :=args [3].ValueNumber ;if _bfge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eeddd :=args [4].ValueNumber ;if _bfge > _eeddd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _eeddd > _fbbe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_dffca :=2.0;if _gfbbc > 5{if args [5].Type ==ResultTypeEmpty {_dffca =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dffca =args [5].ValueNumber ;if _dffca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_geab :=false ;if _gfbbc > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_geab =args [6].ValueNumber !=0;};_aagb :=0.0;_dfde :=_cd .Floor (_bfge );_efedf :=_cd .Ceil (_eeddd );if _geab {for _fafb :=_dfde +1;_fafb <=_efedf ;_fafb ++{_efgc :=_dfad (_bcec ,_egcfc ,_fbbe ,_fafb ,_dffca );if _fafb ==_dfde +1{_efgc *=_cd .Min (_eeddd ,_dfde +1)-_bfge ;}else if _fafb ==_efedf {_efgc *=_eeddd +1-_efedf ;};_aagb +=_efgc ;};}else {_fgaa :=_fbbe ;var _gafd float64 ;if !_dfgc (_bfge ,_cd .Floor (_bfge )){if _dffca ==1{_aagc :=_fbbe /2;if _bfge > _aagc ||_dfgc (_bfge ,_aagc ){_gafd =_bfge -_aagc ;_bfge =_aagc ;_eeddd -=_gafd ;_fgaa ++;};};};if _dffca !=0{_bcec -=_gaed (_bcec ,_egcfc ,_fbbe ,_fgaa ,_bfge ,_dffca );};_aagb =_gaed (_bcec ,_egcfc ,_fbbe ,_fbbe -_bfge ,_eeddd -_bfge ,_dffca );};return MakeNumberResult (_aagb );};func _geba (_aead float64 )float64 {return float64 (int (_aead +0.5))};const _fdgc =57356;func _dacf (_ecfd Result )[][]Result {switch _ecfd .Type {case ResultTypeArray :return _ecfd .ValueArray ;case ResultTypeList :return [][]Result {_ecfd .ValueList };default:return [][]Result {};};};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_baa ConstArrayExpr )Update (q *_ef .UpdateQuery )Expression {return _baa };func _aceda (_fabb ,_gdg float64 ,_gbg ,_dbd int )float64 {_cdag :=_cdb (_fabb );_bef :=_cdb (_gdg );_afbb :=_bagf (_cdag ,_bef ,_gbg );return _bed (_cdag ,_afbb ,_dbd );};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_dae CellRef )Update (q *_ef .UpdateQuery )Expression {if q .UpdateCurrentSheet {_dae ._ecg =_dec (_dae ._ecg ,q );};return _dae ;};

// Reference returns an invalid reference for Negate.
func (_cgaee Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_afdg *plex )Lex (lval *yySymType )int {_edag =true ;_gbede :=<-_afdg ._afgb ;if _gbede !=nil {lval ._dfee =_gbede ;return int (lval ._dfee ._dgfdea );};return 0;};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_bbgg :=len (args );if _bbgg < 2||_bbgg > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_agcb :=args [0];if _agcb .Type !=ResultTypeArray &&_agcb .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_deda :=args [1].AsNumber ();if _deda .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_egfc :=int (_deda .ValueNumber )-1;_beag :=-1;if _bbgg ==3&&args [2].Type !=ResultTypeEmpty {_cggg :=args [2].AsNumber ();if _cggg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_beag =int (_cggg .ValueNumber )-1;};if _egfc ==-1&&_beag ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _ebba []Result ;if _agcb .Type ==ResultTypeArray {_gcgc :=_agcb .ValueArray ;if _egfc < -1||_egfc >=len (_gcgc ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _egfc ==-1{if _beag >=len (_gcgc [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_fdbg :=[][]Result {};for _ ,_cgaede :=range _gcgc {_daggg :=_cgaede [_beag ];if _daggg .Type ==ResultTypeEmpty {_daggg =MakeNumberResult (0);};_fdbg =append (_fdbg ,[]Result {_daggg });};return MakeArrayResult (_fdbg );};_ebba =_gcgc [_egfc ];}else {_faeg :=_agcb .ValueList ;if _egfc < -1||_egfc >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _egfc ==-1{if _beag >=len (_faeg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bbge :=_faeg [_beag ];if _bbge .Type ==ResultTypeEmpty {_bbge =MakeNumberResult (0);};return _bbge ;};_ebba =_faeg ;};if _beag < -1||_beag > len (_ebba ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _beag ==-1{_ggea :=[]Result {};for _ ,_bcga :=range _ebba {if _bcga .Type ==ResultTypeEmpty {_ggea =append (_ggea ,MakeNumberResult (0));}else {_ggea =append (_ggea ,_bcga );};};return MakeArrayResult ([][]Result {_ggea });};_bgag :=_ebba [_beag ];if _bgag .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bgag ;};const _abgc =57367;func (_ffb BinOpType )String ()string {if _ffb >=BinOpType (len (_bgd )-1){return _cb .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ffb );};return _bcc [_bgd [_ffb ]:_bgd [_ffb +1]];};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_febda .Lock ();defer _febda .Unlock ();if _fadbb ,_bgcae :=_gecbg [name ];_bgcae {return _fadbb ;};return nil ;};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_ebgd *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_fdee ,_eeg :=_ebaba (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _eeg .Type ==ResultTypeError {return _eeg ;};_fgf :=_fdee ._aabe ;_cfga :=_fdee ._cgbe ;_aefbc :=_fdee ._fddf ;_cffb :=_fdee ._fbgc ;_afad :=_fdee ._adbc ;_dgdg :=_fdee ._edcb ;_fddc :=_cgde (_fgf ,_cfga ,_aefbc ,_cffb ,_afad ,_dgdg );if _fddc .Type ==ResultTypeError {return _fddc ;};_egcgc :=_fddc .ValueNumber /(1.0+_cffb /_afad );return MakeNumberResult (_egcgc );};const _faacc =57358;const _gddd =57360;func _ecgb (_bedgf []Result ,_bgaf countMode )float64 {_bgfe :=0.0;for _ ,_aceeg :=range _bedgf {switch _aceeg .Type {case ResultTypeNumber :if _bgaf ==_eaafe ||(_bgaf ==_cgegb &&!_aceeg .IsBoolean ){_bgfe ++;};case ResultTypeList ,ResultTypeArray :_bgfe +=_ecgb (_aceeg .ListValues (),_bgaf );case ResultTypeString :if _bgaf ==_eaafe {_bgfe ++;};case ResultTypeEmpty :if _bgaf ==_bgdf {_bgfe ++;};};};return _bgfe ;};func _cdb (_dba float64 )_ee .Time {_bgfc :=int64 ((_dba -_dfc )*_acga );return _ee .Unix (0,_bgfc ).UTC ();};func _dfg ()evCache {_efd :=evCache {};_efd ._fa =make (map[string ]Result );_efd ._gg =&_ge .Mutex {};return _efd ;};const _cbgbb =57354;

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_aebf :v }};func _fdfd (_fecfg Result )bool {_cade :=_fecfg .Type ;return _cade !=ResultTypeArray &&_cade !=ResultTypeList ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_cd .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gaac :=[]float64 {};for _ ,_afda :=range args {switch _afda .Type {case ResultTypeString :_deddf :=_afda .AsNumber ();if _deddf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gaac =append (_gaac ,_deddf .ValueNumber );case ResultTypeList ,ResultTypeArray :_cbbd :=GCD (_afda .ListValues ());if _cbbd .Type !=ResultTypeNumber {return _cbbd ;};_gaac =append (_gaac ,_cbbd .ValueNumber );case ResultTypeNumber :_gaac =append (_gaac ,_afda .ValueNumber );case ResultTypeError :return _afda ;default:return MakeErrorResult (_cb .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afda .Type ));};};if _gaac [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_gaac )==1{return MakeNumberResult (_gaac [0]);};_eccf :=_gaac [0];for _cdff :=1;_cdff < len (_gaac );_cdff ++{if _gaac [_cdff ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eccf =_bcad (_eccf ,_gaac [_cdff ]);};return MakeNumberResult (_eccf );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_bedda NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_gfece :=ctx .NamedRange (_bedda ._ffead );_gadgb :=_gfece .Value ;if _cecfa ,_ebdd :=ev .GetFromCache (_gadgb );_ebdd {return _cecfa ;};_bgbab :=_ea .Split (_gadgb ,"\u0021");if len (_bgbab )!=2{return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_gadgb ));};_beeae :=ctx .Sheet (_bgbab [0]);_edgg :=_ea .Split (_bgbab [1],"\u003a");switch len (_edgg ){case 1:_aegab :=ev .Eval (_beeae ,_edgg [0]);ev .SetCache (_gadgb ,_aegab );return _aegab ;case 2:_dfcc :=_bgggd (_beeae ,ev ,_edgg [0],_edgg [1]);ev .SetCache (_gadgb ,_dfcc );return _dfcc ;};return MakeErrorResult (_cb .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_gfece .Type ));};func _fcfd (_afee ,_cgcc Result ,_eagca string )(float64 ,float64 ,Result ){_egb ,_ecd :=_bgg (_afee ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_eagca );if _ecd .Type ==ResultTypeError {return 0,0,_ecd ;};_bbb ,_ecd :=_bgg (_cgcc ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_eagca );if _ecd .Type ==ResultTypeError {return 0,0,_ecd ;};if _egb >=_bbb {return 0,0,MakeErrorResultType (ErrorTypeNum ,_eagca +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _egb ,_bbb ,_fcc ;};func _edeb (_gdcd []Result ,_gfabe bool )Result {_cbfc :="\u004d\u0049\u004e";if _gfabe {_cbfc ="\u004d\u0049\u004e\u0041";};if len (_gdcd )==0{return MakeErrorResult (_cbfc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaabf :=_cd .MaxFloat64 ;for _ ,_gegfg :=range _gdcd {switch _gegfg .Type {case ResultTypeNumber :if (_gfabe ||!_gegfg .IsBoolean )&&_gegfg .ValueNumber < _aaabf {_aaabf =_gegfg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_cedaf :=_edeb (_gegfg .ListValues (),_gfabe );if _cedaf .ValueNumber < _aaabf {_aaabf =_cedaf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_dbaa :=0.0;if _gfabe {_dbaa =_gegfg .AsNumber ().ValueNumber ;};if _dbaa < _aaabf {_aaabf =_dbaa ;};default:_db .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_cbfc +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gegfg .Type );};};if _aaabf ==_cd .MaxFloat64 {_aaabf =0;};return MakeNumberResult (_aaabf );};const _cbfdd =57349;func init (){_ffefa =_gf .New (_gf .NewSource (_ee .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_fdbb ("\u0041\u0053\u0049\u004e",_cd .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_fdbb ("\u0041\u0053\u0049\u004e",_cd .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_fdbb ("\u0041\u0053\u0049\u004e",_cd .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_fdbb ("\u0041\u0043\u004f\u0054",func (_afff float64 )float64 {return _cd .Pi /2-_cd .Atan (_afff )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_fdbb ("\u0041\u0043\u004fT\u0048",func (_adbcd float64 )float64 {return _cd .Atanh (1/_adbcd )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_fdbb ("\u0041\u0053\u0049\u004e",_cd .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_fdbb ("\u0041\u0053\u0049N\u0048",_cd .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_fdbb ("\u0041\u0054\u0041\u004e",_cd .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_fdbb ("\u0041\u0054\u0041N\u0048",_cd .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_fdbb ("\u0043\u004f\u0053",_cd .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_fdbb ("\u0043\u004f\u0053\u0048",_cd .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_fdbd ("\u0043\u004f\u0054",_cd .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_fdbd ("\u0043\u004f\u0054\u0048",_cd .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_fdbd ("\u0043\u0053\u0043",_cd .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_fdbd ("\u0043\u0053\u0043",_cd .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_fdbb ("\u0045\u0058\u0050",_cd .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_fdbb ("\u004c\u004e",_cd .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_fdbb ("\u004c\u004f\u00471\u0030",_cd .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_fdbd ("\u0053\u0045\u0043",_cd .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_fdbd ("\u0053\u0045\u0043\u0048",_cd .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_fdbb ("\u0053\u0049\u004e",_cd .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_fdbb ("\u0053\u0049\u004e\u0048",_cd .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_fdbb ("\u0053\u0051\u0052\u0054",_cd .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_fdbb ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_egab float64 )float64 {return _cd .Sqrt (_egab *_cd .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_fdbb ("\u0054\u0041\u004e",_cd .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_fdbb ("\u0054\u0041\u004e\u0048",_cd .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Eval evaluates and returns a string.
func (_bgef String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_bgef ._dfcbb )};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_feccb Expression ;_gadf ,_agbc string ;};const _eggaa =57375;

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cgefg :=args [0].ValueNumber ;_fae :=args [1].ValueNumber ;if _fae < _cgefg {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _fae ==_cgefg {return MakeNumberResult (0);};_dfa :=_ea .ToLower (args [2].ValueString );if _dfa =="\u0064"{return MakeNumberResult (_fae -_cgefg );};_fea :=_cdb (_cgefg );_ade :=_cdb (_fae );_eefe ,_aag ,_cec :=_fea .Date ();_dbec ,_bgfd ,_eagc :=_ade .Date ();_abb :=int (_aag );_eab :=int (_bgfd );var _fce float64 ;switch _dfa {case "\u0079":_fce =float64 (_dbec -_eefe );if _eab < _abb ||(_eab ==_abb &&_eagc < _cec ){_fce --;};case "\u006d":_dgg :=_dbec -_eefe ;_fee :=_eab -_abb ;if _eagc < _cec {_fee --;};if _fee < 0{_dgg --;_fee +=12;};_fce =float64 (_dgg *12+_fee );case "\u006d\u0064":_ebac :=_eab ;if _eagc < _cec {_ebac --;};_fce =float64 (int (_fae -_decg (_dbec ,_ebac ,_cec )));case "\u0079\u006d":_fce =float64 (_eab -_abb );if _eagc < _cec {_fce --;};if _fce < 0{_fce +=12;};case "\u0079\u0064":_ega :=_dbec ;if _eab < _abb ||(_eab ==_abb &&_eagc < _cec ){_ega --;};_fce =float64 (int (_fae -_decg (_ega ,_abb ,_cec )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_fce );};func _ebed (_afde ,_ccbca []string )[]string {for _ ,_gbgd :=range _ccbca {_afde =append (_afde ,_gbgd );};return _afde ;};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_acbf :=MakeNumberResult (0);for _ ,_fgfc :=range args {_fgfc =_fgfc .AsNumber ();switch _fgfc .Type {case ResultTypeNumber :_acbf .ValueNumber +=_fgfc .ValueNumber *_fgfc .ValueNumber ;case ResultTypeList ,ResultTypeArray :_debe :=SumSquares (_fgfc .ListValues ());if _debe .Type !=ResultTypeNumber {return _debe ;};_acbf .ValueNumber +=_debe .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fgfc ;case ResultTypeEmpty :default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_fgfc .Type ));};};return _acbf ;};const _ccdba =57352;func _dg (_ddf string ,_cgd uint32 )string {_effa :=_f .ColumnToIndex (_ddf );if _effa ==_cgd {return "\u0023\u0052\u0045F\u0021";}else if _effa > _cgd {return _f .IndexToColumn (_effa -1);}else {return _ddf ;};};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_aebg :name ,_ebeeae :args };};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_degac Context ,_dfgdf Evaluator ,_febfe []Result )Result ;func _bbff (_aagcd int )string {if _aagcd >=0&&_aagcd < len (_bbfce ){if _bbfce [_aagcd ]!=""{return _bbfce [_aagcd ];};};return _cb .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_aagcd );};

// Value returns a string version of the result.
func (_egde Result )Value ()string {switch _egde .Type {case ResultTypeNumber :_bafbf :=_dd .FormatFloat (_egde .ValueNumber ,'f',-1,64);if len (_bafbf )> 12{_cbeb :=12;for _befg :=_cbeb ;_befg > 0&&_bafbf [_befg ]=='0';_befg --{_cbeb --;};_bafbf =_bafbf [0:_cbeb +1];};return _bafbf ;case ResultTypeError :return _egde .ValueString ;case ResultTypeString :return _egde .ValueString ;case ResultTypeList :if len (_egde .ValueList )==0{return "";};return _egde .ValueList [0].Value ();case ResultTypeArray :if len (_egde .ValueArray )==0||len (_egde .ValueArray [0])==0{return "";};return _egde .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};const _cdea ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_ecga :=args [0];if _ecga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gebac :=int (_ecga .ValueNumber );if _gebac < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_gebac {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_gebac ];};const _debg =57357;const _gffag int =30;const _ggegg =57370;func _bgggd (_ecaeec Context ,_bfdcf Evaluator ,_egbec ,_cgage string )Result {_aaeg ,_geggc :=_f .ParseCellReference (_egbec );if _geggc !=nil {return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_egbec ,_geggc .Error ()));};_bdcg ,_ddagd :=_aaeg .ColumnIdx ,_aaeg .RowIdx ;_gcfe ,_bacggc :=_f .ParseCellReference (_cgage );if _bacggc !=nil {return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cgage ,_bacggc .Error ()));};_ggfed ,_bagg :=_gcfe .ColumnIdx ,_gcfe .RowIdx ;_aaega :=[][]Result {};for _eged :=_ddagd ;_eged <=_bagg ;_eged ++{_bebd :=[]Result {};for _cfafe :=_bdcg ;_cfafe <=_ggfed ;_cfafe ++{_facb :=_ecaeec .Cell (_cb .Sprintf ("\u0025\u0073\u0025\u0064",_f .IndexToColumn (_cfafe ),_eged ),_bfdcf );_bebd =append (_bebd ,_facb );};_aaega =append (_aaega ,_bebd );};if len (_aaega )==1{if len (_aaega [0])==1{return _aaega [0][0];};return MakeListResult (_aaega [0]);};return MakeArrayResult (_aaega );};func (_badee *ivr )SetOffset (col ,row uint32 ){};

// Eval evaluates and returns the result of a formula.
func (_ace *defEval )Eval (ctx Context ,formula string )Result {_egd :=ParseString (formula );_abg :=make (chan Result );go func (){if _egd ==nil {_abg <-MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_ace .checkLastEvalIsRef (ctx ,_egd );_abg <-_egd .Eval (ctx ,_ace );};}();select{case _cgef :=<-_abg :return _cgef ;case <-_ee .After (_bccee ):_db .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};func _baag (_gee ,_dbge float64 ,_ccb ,_efaed int )(float64 ,Result ){_gbfa ,_aegf :=_cdb (_gee ),_cdb (_dbge );if _aegf .After (_gbfa ){_ebg :=_aed (_gbfa ,_aegf ,_ccb ,_efaed );_bddf :=(_aegf .Year ()-_ebg .Year ())*12+int (_aegf .Month ())-int (_ebg .Month ());return float64 (_bddf *_ccb )/12.0,_fcc ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bfgc :=args [1].ValueNumber ;_cdcb :=args [0];var _afc float64 ;switch _cdcb .Type {case ResultTypeEmpty :_afc =0;case ResultTypeNumber :_afc =_cdcb .ValueNumber ;case ResultTypeString :_fecb :=DateValue ([]Result {args [0]});if _fecb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_afc =_fecb .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ecgg :=_cdb (_afc );_efae :=_ecgg .AddDate (0,int (_bfgc +1),0);_ecfb ,_cbf ,_ :=_efae .Date ();_gaaf :=_decg (_ecfb ,int (_cbf ),0);if _gaaf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _ecfb ==1900&&_cbf ==3{_gaaf --;};return MakeNumberResult (_gaaf );};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_cbba :=len (args );if _cbba < 3||_cbba > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdbcd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_abaf :=args [1].ValueNumber ;if _abaf !=float64 (int (_abaf )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dadg :=args [2].ValueNumber ;_acfa :=0.0;if _cbba >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfa =args [3].ValueNumber ;};_ecce :=0.0;if _cbba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecce =args [4].ValueNumber ;if _ecce !=0{_ecce =1;};};if _cdbcd ==0{return MakeNumberResult (-_dadg *_abaf -_acfa );}else {return MakeNumberResult ((((1-_cd .Pow (1+_cdbcd ,_abaf ))/_cdbcd )*_dadg *(1+_cdbcd *_ecce )-_acfa )/_cd .Pow (1+_cdbcd ,_abaf ));};};var _aada =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _aeaf []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _feabe (_ggaf Result )[]Result {_gfef :=_ggaf .ValueList ;if _ggaf .Type ==ResultTypeArray {_gfef =nil ;for _ ,_gdfg :=range _ggaf .ValueArray {if len (_gdfg )> 0{_gfef =append (_gfef ,_gdfg [0]);}else {_gfef =append (_gfef ,_fcc );};};};return _gfef ;};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_cbgd ,_eebge :=_dcfcb ("\u0046\u0049\u004e\u0044",args );if _eebge .Type !=ResultTypeEmpty {return _eebge ;};_ccbc :=_ea .ToLower (_cbgd ._bfdbg );_ffdc :=_ea .ToLower (_cbgd ._egge );if _ccbc ==""{return MakeNumberResult (1.0);};_bcaa :=_cbgd ._daeag -1;_eaceb :=1;_bbec :=0;for _dgag :=range _ffdc {if _dgag !=0{_fadc :=1;if _dgag -_bbec > 1{_fadc =2;};_eaceb +=_fadc ;};if _eaceb > _bcaa {_abfcc :=_geb .Index (_ccbc ,_ffdc [_dgag :]);if _abfcc ==0{return MakeNumberResult (float64 (_eaceb ));};};_bbec =_dgag ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// String returns a string representation of SheetPrefixExpr.
func (_dgga SheetPrefixExpr )String ()string {return _dgga ._dcecf };func _dfad (_afeg ,_eaaf ,_bbde ,_egfa ,_geced float64 )float64 {var _fed float64 ;_eada :=_geced /_bbde ;if _eada >=1{_eada =1;if _egfa ==1{_fed =_afeg ;}else {_fed =0;};}else {_fed =_afeg *_cd .Pow (1-_eada ,_egfa -1);};_eccd :=_afeg *_cd .Pow (1-_eada ,_egfa );var _bfgb float64 ;if _eccd < _eaaf {_bfgb =_fed -_eaaf ;}else {_bfgb =_fed -_eccd ;};if _bfgb < 0{_bfgb =0;};return _bfgb ;};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcggg :=args [0].AsString ();if _fcggg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_fcggg .ValueString )));};type noCache struct{};func _fdacce (_eadb ,_ccbaf Result ,_abba ,_aeff bool )cmpResult {_eadb =_eadb .AsNumber ();_ccbaf =_ccbaf .AsNumber ();if _eadb .Type !=_ccbaf .Type {return _eccb ;};if _eadb .Type ==ResultTypeNumber {if _eadb .ValueNumber ==_ccbaf .ValueNumber {return _gabf ;};if _eadb .ValueNumber < _ccbaf .ValueNumber {return _degec ;};return _aeccf ;};if _eadb .Type ==ResultTypeString {_cfac :=_eadb .ValueString ;_fegd :=_ccbaf .ValueString ;if !_abba {_cfac =_ea .ToLower (_cfac );_fegd =_ea .ToLower (_fegd );};if _aeff {_egee :=_geb .Match (_fegd ,_cfac );if _egee {return _gabf ;}else {return _aeccf ;};};return cmpResult (_ea .Compare (_cfac ,_fegd ));};if _eadb .Type ==ResultTypeEmpty {return _gabf ;};if _eadb .Type ==ResultTypeList {if len (_eadb .ValueList )< len (_ccbaf .ValueList ){return _degec ;};if len (_eadb .ValueList )> len (_ccbaf .ValueList ){return _aeccf ;};for _baac :=range _eadb .ValueList {_eeag :=_fdacce (_eadb .ValueList [_baac ],_ccbaf .ValueList [_baac ],_abba ,_aeff );if _eeag !=_gabf {return _eeag ;};};return _gabf ;};if _eadb .Type ==ResultTypeList {if len (_eadb .ValueArray )< len (_ccbaf .ValueArray ){return _degec ;};if len (_eadb .ValueArray )> len (_ccbaf .ValueArray ){return _aeccf ;};for _bbcc :=range _eadb .ValueArray {_efbb :=_eadb .ValueArray [_bbcc ];_geeg :=_eadb .ValueArray [_bbcc ];if len (_efbb )< len (_geeg ){return _degec ;};if len (_efbb )> len (_geeg ){return _aeccf ;};for _fgcb :=range _efbb {_aagbg :=_fdacce (_efbb [_fgcb ],_geeg [_fgcb ],_abba ,_aeff );if _aagbg !=_gabf {return _aagbg ;};};};return _gabf ;};return _eccb ;};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _baf (_feeb ,_baaa int )int {if _baaa ==2&&_eabc (_feeb ){return 29;}else {return _acg [_baaa -1];};};func _fdbb (_fecd string ,_dccc func (_ecca float64 )float64 )Function {return func (_cgagd []Result )Result {if len (_cgagd )!=1{return MakeErrorResult (_fecd +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cadbd :=_cgagd [0].AsNumber ();switch _cadbd .Type {case ResultTypeNumber :_ebfbf :=_dccc (_cadbd .ValueNumber );if _cd .IsNaN (_ebfbf ){return MakeErrorResult (_fecd +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _cd .IsInf (_ebfbf ,0){return MakeErrorResult (_fecd +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_ebfbf );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fecd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _cadbd ;default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fecd ,_cadbd .Type ));};};};const (_cgegb countMode =iota ;_eaafe ;_bgdf ;);

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_beec :=_ee .Now ();_ ,_ccg :=_beec .Zone ();_fdba :=_dfc +float64 (_beec .Unix ()+int64 (_ccg ))/86400;return MakeNumberResult (_fdba );};func _efgb (_daade [][]Result ,_geccg int )[][]Result {_ggab :=[][]Result {};for _bgbb :=range _daade {if _bgbb ==0{continue ;};_cddf :=[]Result {};for _dagdb :=range _daade {if _dagdb ==_geccg {continue ;};_cddf =append (_cddf ,_daade [_bgbb ][_dagdb ]);};_ggab =append (_ggab ,_cddf );};return _ggab ;};

// IsBool returns false for the invalid reference context.
func (_ccaada *ivr )IsBool (cellRef string )bool {return false };

// Update returns the same object as updating sheet references does not affect Bool.
func (_bca Bool )Update (q *_ef .UpdateQuery )Expression {return _bca };func _adbcb (_acfc ,_cddc Result ,_fbeg string )(*xargs ,Result ){if _acfc .Type !=ResultTypeList &&_acfc .Type !=ResultTypeArray {return nil ,MakeErrorResult (_fbeg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_faaa :=_dacf (_acfc );_bdeb :=[]float64 {};for _ ,_geac :=range _faaa {for _ ,_fbeed :=range _geac {if _fbeed .Type ==ResultTypeNumber &&!_fbeed .IsBoolean {_bdeb =append (_bdeb ,_fbeed .ValueNumber );}else {return nil ,MakeErrorResult (_fbeg +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_gagee :=len (_bdeb );if len (_bdeb )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _cddc .Type !=ResultTypeList &&_cddc .Type !=ResultTypeArray {return nil ,MakeErrorResult (_fbeg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_bdfce :=_dacf (_cddc );_effba :=[]float64 {};_egdc :=0.0;for _ ,_fabc :=range _bdfce {for _ ,_gbeg :=range _fabc {if _gbeg .Type ==ResultTypeNumber &&!_gbeg .IsBoolean {_aaffd :=float64 (int (_gbeg .ValueNumber ));if _aaffd < _egdc {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_effba =append (_effba ,_aaffd );_egdc =_aaffd ;}else {return nil ,MakeErrorResult (_fbeg +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_effba )!=_gagee {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_bdeb ,_effba },MakeEmptyResult ();};func _fegcb (_fbcb []Result )[]float64 {_ceged :=make ([]float64 ,0);for _ ,_egga :=range _fbcb {if _egga .Type ==ResultTypeEmpty {continue ;};_egga =_egga .AsNumber ();switch _egga .Type {case ResultTypeNumber :if !_egga .IsBoolean {_ceged =append (_ceged ,_egga .ValueNumber );};case ResultTypeList ,ResultTypeArray :_ceged =append (_ceged ,_fegcb (_egga .ListValues ())...);case ResultTypeString :default:_db .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egga .Type );};};return _ceged ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_bfdc :=len (args );if _bfdc < 3||_bfdc > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fcee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aadf :=args [2].ValueNumber ;_edcgf :=0.0;if _bfdc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_edcgf =args [3].ValueNumber ;};_cbbbg :=0.0;if _bfdc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cbbbg =args [4].ValueNumber ;if _cbbbg !=0{_cbbbg =1;};};_caac :=_gdd *(1+_fcee *_cbbbg )-_edcgf *_fcee ;_gbead :=(_aadf *_fcee +_gdd *(1+_fcee *_cbbbg ));return MakeNumberResult (_cd .Log (_caac /_gbead )/_cd .Log (1+_fcee ));};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_ffacf :=_cafb (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _ffacf .Type !=ResultTypeEmpty {return _ffacf ;};_afffb :=_egec (args );return MakeNumberResult (float64 (len (_afffb )));};func _fcec (_gbdg ,_bbcdg []float64 ,_eade float64 )Result {_deab :=false ;_agfag :=false ;for _fdg :=0;_fdg < len (_gbdg );_fdg ++{if _gbdg [_fdg ]> 0{_deab =true ;};if _gbdg [_fdg ]< 0{_agfag =true ;};};if !_deab ||!_agfag {return MakeErrorResultType (ErrorTypeNum ,"");};_bdfe :=_eade ;_aagef :=1e-10;_cbbb :=0;_bfad :=50;_adfe :=false ;for {_dcae :=_egae (_gbdg ,_bbcdg ,_bdfe );_fcgce :=_bdfe -_dcae /_aaab (_gbdg ,_bbcdg ,_bdfe );_babb :=_cd .Abs (_fcgce -_bdfe );_bdfe =_fcgce ;_cbbb ++;if _babb <=_aagef ||_cd .Abs (_dcae )<=_aagef {break ;};if _cbbb > _bfad {_adfe =true ;break ;};};if _adfe ||_cd .IsNaN (_bdfe )||_cd .IsInf (_bdfe ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_bdfe );};func _efb (_bf Result )bool {if _bf .Type ==ResultTypeString {return _bf .ValueString =="";};return _bf .ValueNumber ==0;};var _daacd =false ;const _bcc ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fbee :=args [0].ValueNumber ;if _fbee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_gegdd :=float64 (int (args [1].ValueNumber ));if _gegdd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_cd .Pow (_fbee +1,1/_gegdd )-1)*_gegdd );};func _acag (_dggb []string ,_gfed int )string {return _dd .Itoa (len (_dggb [len (_dggb )-1-_gfed ]))};

// Update returns the same object as updating sheet references does not affect Error.
func (_cgdg Error )Update (q *_ef .UpdateQuery )Expression {return _cgdg };var _gecbg =map[string ]FunctionComplex {};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_agcae :=args [0].AsString ();_gccg :=args [1].AsString ();if _agcae .Type !=ResultTypeString ||_gccg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_agcae .ValueString ==_gccg .ValueString );};func _aege ()yyParser {return &yyParserImpl {}};func (_aega *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_daea :=args [0].Ref ;for _daea .Type ==ReferenceTypeNamedRange {_daea =ctx .NamedRange (_daea .Value );};_bfac :="";switch _daea .Type {case ReferenceTypeCell :_bfac =_daea .Value ;case ReferenceTypeRange :_afeb :=_ea .Split (_daea .Value ,"\u003a");if len (_afeb )==2{_bfac =_afeb [0];};default:return MakeErrorResult (_cb .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_daea .Type ));};_gdaf ,_afbcd :=_f .ParseCellReference (_bfac );if _afbcd !=nil {return MakeErrorResult (_cb .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_afbcd .Error ()));};_acefe ,_dfac ,_aaba :=_gdaf .Column ,_gdaf .RowIdx ,_gdaf .SheetName ;_cagbb :=args [1].AsNumber ();if _cagbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_fbec :=args [2].AsNumber ();if _fbec .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _dgff ,_dga Result ;if len (args )==3{_dgff =MakeNumberResult (1);_dga =MakeNumberResult (1);}else {_dgff =args [3].AsNumber ();if _dgff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _dgff .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_dga =args [4].AsNumber ();if _dga .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _dga .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_ccf :=_f .ColumnToIndex (_acefe );_faegb :=_dfac +uint32 (_cagbb .ValueNumber );_cdgg :=_ccf +uint32 (_fbec .ValueNumber );_dfcg :=_faegb +uint32 (_dgff .ValueNumber );_aefc :=_cdgg +uint32 (_dga .ValueNumber );if _dgff .ValueNumber > 0{_dfcg --;}else {_dfcg ++;_faegb ,_dfcg =_dfcg ,_faegb ;};if _dga .ValueNumber > 0{_aefc --;}else {_aefc ++;_cdgg ,_aefc =_aefc ,_cdgg ;};_dbcb :=_cb .Sprintf ("\u0025\u0073\u0025\u0064",_f .IndexToColumn (_cdgg ),_faegb );_agbe :=_cb .Sprintf ("\u0025\u0073\u0025\u0064",_f .IndexToColumn (_aefc ),_dfcg );if _aaba ==""{return _bgggd (ctx ,ev ,_dbcb ,_agbe );}else {return _bgggd (ctx .Sheet (_aaba ),ev ,_dbcb ,_agbe );};};func _efbaf (_eafc [][]Result )float64 {if len (_eafc )==2{_gegaf :=_eafc [0][0].AsNumber ();_gebaa :=_eafc [0][1].AsNumber ();_ebeea :=_eafc [1][0].AsNumber ();_cfbdg :=_eafc [1][1].AsNumber ();if _gegaf .Type !=ResultTypeNumber ||_gebaa .Type !=ResultTypeNumber ||_ebeea .Type !=ResultTypeNumber ||_cfbdg .Type !=ResultTypeNumber {return _cd .NaN ();};return _gegaf .ValueNumber *_cfbdg .ValueNumber -_ebeea .ValueNumber *_gebaa .ValueNumber ;};_cfbc :=float64 (0);_ffefb :=float64 (1);for _gfeec :=range _eafc {_cfbc +=_ffefb *_eafc [0][_gfeec ].ValueNumber *_efbaf (_efgb (_eafc ,_gfeec ));_ffefb *=-1;};return _cfbc ;};type criteriaParsed struct{_dggf bool ;_daab float64 ;_ddfcf string ;_gfac *criteriaRegex ;};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_decc :=len (args );if _decc !=4&&_decc !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_adggg ,_efbf ,_daaa :=_fcfd (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _daaa .Type ==ResultTypeError {return _daaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afba :=args [2].ValueNumber ;if _afba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_efbg :=args [3].ValueNumber ;if _efbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbae :=0;if _decc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbae =int (args [4].ValueNumber );if !_dca (_cbae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_dadc ,_daaa :=_bgae (_adggg ,_efbf ,_cbae );if _daaa .Type ==ResultTypeError {return _daaa ;};return MakeNumberResult (_afba /(1-_efbg *_dadc ));};func _dfgc (_gdee ,_dggc float64 )bool {return _cd .Abs (_gdee -_dggc )< 1.0e-6};type yyLexer interface{Lex (_baeed *yySymType )int ;Error (_bggd string );};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_ddbfa :=args [0];if _ddbfa .Type ==ResultTypeError {return _ddbfa ;};if _ddbfa .Type !=ResultTypeString &&_ddbfa .Type !=ResultTypeNumber &&_ddbfa .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_feee :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dccbg :=int (args [1].ValueNumber );if _dccbg < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_eeddf :=int (args [2].ValueNumber );if _eeddf < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_gcbce :=len (_feee );if _dccbg > _gcbce {return MakeStringResult ("");};_dccbg --;_gacf :=_dccbg +_eeddf ;if _gacf > _gcbce {return MakeStringResult (_feee [_dccbg :]);}else {return MakeStringResult (_feee [_dccbg :_gacf ]);};};func init (){_cgfg ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_dadb :=len (args );if _dadb !=6&&_dadb !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_afdc ,_fcfa ,_dgfb :=_fcfd (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _dgfb .Type ==ResultTypeError {return _dgfb ;};_ecaee :=args [2];if _ecaee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fabbc :=_ecaee .ValueNumber ;if _fabbc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_ccbb :=args [3];if _ccbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebgg :=_ccbb .ValueNumber ;if _ebgg <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_bgab :=args [4];if _bgab .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_aafc :=_bgab .ValueNumber ;if _aafc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_deffe :=args [5];if _deffe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_beaf :=float64 (int (_deffe .ValueNumber ));if !_egcf (_beaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_egafa :=0;if _dadb ==7&&args [6].Type !=ResultTypeEmpty {_eafe :=args [6];if _eafe .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_egafa =int (_eafe .ValueNumber );if !_dca (_egafa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_dbbee :=0.0;_efaag :=0.0;_dede :=1.0;_eddg ,_dgfb :=_cgfc (_afdc ,_fcfa ,_fabbc ,_efaag ,_aafc ,_beaf ,_egafa );if _dgfb .Type ==ResultTypeError {return _dgfb ;};_fddb ,_dgfb :=_cgfc (_afdc ,_fcfa ,_fabbc ,_dede ,_aafc ,_beaf ,_egafa );if _dgfb .Type ==ResultTypeError {return _dgfb ;};_gdbf :=(_dede -_efaag )*0.5;for _fdcg :=0;_fdcg < 100&&_dbbee !=_ebgg ;_fdcg ++{_dbbee ,_dgfb =_cgfc (_afdc ,_fcfa ,_fabbc ,_gdbf ,_aafc ,_beaf ,_egafa );if _dgfb .Type ==ResultTypeError {return _dgfb ;};if _ebgg ==_eddg {return MakeNumberResult (_efaag );}else if _ebgg ==_fddb {return MakeNumberResult (_dede );}else if _ebgg ==_dbbee {return MakeNumberResult (_gdbf );}else if _ebgg < _fddb {_dede *=2.0;_fddb ,_dgfb =_cgfc (_afdc ,_fcfa ,_fabbc ,_dede ,_aafc ,_beaf ,_egafa );if _dgfb .Type ==ResultTypeError {return _dgfb ;};_gdbf =(_dede -_efaag )*0.5;}else {if _ebgg < _dbbee {_efaag =_gdbf ;_eddg =_dbbee ;}else {_dede =_gdbf ;_fddb =_dbbee ;};_gdbf =_dede -(_dede -_efaag )*((_ebgg -_fddb )/(_eddg -_fddb ));};};return MakeNumberResult (_gdbf );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _dgdbf (args ,_acfd )};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_ebea :=len (args );if _ebea < 3||_ebea > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dbeg :=args [1].ValueNumber ;if _dbeg !=float64 (int (_dbeg )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_befff :=args [2].ValueNumber ;_bbbf :=0.0;if _ebea >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbbf =args [3].ValueNumber ;};_efafa :=0;if _ebea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_efafa =int (args [4].ValueNumber );if _efafa !=0{_efafa =1;};};return MakeNumberResult (_bdce (_fdc ,_dbeg ,_befff ,_bbbf ,_efafa ));};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_adgdb :=args [0].AsString ();if _adgdb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfae :=_ca .Buffer {};for _ ,_dcded :=range _adgdb .ValueString {if _d .IsPrint (_dcded ){_gfae .WriteRune (_dcded );};};return MakeStringResult (_gfae .String ());};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gaf :=args [0];switch _gaf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_fef :=_cdb (_gaf .ValueNumber );return MakeNumberResult (float64 (_fef .Day ()));case ResultTypeString :_dbfb :=_ea .ToLower (_gaf .ValueString );if !_cca (_dbfb ){_ ,_ ,_ ,_ ,_gebf ,_cfbd :=_bfe (_dbfb );if _cfbd .Type ==ResultTypeError {_cfbd .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _cfbd ;};if _gebf {return MakeNumberResult (0);};};_ ,_ ,_aec ,_ ,_gag :=_dff (_dbfb );if _gag .Type ==ResultTypeError {return _gag ;};return MakeNumberResult (float64 (_aec ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};const _fec ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_fbg +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";const _eecea =57355;

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_dcecf string };type node struct{_dgfdea tokenType ;_acfe string ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_ecgb (args ,_eaafe ))};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_faegc ,_dedca :=_dd .ParseFloat (v ,64);if _dedca !=nil {_db .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_dedca );};return Number {_fcfe :_faegc };};func _eadf (_ggagg Reference ,_aeccd Context )bool {return _aeccd .Sheet (_ggagg .Value )==InvalidReferenceContext ;};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_fcdb :=args [0].ValueNumber ;if _fcdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_eeca :=float64 (int (args [1].ValueNumber ));if _eeca < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_cd .Pow ((1+_fcdb /_eeca ),_eeca )-1);};

// Reference returns a string reference value to a horizontal range with prefix.
func (_eacag PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_abdc :=_eacag ._edfe .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_eacag .horizontalRangeReference (_abdc .Value )};};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_egcgg :=args [0].AsNumber ();if _egcgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fafe :=10.0;if len (args )> 1{_eefa :=args [1].AsNumber ();if _eefa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_fafe =args [1].ValueNumber ;};if _egcgg .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _fafe ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_cd .Log (_egcgg .ValueNumber )/_cd .Log (_fafe ));};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_cdg [][]Expression };func _ceba (_dbfbd yyLexer ,_adfc *yySymType )(_abfg ,_bgdeg int ){_bgdeg =0;_abfg =_dbfbd .Lex (_adfc );if _abfg <=0{_bgdeg =_gdbfb [0];goto _afggb ;};if _abfg < len (_gdbfb ){_bgdeg =_gdbfb [_abfg ];goto _afggb ;};if _abfg >=_eddfd {if _abfg < _eddfd +len (_aaede ){_bgdeg =_aaede [_abfg -_eddfd ];goto _afggb ;};};for _dbcaa :=0;_dbcaa < len (_aacb );_dbcaa +=2{_bgdeg =_aacb [_dbcaa +0];if _bgdeg ==_abfg {_bgdeg =_aacb [_dbcaa +1];goto _afggb ;};};_afggb :if _bgdeg ==0{_bgdeg =_aaede [1];};if _dbged >=3{_cb .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_gecg (_bgdeg ),uint (_abfg ));};return _abfg ,_bgdeg ;};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfge :=args [0].AsNumber ();if _dfge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_cd .Pi *_dfge .ValueNumber );};func _aagg (_cfba []Result ,_bcdaa string )(float64 ,float64 ,Result ){if len (_cfba )!=2{return 0,0,MakeErrorResult (_bcdaa +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _cfba [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bcdaa +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cced :=_cfba [0].ValueNumber ;if _cfba [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bcdaa +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gebg :=float64 (int (_cfba [1].ValueNumber ));if _gebg < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_bcdaa +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _cced ,_gebg ,_fcc ;};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_ea .NewReader (s ));};func (_bgdb *evCache )GetFromCache (key string )(Result ,bool ){_bgdb ._gg .Lock ();_aga ,_ffd :=_bgdb ._fa [key ];_bgdb ._gg .Unlock ();return _aga ,_ffd ;};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dabfg ,_ecccg ,_dgcf :=_fcfd (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _dgcf .Type ==ResultTypeError {return _dgcf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeeg :=_ecccg -_dabfg ;if _aeeg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dbfe :=args [2].ValueNumber ;if _dbfe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcfd :=(100-_dbfe )/_dbfe ;_eabfd :=360/_aeeg ;return MakeNumberResult (_bcfd *_eabfd );};

// String returns a string of a range.
func (_gcea Range )String ()string {return _cb .Sprintf ("\u0025\u0073\u003a%\u0073",_gcea ._bgaad .String (),_gcea ._eeebc .String ());};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_cdbg :=_cafb (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _cdbg .Type !=ResultTypeEmpty {return _cdbg ;};_dgcgf :=_egec (args [1:]);_bagb :=0.0;_agag :=_dacf (args [0]);for _ ,_baba :=range _dgcgf {_bagb +=_agag [_baba ._fedb ][_baba ._ggafd ].ValueNumber ;};return MakeNumberResult (float64 (_bagb ));};func (_aeffb *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_egcg :=len (args );if _egcg !=4&&_egcg !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ceef :=args [0].ValueNumber ;if _ceef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddba :=args [1].ValueNumber ;if _ddba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffcg :=args [2].ValueNumber ;if _ffcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgef :=args [3].ValueNumber ;if _dgef < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _dgef > _ffcg {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_fadeg :=2.0;if _egcg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fadeg =args [4].ValueNumber ;if _fadeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_dfad (_ceef ,_ddba ,_ffcg ,_dgef ,_fadeg ));};func _bagf (_ccd ,_gcbf _ee .Time ,_ddfa int )_ee .Time {_bbad :=_ee .Date (_ccd .Year (),_gcbf .Month (),_gcbf .Day (),0,0,0,0,_ee .UTC );if _bbad .After (_ccd ){_bbad =_bbad .AddDate (-1,0,0);};for !_bbad .After (_ccd ){_bbad =_bbad .AddDate (0,12/_ddfa ,0);};return _bbad ;};func _ccdeb (_afcd Result ,_bfgba ,_agfdf string )(string ,Result ){switch _afcd .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _afcd .Value (),_fcc ;default:return "",MakeErrorResult (_bfgba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_agfdf +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _dcaed (_dfed []Result ,_eacad bool )Result {_gaee :="\u004d\u0041\u0058";if _eacad {_gaee ="\u004d\u0041\u0058\u0041";};if len (_dfed )==0{return MakeErrorResult (_gaee +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_begcf :=-_cd .MaxFloat64 ;for _ ,_ddgbb :=range _dfed {switch _ddgbb .Type {case ResultTypeNumber :if (_eacad ||!_ddgbb .IsBoolean )&&_ddgbb .ValueNumber > _begcf {_begcf =_ddgbb .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_abdd :=_dcaed (_ddgbb .ListValues (),_eacad );if _abdd .ValueNumber > _begcf {_begcf =_abdd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_eadbg :=0.0;if _eacad {_eadbg =_ddgbb .AsNumber ().ValueNumber ;};if _eadbg > _begcf {_begcf =_eadbg ;};default:_db .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_gaee +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddgbb .Type );};};if _begcf ==-_cd .MaxFloat64 {_begcf =0;};return MakeNumberResult (_begcf );};func _agead (_gfbc ,_cabc ,_adcf ,_fffe ,_bbbe float64 ,_fbcf int )float64 {_fegg :=_aeda (_gfbc ,_adcf ,_fffe ,_bbbe ,_fbcf );var _eaba float64 ;if _cabc ==1{if _fbcf ==1{_eaba =0;}else {_eaba =-_fffe ;};}else {if _fbcf ==1{_eaba =_bdce (_gfbc ,_cabc -2,_fegg ,_fffe ,1)-_fegg ;}else {_eaba =_bdce (_gfbc ,_cabc -1,_fegg ,_fffe ,0);};};return _eaba *_gfbc ;};func _cgfc (_gfdeb ,_gfbb ,_afga ,_ecag ,_aefgc ,_efea float64 ,_cdeec int )(float64 ,Result ){_dddf :=int (_efea );_cadc :=_efed (_gfdeb ,_gfbb ,_dddf ,_cdeec );_cedf :=_aceda (_gfdeb ,_gfbb ,_dddf ,_cdeec )/_cadc ;_dagg ,_abed :=_baag (_gfdeb ,_gfbb ,_dddf ,_cdeec );if _abed .Type ==ResultTypeError {return 0,_abed ;};_gcbdg :=_effe (_gfdeb ,_gfbb ,_dddf ,_cdeec );_ebcc :=_aefgc /_cd .Pow (1+_ecag /_efea ,_dagg -1+_cedf );_ebcc -=100*_afga /_efea *_gcbdg /_cadc ;_eeddb :=100*_afga /_efea ;_fcccg :=1+_ecag /_efea ;for _deae :=0.0;_deae < _dagg ;_deae ++{_ebcc +=_eeddb /_cd .Pow (_fcccg ,_deae +_cedf );};return _ebcc ,MakeEmptyResult ();};var _bgca ,_cbbg ,_eeeg ,_dgaa ,_fcbg ,_gggc ,_cgebb ,_eabac ,_gbfc ,_faac ,_bcbf ,_gefc ,_ebaab ,_ecef ,_aebce *_gd .Regexp ;

// String returns a string representation of a vertical range with prefix.
func (_dbfff PrefixVerticalRange )String ()string {return _cb .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dbfff ._feccb .String (),_dbfff ._gadf ,_dbfff ._agbc );};var _fcg =[]*_gd .Regexp {};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func _bcg (_feebe int )bool {return _feebe ==0||_feebe ==4};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _edeb (args ,true )};

// Update updates references in the VerticalRange after removing a row/column.
func (_agbd VerticalRange )Update (q *_ef .UpdateQuery )Expression {if q .UpdateType ==_ef .UpdateActionRemoveColumn {_afcfd :=_agbd ;if q .UpdateCurrentSheet {_eacf :=q .ColumnIdx ;_afcfd ._ccdcd =_dg (_agbd ._ccdcd ,_eacf );_afcfd ._ggfec =_dg (_agbd ._ggfec ,_eacf );};return _afcfd ;};return _agbd ;};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_ecgb (args ,_bgdf ));};

// Reference returns a string reference value to a vertical range.
func (_aefd VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_aefd .verticalRangeReference ()};};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fede :=args [0].Ref ;if _fede .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_fede .Value ,ev ).IsBoolean );};func _da (_bb ,_eeb [][]Result )bool {if len (_bb )!=len (_eeb ){return false ;};for _de :=range _bb {if len (_bb [_de ])!=len (_eeb [_de ]){return false ;};};return true ;};type xargs struct{_gfbd []float64 ;_ggfb []float64 ;};func _egca (_bged ,_gcbe Expression )(Expression ,Expression ,error ){_ebedc ,_ebef :=_bged .(CellRef );if !_ebef {return nil ,nil ,_b .New (_cb .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_bged .String ()));};_adbce ,_ebef :=_gcbe .(CellRef );if !_ebef {return nil ,nil ,_b .New (_cb .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_gcbe .String ()));};_cefdb ,_cdcbc :=_f .ParseCellReference (_ebedc ._ecg );if _cdcbc !=nil {return nil ,nil ,_cdcbc ;};_edba ,_fcdf :=_f .ParseCellReference (_adbce ._ecg );if _fcdf !=nil {return nil ,nil ,_fcdf ;};_cbda :=false ;if _cefdb .RowIdx > _edba .RowIdx {_cbda =true ;_cefdb .RowIdx ,_edba .RowIdx =_edba .RowIdx ,_cefdb .RowIdx ;};if _cefdb .ColumnIdx > _edba .ColumnIdx {_cbda =true ;_cefdb .ColumnIdx ,_edba .ColumnIdx =_edba .ColumnIdx ,_cefdb .ColumnIdx ;_cefdb .Column ,_edba .Column =_edba .Column ,_cefdb .Column ;};if _cbda {return NewCellRef (_cefdb .String ()),NewCellRef (_edba .String ()),nil ;};return _bged ,_gcbe ,nil ;};

// String returns an empty string for Error.
func (_gdb Error )String ()string {return ""};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_accg :=ctx .GetEpoch ();_bagd ,_fbed :=_ddgdb (args [0].Value (),_accg );if _fbed !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dfcb :=_bagd .Year ();return MakeBoolResult (_eabc (_dfcb ));};func (_dcba ResultType )String ()string {if _dcba >=ResultType (len (_bcffg )-1){return _cb .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_dcba );};return _cdea [_bcffg [_dcba ]:_bcffg [_dcba +1]];};var _beb =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffba :=args [0].AsNumber ();if _ffba .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcef :=float64 (1);if _ffba .ValueNumber < 0{_gcef =-1;};if len (args )> 1{_decgf :=args [1].AsNumber ();if _decgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_gcef =_decgf .ValueNumber ;};_dadgg :=float64 (1);if len (args )> 2{_cagf :=args [2].AsNumber ();if _cagf .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dadgg =_cagf .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cd .Floor (_ffba .ValueNumber ));};_bbcb :=_ffba .ValueNumber ;_bbcb ,_agbeg :=_cd .Modf (_bbcb /_gcef );if _agbeg !=0&&_ffba .ValueNumber < 0&&_dadgg > 0{_bbcb ++;};return MakeNumberResult (_bbcb *_gcef );};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecgac :=args [0].AsNumber ();if _ecgac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_cd .Pi /180.0*_ecgac .ValueNumber );};func _cafb (_ecba []Result ,_fffba bool ,_cege string )Result {var _cebf ,_feea string ;if _fffba {_cebf ="\u0074\u0068\u0072e\u0065";_feea ="\u006f\u0064\u0064";}else {_cebf ="\u0074\u0077\u006f";_feea ="\u0065\u0076\u0065\u006e";};_ecfff :=len (_ecba );if (_fffba &&_ecfff < 3)||(!_fffba &&_ecfff < 2){return MakeErrorResult (_cege +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_cebf +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_ecfff /2*2==_ecfff )==_fffba {return MakeErrorResult (_cege +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_feea +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_eeeb :=-1;_dbcba :=-1;for _ddbf :=0;_ddbf < _ecfff ;_ddbf +=2{_aecae :=_ecba [_ddbf ];if _aecae .Type !=ResultTypeArray &&_aecae .Type !=ResultTypeList {return MakeErrorResult (_cege +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_dcce :=_dacf (_aecae );if _dbcba ==-1{_dbcba =len (_dcce );_eeeb =len (_dcce [0]);}else if len (_dcce )!=_dbcba ||len (_dcce [0])!=_eeeb {return MakeErrorResult (_cege +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _fffba &&_ddbf ==0{_ddbf --;};};return _fcc ;};func _abgf (_gefb ,_bbdb ,_cefa ,_cbeg int )int {if _bbdb > _cefa {return 0;};if _bcg (_cbeg ){return (_cefa -_bbdb +1)*30;};_egdg :=0;for _fcef :=_bbdb ;_fcef <=_cefa ;_fcef ++{_egdg +=_baf (_gefb ,_fcef );};return _egdg ;};const _cdf ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";func _ccde (_deff []Result ,_fccc string )(*amorArgs ,Result ){_bge :=len (_deff );if _bge !=6&&_bge !=7{return nil ,MakeErrorResult (_fccc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _deff [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fccc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_adc :=_deff [0].ValueNumber ;if _adc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fccc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_bfce ,_bdef :=_bgg (_deff [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_fccc );if _bdef .Type ==ResultTypeError {return nil ,_bdef ;};_fdff ,_bdef :=_bgg (_deff [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_fccc );if _bdef .Type ==ResultTypeError {return nil ,_bdef ;};if _fdff < _bfce {return nil ,MakeErrorResultType (ErrorTypeNum ,_fccc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _deff [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fccc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccgf :=_deff [3].ValueNumber ;if _ccgf < 0||_ccgf > _adc {return nil ,MakeErrorResultType (ErrorTypeNum ,_fccc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _deff [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fccc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fecca :=int (_deff [4].ValueNumber );if _fecca < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fccc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _deff [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fccc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fgdg :=_deff [5].ValueNumber ;if _fgdg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fccc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_gedg :=0;if _bge ==7&&_deff [6].Type !=ResultTypeEmpty {if _deff [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fccc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gedg =int (_deff [6].ValueNumber );if !_dca (_gedg )||_gedg ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_fccc );};};return &amorArgs {_adc ,_bfce ,_fdff ,_ccgf ,_fecca ,_fgdg ,_gedg },_fcc ;};const _badd =57362;

// Reference returns a string reference value to a cell.
func (_bdf CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_bdf ._ecg };};var _bgd =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_afceaa :=args [0].AsNumber ();if _afceaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_caab :=float64 (1);if _afceaa .ValueNumber < 0{_caab =-1;};if len (args )> 1{_ebee :=args [1].AsNumber ();if _ebee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_caab =_ebee .ValueNumber ;};_ecffg :=float64 (1);if len (args )> 2{_efbe :=args [2].AsNumber ();if _efbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_ecffg =_efbe .ValueNumber ;};if len (args )==1{return MakeNumberResult (_cd .Ceil (_afceaa .ValueNumber ));};_dbbg :=_afceaa .ValueNumber ;_dbbg ,_agbbg :=_cd .Modf (_dbbg /_caab );if _agbbg !=0{if _afceaa .ValueNumber > 0{_dbbg ++;}else if _ecffg < 0{_dbbg --;};};return MakeNumberResult (_dbbg *_caab );};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdde :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bfag :=args [2].ValueNumber +1;if _bfag ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ffdf :=_dacf (args [0]);_bcge :=float64 (len (_ffdf ));_gfdga ,_eeaa :=0.0,0.0;_aff ,_edfa :=1.0,1.0;_dfdf ,_abaa :=false ,false ;for _ ,_afce :=range _ffdf {for _ ,_afcf :=range _afce {if _afcf .Type ==ResultTypeNumber &&!_afcf .IsBoolean {_adde :=_afcf .ValueNumber ;if _adde ==0{continue ;}else {if _adde > 0{_dfdf =true ;_eeaa +=_afcf .ValueNumber *_edfa ;}else {_abaa =true ;_gfdga +=_afcf .ValueNumber *_aff ;};_aff /=_bdde ;_edfa /=_bfag ;};};};};if !_dfdf ||!_abaa {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bfab :=-_eeaa /_gfdga ;_bfab *=_cd .Pow (_bfag ,_bcge -1);_bfab =_cd .Pow (_bfab ,1/(_bcge -1));return MakeNumberResult (_bfab -1);};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_cgag :=len (args );if _cgag < 3||_cgag > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdcee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdbde :=args [1].ValueNumber ;if _cdbde ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bacg :=args [2].ValueNumber ;_agef :=0.0;if _cgag >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agef =args [3].ValueNumber ;};_cfdf :=0.0;if _cgag ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfdf =args [4].ValueNumber ;if _cfdf !=0{_cfdf =1;};};var _dadd float64 ;if _bdcee ==0{_dadd =(_bacg +_agef )/_cdbde ;}else {_acgf :=_cd .Pow (1+_bdcee ,_cdbde );if _cfdf ==1{_dadd =(_agef *_bdcee /(_acgf -1)+_bacg *_bdcee /(1-1/_acgf ))/(1+_bdcee );}else {_dadd =_agef *_bdcee /(_acgf -1)+_bacg *_bdcee /(1-1/_acgf );};};return MakeNumberResult (-_dadd );};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// Negate is a negate expression like -A1.
type Negate struct{_ebfdf Expression };func _egae (_cfce ,_daeb []float64 ,_fadg float64 )float64 {_dccd :=_fadg +1;_gdca :=_cfce [0];_cagg :=len (_cfce );_fdde :=_daeb [0];for _becb :=1;_becb < _cagg ;_becb ++{_gdca +=_cfce [_becb ]/_cd .Pow (_dccd ,(_daeb [_becb ]-_fdde )/365);};return _gdca ;};func _gbdgb (_caedb string )*criteriaRegex {_fccce :=&criteriaRegex {};if _caedb ==""{return _fccce ;};if _aede :=_bdeg .FindStringSubmatch (_caedb );len (_aede )> 1{_fccce ._bfbg =_fafdf ;_fccce ._cgfbcc =_aede [1];}else if _geacc :=_bgfda .FindStringSubmatch (_caedb );len (_geacc )> 1{_fccce ._bfbg =_fafdf ;_fccce ._cgfbcc =_geacc [1];}else if _bfcae :=_faecc .FindStringSubmatch (_caedb );len (_bfcae )> 1{_fccce ._bfbg =_dgbg ;_fccce ._cgfbcc =_bfcae [1];}else if _cddfe :=_ceda .FindStringSubmatch (_caedb );len (_cddfe )> 1{_fccce ._bfbg =_debfe ;_fccce ._cgfbcc =_cddfe [1];}else if _cdgac :=_ccgc .FindStringSubmatch (_caedb );len (_cdgac )> 1{_fccce ._bfbg =_acaaa ;_fccce ._cgfbcc =_cdgac [1];}else if _bcff :=_gafg .FindStringSubmatch (_caedb );len (_bcff )> 1{_fccce ._bfbg =_ccedf ;_fccce ._cgfbcc =_bcff [1];};return _fccce ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_beecc ,_cdeed :=_dcfcb ("\u0046\u0049\u004e\u0044",args );if _cdeed .Type !=ResultTypeEmpty {return _cdeed ;};_aegcd :=_beecc ._bfdbg ;if _aegcd ==""{return MakeNumberResult (1.0);};_agbeb :=_beecc ._egge ;_efef :=_beecc ._daeag -1;_adcdb :=1;_deba :=0;for _aecf :=range _agbeb {if _aecf !=0{_dbcef :=1;if _aecf -_deba > 1{_dbcef =2;};_adcdb +=_dbcef ;};if _adcdb > _efef {_bdaf :=_ea .Index (_agbeb [_aecf :],_aegcd );if _bdaf ==0{return MakeNumberResult (float64 (_adcdb ));};};_deba =_aecf ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _ccge (args ,true )};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_bdg Context ,formula string )Result ;SetCache (_egg string ,_bag Result );GetFromCache (_dcb string )(Result ,bool );LastEvalIsRef ()bool ;};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggeab :=args [0];_eagg :=args [1];if _eagg .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dgb :=args [2].AsNumber ();if _dgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eeddc :=false ;if len (args )==4{_faef :=args [3].AsNumber ();if _faef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _faef .ValueNumber ==0{_eeddc =true ;};};_edea :=-1;_gefba :=false ;if len (_eagg .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_eabg :=_eagg .ValueArray [0];_cgfa :for _baage ,_geacd :=range _eabg {switch _fdacce (_geacd ,_ggeab ,false ,_eeddc ){case _degec :_edea =_baage ;case _gabf :_edea =_baage ;_gefba =true ;break _cgfa ;};};if _edea ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cbbe :=int (_dgb .ValueNumber )-1;if _cbbe < 0||_cbbe > len (_eagg .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_eabg =_eagg .ValueArray [_cbbe ];if _edea < 0||_edea >=len (_eabg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _gefba ||!_eeddc {return _eabg [_edea ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_bfage PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_afcda :=_bfage ._feccb .Reference (ctx ,ev );switch _afcda .Type {case ReferenceTypeSheet :if _eadf (_afcda ,ctx ){return MakeErrorResultType (ErrorTypeName ,_cb .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_afcda .Value ));};_adaac :=_bfage .verticalRangeReference (_afcda .Value );if _ebdbe ,_fcdce :=ev .GetFromCache (_adaac );_fcdce {return _ebdbe ;};_cecg :=ctx .Sheet (_afcda .Value );_dcbede ,_bfda :=_fefc (_cecg ,_bfage ._gadf ,_bfage ._agbc );_cceef :=_bgggd (_cecg ,ev ,_dcbede ,_bfda );ev .SetCache (_adaac ,_cceef );return _cceef ;default:return MakeErrorResult (_cb .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afcda .Type ));};};func (_gfbbg PrefixVerticalRange )verticalRangeReference (_aabedd string )string {return _cb .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_aabedd ,_gfbbg ._gadf ,_gfbbg ._agbc );};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_gadg ,_effb ,_gffc :=_aagg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _gffc .Type ==ResultTypeError {return _gffc ;};if _effb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _gadg ==0{return MakeNumberResult (0);};_ddbae :=_gadg < 0;if _ddbae {_gadg =-_gadg ;};_ecfc :=float64 (int (_gadg ));_aefb :=args [0].Value ();_dgge :=_ea .Split (_aefb ,"\u002e");_cbgb :=0.0;if len (_dgge )> 1{var _bcdb error ;_ffcd :=_dgge [1];_cbgb ,_bcdb =_dd .ParseFloat (_ffcd ,64);if _bcdb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_bade :=float64 (len (_ffcd ));_cbgb /=_cd .Pow (10,_bade );};_dege :=_cbgb *_effb /_cd .Pow (10,float64 (int (_cd .Log10 (_effb )))+1)+_ecfc ;if _ddbae {_dege =-_dege ;};return MakeNumberResult (_dege );};

// Eval evaluates and returns the result of the cell reference.
func (_ae CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_ae ._ecg ,ev )};func _fg (_ac BinOpType ,_ab [][]Result ,_dbb Result )Result {_ec :=[][]Result {};for _caa :=range _ab {_gda :=_bff (_ac ,_ab [_caa ],_dbb );if _gda .Type ==ResultTypeError {return _gda ;};_ec =append (_ec ,_gda .ValueList );};return MakeArrayResult (_ec );};

// Eval evaluates the binary expression using the context given.
func (_gfc BinaryExpr )String ()string {_cef :="";switch _gfc ._ad {case BinOpTypePlus :_cef ="\u002b";case BinOpTypeMinus :_cef ="\u002d";case BinOpTypeMult :_cef ="\u002a";case BinOpTypeDiv :_cef ="\u002f";case BinOpTypeExp :_cef ="\u005e";case BinOpTypeLT :_cef ="\u003c";case BinOpTypeGT :_cef ="\u003e";case BinOpTypeEQ :_cef ="\u003d";case BinOpTypeLEQ :_cef ="\u003c\u003d";case BinOpTypeGEQ :_cef ="\u003e\u003d";case BinOpTypeNE :_cef ="\u003c\u003e";case BinOpTypeConcat :_cef ="\u0026";};return _gfc ._ba .String ()+_cef +_gfc ._af .String ();};func _fcfb (_dbca string )bool {for _ ,_dbbe :=range _ged {_cfe :=_dbbe .FindStringSubmatch (_dbca );if len (_cfe )> 1{return true ;};};return false ;};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _dgdbf (args ,_edeab )};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_fefed Expression ;_dcec Expression ;};

// HasFormula returns FALSE for the invalid reference context.
func (_aagba *ivr )HasFormula (cellRef string )bool {return false };

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebd :=args [0].AsNumber ();if _ebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cdcfc :=float64 (1);if _ebd .ValueNumber < 0{_cdcfc =-1;};if len (args )> 1{_gfedb :=args [1].AsNumber ();if _gfedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cdcfc =_cd .Abs (_gfedb .ValueNumber );};if len (args )==1{return MakeNumberResult (_cd .Ceil (_ebd .ValueNumber ));};_gbcc :=_ebd .ValueNumber ;_gbcc ,_eacb :=_cd .Modf (_gbcc /_cdcfc );if _eacb !=0{if _ebd .ValueNumber > 0{_gbcc ++;};};return MakeNumberResult (_gbcc *_cdcfc );};

// Reference returns a string reference value to a vertical range with prefix.
func (_ggcg PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_abffc :=_ggcg ._feccb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_ggcg .verticalRangeReference (_abffc .Value )};};func _cdeb (_efgg int )int {if _efgg < 1900{if _efgg < 30{_efgg +=2000;}else {_efgg +=1900;};};return _efgg ;};

// Match implements the MATCH function.
func Match (args []Result )Result {_ddfg :=len (args );if _ddfg !=2&&_ddfg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gdde :=1;if _ddfg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_aegff :=args [2].ValueNumber ;if _aegff ==-1||_aegff ==0{_gdde =int (_aegff );};};_ggag :=args [1];var _caacg []Result ;switch _ggag .Type {case ResultTypeList :_caacg =_ggag .ValueList ;case ResultTypeArray :_gfeg :=_ggag .ValueArray ;for _ ,_ffcc :=range _gfeg {if len (_ffcc )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_caacg =append (_caacg ,_ffcc [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_accdb :=_cacde (args [0]);switch _gdde {case 0:for _acce ,_bafgc :=range _caacg {if _gafc (_bafgc ,_accdb ){return MakeNumberResult (float64 (_acce +1));};};case -1:for _fabe :=0;_fabe < len (_caacg );_fabe ++{if _gafc (_caacg [_fabe ],_accdb ){return MakeNumberResult (float64 (_fabe +1));};if _accdb ._dggf &&(_caacg [_fabe ].ValueNumber < _accdb ._daab ){if _fabe ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fabe ));};};case 1:for _egdaf :=0;_egdaf < len (_caacg );_egdaf ++{if _gafc (_caacg [_egdaf ],_accdb ){return MakeNumberResult (float64 (_egdaf +1));};if _accdb ._dggf &&(_caacg [_egdaf ].ValueNumber > _accdb ._daab ){if _egdaf ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_egdaf ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_gabgf :=len (args );if _gabgf < 4||_gabgf > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bfff :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_decaa :=args [1].ValueNumber ;if _decaa <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beedb :=args [2].ValueNumber ;if _beedb < _decaa {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_afcea :=args [3].ValueNumber ;_cece :=0.0;if _gabgf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cece =args [4].ValueNumber ;};_gace :=0;if _gabgf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gace =int (args [5].ValueNumber );if _gace !=0{_gace =1;};};return MakeNumberResult (_aeda (_bfff ,_beedb ,_afcea ,_cece ,_gace )-_agead (_bfff ,_decaa ,_beedb ,_afcea ,_cece ,_gace ));};

// Eval evaluates a vertical range returning a list of results or an error.
func (_ccegd VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_feeeg :=_ccegd .verticalRangeReference ();if _fffbc ,_fbef :=ev .GetFromCache (_feeeg );_fbef {return _fffbc ;};_gecae ,_bdbgg :=_fefc (ctx ,_ccegd ._ccdcd ,_ccegd ._ggfec );_adfag :=_bgggd (ctx ,ev ,_gecae ,_bdbgg );ev .SetCache (_feeeg ,_adfag );return _adfag ;};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_cdg :data }};const _bbe ="\u005e\u0028\u0028"+_cag +"\u007c"+_gae +"\u007c"+_eag +"\u007c"+_fec +"\u0029\u0020\u0029\u003f";

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ddfba :=[]float64 {};for _ ,_gbcg :=range args {switch _gbcg .Type {case ResultTypeString :_cbcd :=_gbcg .AsNumber ();if _cbcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ddfba =append (_ddfba ,_cbcd .ValueNumber );case ResultTypeList :_cgfef :=LCM (_gbcg .ValueList );if _cgfef .Type !=ResultTypeNumber {return _cgfef ;};_ddfba =append (_ddfba ,_cgfef .ValueNumber );case ResultTypeNumber :_ddfba =append (_ddfba ,_gbcg .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _gbcg ;};};if len (_ddfba )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _ddfba [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_ddfba )==1{return MakeNumberResult (_ddfba [0]);};_dgab :=_ddfba [0];for _fcfff :=1;_fcfff < len (_ddfba );_fcfff ++{if _ddfba [_fcfff ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dgab =_cgdea (_dgab ,_ddfba [_fcfff ]);};return MakeNumberResult (_dgab );};const _ecbb =57359;

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _ccge (args ,false )};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_ea .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_dfcbb :v };};const _fbg ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";func _ggee (_efc ,_edg int64 )float64 {return float64 (int (0.5+float64 ((_edg -_efc )/86400)))};

// SetLocked does nothing for the invalid reference context.
func (_aabce *ivr )SetLocked (cellRef string ,locked bool ){};func _cgfg (){_bdeg =_gd .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_bgfda =_gd .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_ccgc =_gd .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_gafg =_gd .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_faecc =_gd .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_ceda =_gd .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func _bdce (_ebbef ,_gbb ,_bfcg ,_cbef float64 ,_aaf int )float64 {var _dedc float64 ;if _ebbef ==0{_dedc =_cbef +_bfcg *_gbb ;}else {_eagb :=_cd .Pow (1+_ebbef ,_gbb );if _aaf ==1{_dedc =_cbef *_eagb +_bfcg *(1+_ebbef )*(_eagb -1)/_ebbef ;}else {_dedc =_cbef *_eagb +_bfcg *(_eagb -1)/_ebbef ;};};return -_dedc ;};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_dcc :=len (args );if _dcc !=4&&_dcc !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcdg ,_cfdc ,_ccaad :=_fcfd (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _ccaad .Type ==ResultTypeError {return _ccaad ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bdbd :=args [2].ValueNumber ;if _bdbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_beaa :=args [3].ValueNumber ;if _beaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_ebae :=0;if _dcc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ebae =int (args [4].ValueNumber );if !_dca (_ebae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_dcde ,_ccaad :=_bgae (_fcdg ,_cfdc ,_ebae );if _ccaad .Type ==ResultTypeError {return _ccaad ;};return MakeNumberResult ((_beaa -_bdbd )/_bdbd /_dcde );};func _fbga (_ggf ,_edeg ,_adg ,_ddc int )int {if !_bcg (_ddc ){return _adg ;};_beab :=_adg ;_gdad :=_baf (_ggf ,_edeg );if _beab > 30||_adg >=_gdad ||_beab >=_gdad {_beab =30;};return _beab ;};func _gafc (_eeed Result ,_dgdfg *criteriaParsed )bool {if _eeed .Type ==ResultTypeEmpty {return false ;};if _dgdfg ._dggf {return _eeed .ValueNumber ==_dgdfg ._daab ;}else {_cdafa :=_ea .ToLower (_eeed .ValueString );return _dgdfg ._ddfcf ==_cdafa ||_geb .Match (_dgdfg ._ddfcf ,_cdafa );};};const _edbf =57374;

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egeg :=args [0];switch _egeg .Type {case ResultTypeError :return _egeg ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_egeg .ValueNumber !=0);};if _egeg .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _afaf (args );case ResultTypeArray :return _gcfgb (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};var _fcc Result =MakeEmptyResult ();

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_ggaa ,_becd :=_dcfcb ("\u0046\u0049\u004e\u0044",args );if _becd .Type !=ResultTypeEmpty {return _becd ;};_debdd :=_ea .ToLower (_ggaa ._bfdbg );if _debdd ==""{return MakeNumberResult (1.0);};_bagcc :=_ea .ToLower (_ggaa ._egge );_fgcg :=_ggaa ._daeag ;_bbab :=1;for _cefb :=range _bagcc {if _bbab < _fgcg {_bbab ++;continue ;};_bgfaf :=_geb .Index (_debdd ,_bagcc [_cefb :]);if _bgfaf ==0{return MakeNumberResult (float64 (_bbab ));};_bbab ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var _febda _ge .Mutex ;func _decg (_fad ,_eba ,_ddg int )float64 {return float64 (_def (_fad ,_ee .Month (_eba ),_ddg )/86400)+_dfc ;};const _cbfef =57378;

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cgfe :=args [0];switch _cgfe .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_afe :=_cdb (_cgfe .ValueNumber );return MakeNumberResult (float64 (_afe .Month ()));case ResultTypeString :_fdb :=_ea .ToLower (_cgfe .ValueString );if !_cca (_fdb ){_ ,_ ,_ ,_ ,_bfdd ,_gge :=_bfe (_fdb );if _gge .Type ==ResultTypeError {_gge .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _gge ;};if _bfdd {return MakeNumberResult (1);};};_ ,_bbc ,_ ,_ ,_cbc :=_dff (_fdb );if _cbc .Type ==ResultTypeError {return _cbc ;};return MakeNumberResult (float64 (_bbc ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// CellRef is a reference to a single cell
type CellRef struct{_ecg string };

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acgad :=args [0].ValueNumber ;_ffg :=args [1].ValueNumber ;_dbef :=args [2].ValueNumber ;_aee :=_gfde (_acgad ,_ffg ,_dbef );if _aee >=0{return MakeNumberResult (_aee );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};func _ccge (_abbab []Result ,_dbgef bool )Result {var _cgac string ;if _dbgef {_cgac ="\u004c\u0041\u0052G\u0045";}else {_cgac ="\u0053\u004d\u0041L\u004c";};if len (_abbab )!=2{return MakeErrorResult (_cgac +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcfgc :=_abbab [0];var _ebad [][]Result ;switch _gcfgc .Type {case ResultTypeArray :_ebad =_gcfgc .ValueArray ;case ResultTypeList :_ebad =[][]Result {_gcfgc .ValueList };default:return MakeErrorResult (_cgac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_ebad )==0{return MakeErrorResult (_cgac +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _abbab [1].Type !=ResultTypeNumber {return MakeErrorResult (_cgac +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_aafa :=_abbab [1].ValueNumber ;if _aafa < 1{return MakeErrorResultType (ErrorTypeNum ,_cgac +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_ebadb :=int (_aafa );if float64 (_ebadb )!=_aafa {return MakeErrorResultType (ErrorTypeNum ,_cgac +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_ccgeb :=[]float64 {};for _ ,_fagd :=range _ebad {for _ ,_fffeb :=range _fagd {if _fffeb .Type ==ResultTypeNumber {_ccgeb =append (_ccgeb ,_fffeb .ValueNumber );};};};if _ebadb > len (_ccgeb ){return MakeErrorResultType (ErrorTypeNum ,_cgac +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dfgd :=_a .MergeSort (_ccgeb );if _dbgef {return MakeNumberResult (_dfgd [len (_dfgd )-_ebadb ]);}else {return MakeNumberResult (_dfgd [_ebadb -1]);};};func _fadgd (_caeb Context ,_eeeac ,_cdfcf int )(string ,string ){_dfeea :="\u0041"+_dd .Itoa (_eeeac );_baab :=_caeb .LastColumn (_eeeac ,_cdfcf );_acceg :=_baab +_dd .Itoa (_cdfcf );return _dfeea ,_acceg ;};const _cea ="\u0028\u0020\u0028"+_efg +"\u007c"+_ffef +"\u007c"+_cdcg +"\u007c"+_fgc +"\u0029\u0029\u003f\u0024";func (_bbga *yyParserImpl )Lookahead ()int {return _bbga ._acegd };

// Function is a standard function whose result only depends on its arguments.
type Function func (_cbfa []Result )Result ;func NewLexer ()*Lexer {return &Lexer {_aabcee :make (chan *node )}};var _cfbac =[...]uint8 {0,20,37,60,78,96};

// Update updates references in the PrefixExpr after removing a row/column.
func (_fac PrefixExpr )Update (q *_ef .UpdateQuery )Expression {_cdafg :=_fac ;_bcae :=_fac ._fefed .String ();if _bcae ==q .SheetToUpdate {_cgge :=*q ;_cgge .UpdateCurrentSheet =true ;_cdafg ._dcec =_fac ._dcec .Update (&_cgge );};return _cdafg ;};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);type yyParserImpl struct{_dbffd yySymType ;_agaf [_cbgba ]yySymType ;_acegd int ;};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_aecbe ,_acdg ,_adeff Expression };func _dcfcb (_gbafe string ,_gbbb []Result )(*parsedSearchObject ,Result ){_ddca :=len (_gbbb );if _ddca !=2&&_ddca !=3{return nil ,MakeErrorResult (_gbafe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egef :=_gbbb [0];if _egef .Type ==ResultTypeError {return nil ,_egef ;};if _egef .Type !=ResultTypeString &&_egef .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_feaacc :=_gbbb [1];if _feaacc .Type ==ResultTypeError {return nil ,_feaacc ;};if _feaacc .Type !=ResultTypeString &&_feaacc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_cfeb :=_feaacc .Value ();_gcba :=_egef .Value ();_acefa :=1;if _ddca ==3&&_gbbb [2].Type !=ResultTypeEmpty {_dbggg :=_gbbb [2];if _dbggg .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_acefa =int (_dbggg .ValueNumber );if _acefa < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _acefa > len (_cfeb ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_gcba ,_cfeb ,_acefa },_fcc ;};type couponArgs struct{_bce float64 ;_dgf float64 ;_fdef int ;_fab int ;};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_edfe Expression ;_ddaba ,_aageg int ;};const _deaf =57347;

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _efed (_afa ,_eccc float64 ,_dcd ,_ddb int )float64 {_faee :=_cdb (_afa );_adfa :=_cdb (_eccc );if _ddb ==1{_aecc :=_aed (_faee ,_adfa ,_dcd ,1);_dcdf :=_aecc .AddDate (0,12/_dcd ,0);return _bed (_aecc ,_dcdf ,_ddb );};return float64 (_ccee (0,_ddb ))/float64 (_dcd );};

// Eval evaluates and returns the result of an empty expression.
func (_cgg EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_gaagf Result )AsNumber ()Result {if _gaagf .Type ==ResultTypeString {_fggbe ,_gcefd :=_dd .ParseFloat (_gaagf .ValueString ,64);if _gcefd ==nil {return MakeNumberResult (_fggbe );};};if _gaagf .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _gaagf ;};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_afdae SheetPrefixExpr )Update (q *_ef .UpdateQuery )Expression {return _afdae };

// String returns a string representation for Negate.
func (_cdfbf Negate )String ()string {return "\u002d"+_cdfbf ._ebfdf .String ()};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_bfgag ,_bcfg :=_feca (args ,false );if _bcfg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_bfgag /_bcfg );};var InvalidReferenceContext =&ivr {};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_bedg :=args [0].AsNumber ();if _bedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgecb :=_cd .Signbit (_bedg .ValueNumber );_aecbg ,_ddgeb :=_cd .Modf ((_bedg .ValueNumber -1)/2);_agcg :=_aecbg *2+1;if _ddgeb !=0{if !_bgecb {_agcg +=2;}else {_agcg -=2;};};return MakeNumberResult (_agcg );};

// Eval evaluates and returns the result of an error expression.
func (_eea Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_eea ._aebf )};

// String returns a string representation of ConstArrayExpr.
func (_dda ConstArrayExpr )String ()string {return ""};const _eaafg =1;var _faf =map[string ]*_gd .Regexp {};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// Reference returns a string reference value to a range with prefix.
func (_cccd PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_ffccd :=_cccd ._aecbe .Reference (ctx ,ev );_abage :=_cccd ._acdg .Reference (ctx ,ev );_dfab :=_cccd ._adeff .Reference (ctx ,ev );if _ffccd .Type ==ReferenceTypeSheet &&_abage .Type ==ReferenceTypeCell &&_dfab .Type ==ReferenceTypeCell {return MakeRangeReference (_ddcfc (_ffccd ,_abage ,_dfab ));};return ReferenceInvalid ;};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_ccdcd ,_ggfec string };var _bfcgd =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_aagdf PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_ggfd :=_aagdf ._aecbe .Reference (ctx ,ev );_fbade :=_aagdf ._acdg .Reference (ctx ,ev );_cbgee :=_aagdf ._adeff .Reference (ctx ,ev );switch _ggfd .Type {case ReferenceTypeSheet :if _eadf (_ggfd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_cb .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ggfd .Value ));};_bege :=_ddcfc (_ggfd ,_fbade ,_cbgee );if _fbade .Type ==ReferenceTypeCell &&_cbgee .Type ==ReferenceTypeCell {if _ggagc ,_fgae :=ev .GetFromCache (_bege );_fgae {return _ggagc ;}else {_eeaae :=_bgggd (ctx .Sheet (_ggfd .Value ),ev ,_fbade .Value ,_cbgee .Value );ev .SetCache (_bege ,_eeaae );return _eeaae ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bege );default:return MakeErrorResult (_cb .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggfd .Type ));};};var _eceb =[...]int {-1,1,1,-1,-2,0};func _eabc (_gfcd int )bool {if _gfcd ==_gfcd /400*400{return true ;};if _gfcd ==_gfcd /100*100{return false ;};return _gfcd ==_gfcd /4*4;};type cmpResult int8 ;

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_efaab :=args [0].AsNumber ();if _efaab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_daga :=float64 (1);if _efaab .ValueNumber < 0{_daga =-1;};if len (args )> 1{_dgecd :=args [1].AsNumber ();if _dgecd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_daga =_dgecd .ValueNumber ;};if _daga < 0&&_efaab .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_cd .Ceil (_efaab .ValueNumber ));};_afdce :=_efaab .ValueNumber ;_afdce ,_cfgb :=_cd .Modf (_afdce /_daga );if _cfgb > 0{_afdce ++;};return MakeNumberResult (_afdce *_daga );};

// Reference returns an invalid reference for FunctionCall.
func (_dcccb FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_bfeab :=args [0].AsNumber ();if _bfeab .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _bfeab .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_gfbce (_bfeab .ValueNumber ));};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_efegf :=args [0].AsString ();if _efegf .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_eecab :=_ca .Buffer {};_fcefa :=false ;for _ ,_cdeg :=range _efegf .ValueString {if !_fcefa &&_d .IsLetter (_cdeg ){_eecab .WriteRune (_d .ToUpper (_cdeg ));}else {_eecab .WriteRune (_d .ToLower (_cdeg ));};_fcefa =_d .IsLetter (_cdeg );};return MakeStringResult (_eecab .String ());};

// String returns a string representation of a horizontal range with prefix.
func (_ddde PrefixHorizontalRange )String ()string {return _cb .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ddde ._edfe .String (),_ddde ._ddaba ,_ddde ._aageg );};const _gdgc =2;

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func _dgdbf (_acge []Result ,_aegc rmode )Result {if len (_acge )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbfef :=_acge [0].AsNumber ();if _dbfef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgga :=_acge [1].AsNumber ();if _cgga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdgd :=_cgga .ValueNumber ;_adbcf :=_dbfef .ValueNumber ;_gacaf :=1.0;if _fdgd > 0{_gacaf =_cd .Pow (1/10.0,_fdgd );}else {_gacaf =_cd .Pow (10.0,-_fdgd );};_adbcf ,_fafda :=_cd .Modf (_adbcf /_gacaf );switch _aegc {case _edeab :const _edgb =0.499999999;if _fafda >=_edgb {_adbcf ++;}else if _fafda <=-_edgb {_adbcf --;};case _acfd :case _cdec :if _fafda > 0{_adbcf ++;}else if _fafda < 0{_adbcf --;};};return MakeNumberResult (_adbcf *_gacaf );};var _eebg =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _ddcfc (_beecd ,_bdcd ,_cccge Reference )string {return _cb .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_beecd .Value ,_bdcd .Value ,_cccge .Value );};func _egcf (_fagf float64 )bool {return _fagf ==1||_fagf ==2||_fagf ==4};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_gcdd :=_ea .Split (v ,"\u003a");if len (_gcdd )!=2{return nil ;};_ceeeec ,_ :=_dd .Atoi (_gcdd [0]);_aeag ,_ :=_dd .Atoi (_gcdd [1]);if _ceeeec > _aeag {_ceeeec ,_aeag =_aeag ,_ceeeec ;};return PrefixHorizontalRange {_edfe :pfx ,_ddaba :_ceeeec ,_aageg :_aeag };};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bafb :=_fegcb (args );_e .Float64s (_bafb );var _gbda float64 ;if len (_bafb )%2==0{_gbda =(_bafb [len (_bafb )/2-1]+_bafb [len (_bafb )/2])/2;}else {_gbda =_bafb [len (_bafb )/2];};return MakeNumberResult (_gbda );};var _dgfa =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func _fe (_efa BinOpType ,_ce ,_fc [][]Result )Result {_cdc :=[][]Result {};for _cac :=range _ce {_ff :=_gc (_efa ,_ce [_cac ],_fc [_cac ]);if _ff .Type ==ResultTypeError {return _ff ;};_cdc =append (_cdc ,_ff .ValueList );};return MakeArrayResult (_cdc );};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fdgg :=args [0];_aefga :=args [1];if _aefga .Type !=ResultTypeArray &&_aefga .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gaef :=_feabe (_aefga );_edbg :=-1;for _eaegd ,_dbege :=range _gaef {if _fdacce (_fdgg ,_dbege ,false ,false )==_gabf {_edbg =_eaegd ;};};if _edbg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_daca :=_gaef ;if len (args )==3{_daca =_feabe (args [2]);};if _edbg < 0||_edbg >=len (_daca ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _daca [_edbg ];};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};func LexReader (r _bg .Reader )chan *node {_bagbb :=NewLexer ();go _bagbb .lex (r );return _bagbb ._aabcee ;};

// Reference returns a string reference value to a horizontal range.
func (_fbegc HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_fbegc .horizontalRangeReference ()};};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cdab :=args [0].AsNumber ();if _cdab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eaggb :=float64 (1);_feda :=args [1].AsNumber ();if _feda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_eaggb =_feda .ValueNumber ;if _eaggb < 0&&_cdab .ValueNumber > 0||_eaggb > 0&&_cdab .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_acgc :=_cdab .ValueNumber ;_acgc ,_cbcg :=_cd .Modf (_acgc /_eaggb );if _cd .Trunc (_cbcg +0.5)> 0{_acgc ++;};return MakeNumberResult (_acgc *_eaggb );};const _ddfde =-1000;const (_edeab rmode =iota ;_acfd ;_cdec ;);

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bgfa ,_gbdf ,_cded :=_aagg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _cded .Type ==ResultTypeError {return _cded ;};if _gbdf < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _bgfa ==0{return MakeNumberResult (0);};_ddcf :=_bgfa < 0;if _ddcf {_bgfa =-_bgfa ;};_bdfc :=args [0].Value ();_acef :=_ea .Split (_bdfc ,"\u002e");_ebbcb :=float64 (int (_bgfa ));_agbg :=_acef [1];_feef :=len (_agbg );_dbgb :=int (_cd .Log10 (_gbdf ))+1;_bcda :=float64 (_dbgb -_feef );_agad ,_bacc :=_dd .ParseFloat (_agbg ,64);if _bacc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_agad *=_cd .Pow (10,_bcda );_ffebg :=_ebbcb +_agad /_gbdf ;if _ddcf {_ffebg =-_ffebg ;};return MakeNumberResult (_ffebg );};var _ggae []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};var _dfc float64 =25569.0;

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};var _fagea =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Reference returns an invalid reference for EmptyExpr.
func (_dac EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_cbcf :=len (args );if _cbcf !=4&&_cbcf !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_decd ,_bggg :=_bgg (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _bggg .Type ==ResultTypeError {return _bggg ;};_afca ,_bggg :=_bgg (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _bggg .Type ==ResultTypeError {return _bggg ;};if _decd >=_afca {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_faeb :=args [2].ValueNumber ;if _faeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cba :=args [3].ValueNumber ;if _cba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baeg :=0;if _cbcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baeg =int (args [4].ValueNumber );if !_dca (_baeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_gfdg ,_bggg :=_bgae (_decd ,_afca ,_baeg );if _bggg .Type ==ResultTypeError {return _bggg ;};return MakeNumberResult (_cba *_faeb *_gfdg );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_bbgf ,_beff :=_gcbc (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _beff .Type ==ResultTypeError {return _beff ;};_ccaa :=_cdb (_bbgf ._bce );_fbba :=_cdb (_bbgf ._dgf );_adec :=_bbgf ._fdef ;_aebb :=_bagf (_ccaa ,_fbba ,_adec );_age ,_cefcc ,_cgeb :=_aebb .Date ();return MakeNumberResult (_decg (_age ,int (_cefcc ),_cgeb ));};func _cdbdb (_gcbb Result ,_fgde int )[]Result {_dggce :=[]Result {};switch _gcbb .Type {case ResultTypeList :_fedf :=_gcbb .ValueList ;_efabe :=len (_fedf );for _bded :=0;_bded < _fgde ;_bded ++{if _bded < _efabe {_dggce =append (_dggce ,_fedf [_bded ]);}else {_dggce =append (_dggce ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ffgb :=0;_ffgb < _fgde ;_ffgb ++{_dggce =append (_dggce ,_gcbb );};};return _dggce ;};

// Eval evaluates and returns the result of a constant array expression.
func (_cga ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_agd :=[][]Result {};for _ ,_eac :=range _cga ._cdg {_bda :=[]Result {};for _ ,_gba :=range _eac {_bda =append (_bda ,_gba .Eval (ctx ,ev ));};_agd =append (_agd ,_bda );};return MakeArrayResult (_agd );};func _bfe (_gecc string )(int ,int ,float64 ,bool ,bool ,Result ){_ccc :="";_cgfb :=[]string {};for _edb ,_fcgd :=range _faf {_cgfb =_fcgd .FindStringSubmatch (_gecc );if len (_cgfb )> 1{_ccc =_edb ;break ;};};if _ccc ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_bcfa :=_cgfb [1]=="";_cgfb =_cgfb [49:];_egfb :=len (_cgfb );_acaa :=_cgfb [_egfb -1];_ffdd :=_acaa =="\u0061\u006d";_dfe :=_acaa =="\u0070\u006d";var _ecae ,_dcf int ;var _gcd float64 ;var _fdac error ;switch _ccc {case "\u0068\u0068":_ecae ,_fdac =_dd .Atoi (_cgfb [0]);if _fdac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_dcf =0;_gcd =0;case "\u0068\u0068\u003am\u006d":_ecae ,_fdac =_dd .Atoi (_cgfb [0]);if _fdac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_dcf ,_fdac =_dd .Atoi (_cgfb [2]);if _fdac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_gcd =0;case "\u006d\u006d\u003as\u0073":_ecae =0;_dcf ,_fdac =_dd .Atoi (_cgfb [0]);if _fdac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_gcd ,_fdac =_dd .ParseFloat (_cgfb [2],64);if _fdac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_ecae ,_fdac =_dd .Atoi (_cgfb [0]);if _fdac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_dcf ,_fdac =_dd .Atoi (_cgfb [2]);if _fdac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};_gcd ,_fdac =_dd .ParseFloat (_cgfb [4],64);if _fdac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};};if _dcf >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};if _ffdd ||_dfe {if _ecae > 12||_gcd >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );}else if _ecae ==12{_ecae =0;};}else if _ecae >=24||_gcd >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gad );};return _ecae ,_dcf ,_gcd ,_dfe ,_bcfa ,_fcc ;};

// Eval evaluates and returns the result of a Negate expression.
func (_aebac Negate )Eval (ctx Context ,ev Evaluator )Result {_cfgg :=_aebac ._ebfdf .Eval (ctx ,ev );if _cfgg .Type ==ResultTypeNumber {return MakeNumberResult (-_cfgg .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// String returns a string representation of a vertical range.
func (_efbaa VerticalRange )String ()string {return _efbaa .verticalRangeReference ()};

// Eval evaluates and returns a boolean.
func (_fde Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_fde ._cf )};type Reference struct{Type ReferenceType ;Value string ;};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fefe :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddda :=args [2].ValueNumber ;if _ddda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbed :=args [3].ValueNumber ;return MakeNumberResult (_bbed *_abec *(_fefe /_ddda -1));};func _gecg (_fgfa int )string {if _fgfa >=1&&_fgfa -1< len (_bgbcg ){if _bgbcg [_fgfa -1]!=""{return _bgbcg [_fgfa -1];};};return _cb .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_fgfa );};

// Reference returns an invalid reference for Number.
func (_dbbbe Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_ffeg :=args [0].AsNumber ();if _ffeg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_daac ,_ebdb :=_cd .Modf (_ffeg .ValueNumber );if _ebdb < 0{_daac --;};return MakeNumberResult (_daac );};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_gbdga :=_cafb (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _gbdga .Type !=ResultTypeEmpty {return _gbdga ;};_deeda :=_egec (args [1:]);_cdbfb :=-_cd .MaxFloat64 ;_bdded :=_dacf (args [0]);for _ ,_ceea :=range _deeda {_cfcbc :=_bdded [_ceea ._fedb ][_ceea ._ggafd ].ValueNumber ;if _cdbfb < _cfcbc {_cdbfb =_cfcbc ;};};if _cdbfb ==-_cd .MaxFloat64 {_cdbfb =0;};return MakeNumberResult (float64 (_cdbfb ));};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func _bcad (_dcdd ,_aafg float64 )float64 {_dcdd =_cd .Trunc (_dcdd );_aafg =_cd .Trunc (_aafg );if _dcdd ==0{return _aafg ;};if _aafg ==0{return _dcdd ;};for _dcdd !=_aafg {if _dcdd > _aafg {_dcdd =_dcdd -_aafg ;}else {_aafg =_aafg -_dcdd ;};};return _dcdd ;};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// IsDBCS returns false for the invalid reference context.
func (_eefbg *ivr )IsDBCS ()bool {return false };

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_febda .Lock ();defer _febda .Unlock ();if _eddae ,_fadfcg :=_deffb [name ];_fadfcg {return _eddae ;};return nil ;};

// Update updates references in the Range after removing a row/column.
func (_acbb Range )Update (q *_ef .UpdateQuery )Expression {_bbgd :=_acbb ;if q .UpdateCurrentSheet {_bbgd ._bgaad =_acbb ._bgaad .Update (q );_bbgd ._eeebc =_acbb ._eeebc .Update (q );};return _bbgd ;};

// Eval evaluates and returns the result of a sheet expression.
func (_ebbd SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};func _bed (_gef ,_dgd _ee .Time ,_feebd int )float64 {if _gef .After (_dgd ){_gef ,_dgd =_dgd ,_gef ;};_ecaec :=0;_bfga ,_gege ,_fdec :=_gef .Date ();_efda ,_gac ,_cdgc :=_dgd .Date ();_ecad ,_fbb :=int (_gege ),int (_gac );_acf ,_gcdf :=_fbga (_bfga ,_ecad ,_fdec ,_feebd ),_fbga (_efda ,_fbb ,_cdgc ,_feebd );if !_bcg (_feebd ){return _decg (_efda ,_fbb ,_gcdf )-_decg (_bfga ,_ecad ,_acf );};if _feebd ==0{if (_ecad ==2||_acf < 30)&&_cdgc ==31{_gcdf =31;}else if _fbb ==2&&_gcdf ==_baf (_efda ,_fbb ){_gcdf =_baf (_efda ,2);};}else {if _ecad ==2&&_acf ==30{_acf =_baf (_bfga ,2);};if _fbb ==2&&_gcdf ==30{_gcdf =_baf (_efda ,2);};};if _bfga < _efda ||(_bfga ==_efda &&_ecad < _fbb ){_ecaec =30-_acf +1;_fdec =1;_acf =1;_bfb :=_ee .Date (_bfga ,_ee .Month (_ecad ),_fdec ,0,0,0,0,_ee .UTC ).AddDate (0,1,0);if _bfb .Year ()< _efda {_ecaec +=_abgf (_bfb .Year (),int (_bfb .Month ()),12,_feebd );_bfb =_bfb .AddDate (0,13-int (_bfb .Month ()),0);_ecaec +=_cgb (_bfb .Year (),_efda -1,_feebd );};_ecaec +=_abgf (_efda ,int (_bfb .Month ()),_fbb -1,_feebd );_bfb =_bfb .AddDate (0,_fbb -int (_bfb .Month ()),0);_ecad =_bfb .Day ();};_ecaec +=_gcdf -_acf ;if _ecaec > 0{return float64 (_ecaec );}else {return 0;};};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_begb PrefixVerticalRange )Update (q *_ef .UpdateQuery )Expression {if q .UpdateType ==_ef .UpdateActionRemoveColumn {_gegda :=_begb ;_bfegg :=_begb ._feccb .String ();if _bfegg ==q .SheetToUpdate {_ebdda :=q .ColumnIdx ;_gegda ._gadf =_dg (_begb ._gadf ,_ebdda );_gegda ._agbc =_dg (_begb ._agbc ,_ebdda );};return _gegda ;};return _begb ;};func _fbfa (_debfbg ,_baccg Reference )string {return _cb .Sprintf ("\u0025\u0073\u003a%\u0073",_debfbg .Value ,_baccg .Value );};

// Eval evaluates a range returning a list of results or an error.
func (_cbbde Range )Eval (ctx Context ,ev Evaluator )Result {_ccec :=_cbbde ._bgaad .Reference (ctx ,ev );_fbbef :=_cbbde ._eeebc .Reference (ctx ,ev );_begea :=_fbfa (_ccec ,_fbbef );if _ccec .Type ==ReferenceTypeCell &&_fbbef .Type ==ReferenceTypeCell {if _cgebe ,_afebg :=ev .GetFromCache (_begea );_afebg {return _cgebe ;}else {_bfcbe :=_bgggd (ctx ,ev ,_ccec .Value ,_fbbef .Value );ev .SetCache (_begea ,_bfcbe );return _bfcbe ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_begea );};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};const _ecbfa =57363;

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_efbbc :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbbc =int (args [1].ValueNumber );if _efbbc < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _efbbc ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_degb :=args [0].Value ();_fdfa :=len (_degb );if _efbbc > _fdfa {return MakeStringResult (_degb );};return MakeStringResult (_degb [_fdfa -_efbbc :_fdfa ]);};func _gec (_decb ,_agc ,_accd int )bool {if _agc < 1||_agc > 12{return false ;};if _accd < 1{return false ;};return _accd <=_baf (_decb ,_agc );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_cbggggc ,_ddfbg :=_feca (args ,true );if _ddfbg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_cbggggc /_ddfbg );};const _ggdcg =_ee .Millisecond *1000;

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gfgf :=args [0].ValueNumber ;if _gfgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_gdce ,_fbbc :=_adbcb (args [1],args [2],"\u0058\u004e\u0050\u0056");if _fbbc .Type ==ResultTypeError {return _fbbc ;};_bccd :=_gdce ._gfbd ;_ggfgf :=_gdce ._ggfb ;_ccdca :=0.0;_ggcf :=_ggfgf [0];for _aeba ,_dbgba :=range _bccd {_ccdca +=_dbgba /_cd .Pow (1+_gfgf ,(_ggfgf [_aeba ]-_ggcf )/365);};return MakeNumberResult (_ccdca );};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfdc ,_gbab ,_agab :=_fcfd (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _agab .Type ==ResultTypeError {return _agab ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cage :=_gbab -_dfdc ;if _cage > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_fgb :=args [2].ValueNumber ;if _fgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_fgb )/(360-_fgb *_cage ));};func (_egfe *ivr )Sheet (name string )Context {return _egfe };func (_eef *evCache )SetCache (key string ,value Result ){_eef ._gg .Lock ();_eef ._fa [key ]=value ;_eef ._gg .Unlock ();};const _acga =86400000000000;func _fefc (_egfg Context ,_fadgc ,_egade string )(string ,string ){_eecd :=_fadgc +"\u0031";_gcbdgb :=_egfg .LastRow (_fadgc );_baacg :=_egade +_dd .Itoa (_gcbdgb );return _eecd ,_baacg ;};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdeea :=args [0];if _cdeea .Type ==ResultTypeNumber {return _cdeea ;};if _cdeea .Type ==ResultTypeString {_fbdca ,_fdcbb :=_dd .ParseFloat (_cdeea .Value (),64);if _fdcbb ==nil {return MakeNumberResult (_fbdca );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func _eegc (_eeec _ee .Time )_ee .Time {_eeec =_eeec .UTC ();return _ee .Date (_eeec .Year (),_eeec .Month (),_eeec .Day (),_eeec .Hour (),_eeec .Minute (),_eeec .Second (),_eeec .Nanosecond (),_ee .Local );};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_edgab :=args [0].AsNumber ();_aebab :=args [1].AsNumber ();_gdacg :=args [2].AsNumber ();_deagf :=args [3].ListValues ();if _edgab .Type !=ResultTypeNumber ||_aebab .Type !=ResultTypeNumber ||_gdacg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_dccb :=float64 (0);for _dgea ,_badf :=range _deagf {_dccb +=_badf .ValueNumber *_cd .Pow (_edgab .ValueNumber ,_aebab .ValueNumber +float64 (_dgea )*_gdacg .ValueNumber );};return MakeNumberResult (_dccb );};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_dfgb ,_cace :=_bcb (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cace .Type ==ResultTypeError {return _cace ;};_aeca :=_dfgb ._cdee ;_agea :=_dfgb ._dgdf ;_dbgc :=_dfgb ._eeab ;_ecbd :=_dfgb ._bdgg ;_gfaf :=_dfgb ._ceaf ;_ceff :=_dfgb ._fbgd ;_abcb :=_aeda (_aeca ,_agea ,_dbgc ,0,_ceff );_cgea :=0.0;if _ecbd ==1{if _ceff ==0{_cgea =_abcb +_dbgc *_aeca ;}else {_cgea =_abcb ;};_ecbd ++;};for _bfef :=_ecbd ;_bfef <=_gfaf ;_bfef ++{if _ceff ==1{_cgea +=_abcb -(_bdce (_aeca ,_bfef -2,_abcb ,_dbgc ,1)-_abcb )*_aeca ;}else {_cgea +=_abcb -_bdce (_aeca ,_bfef -1,_abcb ,_dbgc ,0)*_aeca ;};};return MakeNumberResult (_cgea );};func (_abfgg *noCache )GetFromCache (key string )(Result ,bool ){return _fcc ,false };const _bdbb =187;type criteriaRegex struct{_bfbg byte ;_cgfbcc string ;};

// Eval evaluates the binary expression using the context given.
func (_gb BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_gbc :=_gb ._ba .Eval (ctx ,ev );if _gbc .Type ==ResultTypeError {return _gbc ;};_caf :=_gb ._af .Eval (ctx ,ev );if _caf .Type ==ResultTypeError {return _caf ;};if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeArray {if !_da (_gbc .ValueArray ,_caf .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _fe (_gb ._ad ,_gbc .ValueArray ,_caf .ValueArray );}else if _gbc .Type ==ResultTypeList {if len (_gbc .ValueList )!=len (_caf .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _gc (_gb ._ad ,_gbc .ValueList ,_caf .ValueList );};}else if _gbc .Type ==ResultTypeArray &&(_caf .Type ==ResultTypeNumber ||_caf .Type ==ResultTypeString ){return _fg (_gb ._ad ,_gbc .ValueArray ,_caf );}else if _gbc .Type ==ResultTypeList &&(_caf .Type ==ResultTypeNumber ||_caf .Type ==ResultTypeString ){return _bff (_gb ._ad ,_gbc .ValueList ,_caf );};switch _gb ._ad {case BinOpTypePlus :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeNumberResult (_gbc .ValueNumber +_caf .ValueNumber );};};case BinOpTypeMinus :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeNumberResult (_gbc .ValueNumber -_caf .ValueNumber );};};case BinOpTypeMult :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeNumberResult (_gbc .ValueNumber *_caf .ValueNumber );};};case BinOpTypeDiv :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {if _caf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_gbc .ValueNumber /_caf .ValueNumber );};};case BinOpTypeExp :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeNumberResult (_cd .Pow (_gbc .ValueNumber ,_caf .ValueNumber ));};};case BinOpTypeLT :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeBoolResult (_gbc .ValueNumber < _caf .ValueNumber );};if _gbc .Type ==ResultTypeString {return MakeBoolResult (_gbc .ValueString < _caf .ValueString );};if _gbc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _gbc .Type ==ResultTypeString &&_caf .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _gbc .Type ==ResultTypeNumber &&_caf .Type ==ResultTypeString {return MakeBoolResult (true );}else if _gbc .Type ==ResultTypeEmpty &&(_caf .Type ==ResultTypeNumber ||_caf .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_gbc .Type ==ResultTypeNumber ||_gbc .Type ==ResultTypeString )&&_caf .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeBoolResult (_gbc .ValueNumber > _caf .ValueNumber );};if _gbc .Type ==ResultTypeString {return MakeBoolResult (_gbc .ValueString > _caf .ValueString );};if _gbc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _gbc .Type ==ResultTypeString &&_caf .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _gbc .Type ==ResultTypeNumber &&_caf .Type ==ResultTypeString {return MakeBoolResult (false );}else if _gbc .Type ==ResultTypeEmpty &&(_caf .Type ==ResultTypeNumber ||_caf .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_gbc .Type ==ResultTypeNumber ||_gbc .Type ==ResultTypeString )&&_caf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeBoolResult (_gbc .ValueNumber ==_caf .ValueNumber );};if _gbc .Type ==ResultTypeString {return MakeBoolResult (_gbc .ValueString ==_caf .ValueString );};if _gbc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_gbc .Type ==ResultTypeString &&_caf .Type ==ResultTypeNumber )||(_gbc .Type ==ResultTypeNumber &&_caf .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _gbc .Type ==ResultTypeEmpty &&(_caf .Type ==ResultTypeNumber ||_caf .Type ==ResultTypeString ){return MakeBoolResult (_efb (_caf ));}else if (_gbc .Type ==ResultTypeNumber ||_gbc .Type ==ResultTypeString )&&_caf .Type ==ResultTypeEmpty {return MakeBoolResult (_efb (_gbc ));};case BinOpTypeNE :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeBoolResult (_gbc .ValueNumber !=_caf .ValueNumber );};if _gbc .Type ==ResultTypeString {return MakeBoolResult (_gbc .ValueString !=_caf .ValueString );};if _gbc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_gbc .Type ==ResultTypeString &&_caf .Type ==ResultTypeNumber )||(_gbc .Type ==ResultTypeNumber &&_caf .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _gbc .Type ==ResultTypeEmpty &&(_caf .Type ==ResultTypeNumber ||_caf .Type ==ResultTypeString ){return MakeBoolResult (!_efb (_caf ));}else if (_gbc .Type ==ResultTypeNumber ||_gbc .Type ==ResultTypeString )&&_caf .Type ==ResultTypeEmpty {return MakeBoolResult (!_efb (_gbc ));};case BinOpTypeLEQ :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeBoolResult (_gbc .ValueNumber <=_caf .ValueNumber );};if _gbc .Type ==ResultTypeString {return MakeBoolResult (_gbc .ValueString <=_caf .ValueString );};if _gbc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _gbc .Type ==ResultTypeString &&_caf .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _gbc .Type ==ResultTypeNumber &&_caf .Type ==ResultTypeString {return MakeBoolResult (true );}else if _gbc .Type ==ResultTypeEmpty &&(_caf .Type ==ResultTypeNumber ||_caf .Type ==ResultTypeString ){return MakeBoolResult (_efb (_caf ));}else if (_gbc .Type ==ResultTypeNumber ||_gbc .Type ==ResultTypeString )&&_caf .Type ==ResultTypeEmpty {return MakeBoolResult (_efb (_gbc ));};case BinOpTypeGEQ :if _gbc .Type ==_caf .Type {if _gbc .Type ==ResultTypeNumber {return MakeBoolResult (_gbc .ValueNumber >=_caf .ValueNumber );};if _gbc .Type ==ResultTypeString {return MakeBoolResult (_gbc .ValueString >=_caf .ValueString );};if _gbc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _gbc .Type ==ResultTypeString &&_caf .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _gbc .Type ==ResultTypeNumber &&_caf .Type ==ResultTypeString {return MakeBoolResult (false );}else if _gbc .Type ==ResultTypeEmpty &&(_caf .Type ==ResultTypeNumber ||_caf .Type ==ResultTypeString ){return MakeBoolResult (_efb (_caf ));}else if (_gbc .Type ==ResultTypeNumber ||_gbc .Type ==ResultTypeString )&&_caf .Type ==ResultTypeEmpty {return MakeBoolResult (_efb (_gbc ));};case BinOpTypeConcat :return MakeStringResult (_gbc .Value ()+_caf .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_ffeb EmptyExpr )Update (q *_ef .UpdateQuery )Expression {return _ffeb };const _efg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";var _ged =[]*_gd .Regexp {};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_beea :=args [0];switch _beea .Type {case ResultTypeError :return _beea ;case ResultTypeNumber ,ResultTypeString :return _agbgb (args [0]);case ResultTypeList :_adcc :=_beea .ValueList ;_ecbf :=[]Result {};for _ ,_ffae :=range _adcc {_bfdf :=_agbgb (_ffae );if _bfdf .Type ==ResultTypeError {return _bfdf ;};_ecbf =append (_ecbf ,_bfdf );};return MakeListResult (_ecbf );case ResultTypeArray :_fedbc :=_beea .ValueArray ;_ddee :=[][]Result {};for _ ,_cdfbc :=range _fedbc {_gdbce :=[]Result {};for _ ,_degaf :=range _cdfbc {_fcca :=_agbgb (_degaf );if _fcca .Type ==ResultTypeError {return _fcca ;};_gdbce =append (_gdbce ,_fcca );};_ddee =append (_ddee ,_gdbce );};return MakeArrayResult (_ddee );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbaga :=args [0].AsNumber ();if _gbaga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfec :=int (_gbaga .ValueNumber );if _bfec < 0||_bfec > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_cb .Sprintf ("\u0025\u0063",_bfec ));};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_dcecf :s }};func _effe (_ecfg ,_gabg float64 ,_aced ,_fecc int )float64 {_bec :=_cdb (_ecfg );_cgdb :=_cdb (_gabg );_agdg :=_aed (_bec ,_cgdb ,_aced ,_fecc );return _bed (_agdg ,_bec ,_fecc );};func _aed (_dgc ,_eedd _ee .Time ,_gbea ,_faec int )_ee .Time {_eaa :=_eedd ;_adeb :=_dgc .Year ()-_eedd .Year ();_eaa =_eaa .AddDate (_adeb ,0,0);if _dgc .After (_eaa ){_eaa =_eaa .AddDate (1,0,0);};_dfcf :=-12/_gbea ;for _eaa .After (_dgc ){_eaa =_eaa .AddDate (0,_dfcf ,0);};return _eaa ;};const _dddca =57371;func (_effd HorizontalRange )horizontalRangeReference ()string {return _cb .Sprintf ("\u0025\u0064\u003a%\u0064",_effd ._cbgge ,_effd ._faff );};func _dca (_ggb int )bool {return _ggb >=0&&_ggb <=4};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_decbe :=len (args );if _decbe !=5&&_decbe !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ffebe ,_fceee ,_dgec :=_fcfd (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dgec .Type ==ResultTypeError {return _dgec ;};_fba ,_dgec :=_bgg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dgec .Type ==ResultTypeError {return _dgec ;};if _fba >=_ffebe {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dfgf :=args [3].ValueNumber ;if _dfgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_deacg :=args [4].ValueNumber ;if _deacg <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_cffd :=0;if _decbe ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cffd =int (args [5].ValueNumber );if !_dca (_cffd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_gafdf ,_dgec :=_bgae (_fba ,_fceee ,_cffd );if _dgec .Type ==ResultTypeError {return _dgec ;};_gfdf ,_dgec :=_bgae (_fba ,_ffebe ,_cffd );if _dgec .Type ==ResultTypeError {return _dgec ;};_cafa ,_dgec :=_bgae (_ffebe ,_fceee ,_cffd );if _dgec .Type ==ResultTypeError {return _dgec ;};_gbgb :=1+_gafdf *_dfgf ;_gbgb /=_deacg /100+_gfdf *_dfgf ;_gbgb --;_gbgb /=_cafa ;return MakeNumberResult (_gbgb );};

// String returns a string representation of a range with prefix.
func (_dedfc PrefixRangeExpr )String ()string {return _cb .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dedfc ._aecbe .String (),_dedfc ._acdg .String (),_dedfc ._adeff .String ());};

// String returns a string representation of a horizontal range.
func (_ebdba HorizontalRange )String ()string {return _ebdba .horizontalRangeReference ()};func _gaed (_agdb ,_edgf ,_aaff ,_bgbc ,_dgdbg ,_ggff float64 )float64 {var _deea ,_gcbfb float64 ;_febf :=0.0;_ffdge :=_cd .Ceil (_dgdbg );_agdc :=_agdb -_edgf ;_faebf :=false ;_efab :=0.0;for _dcbd :=1.0;_dcbd <=_ffdge ;_dcbd ++{if !_faebf {_deea =_dfad (_agdb ,_edgf ,_aaff ,_dcbd ,_ggff );_efab =_agdc /(_aaff -_dcbd +1);if _efab > _deea {_gcbfb =_efab ;_faebf =true ;}else {_gcbfb =_deea ;_agdc -=_deea ;};}else {_gcbfb =_efab ;};if _dcbd ==_ffdge {_gcbfb *=_dgdbg +1-_ffdge ;};_febf +=_gcbfb ;};return _febf ;};const _cbgba =16;func _gc (_ceg BinOpType ,_bd ,_ffa []Result )Result {_ded :=[]Result {};for _bgf :=range _bd {_aa :=_bd [_bgf ].AsNumber ();_fd :=_ffa [_bgf ].AsNumber ();if _aa .Type !=ResultTypeNumber ||_fd .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ceg {case BinOpTypePlus :_ded =append (_ded ,MakeNumberResult (_aa .ValueNumber +_fd .ValueNumber ));case BinOpTypeMinus :_ded =append (_ded ,MakeNumberResult (_aa .ValueNumber -_fd .ValueNumber ));case BinOpTypeMult :_ded =append (_ded ,MakeNumberResult (_aa .ValueNumber *_fd .ValueNumber ));case BinOpTypeDiv :if _fd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ded =append (_ded ,MakeNumberResult (_aa .ValueNumber /_fd .ValueNumber ));case BinOpTypeExp :_ded =append (_ded ,MakeNumberResult (_cd .Pow (_aa .ValueNumber ,_fd .ValueNumber )));case BinOpTypeLT :_ded =append (_ded ,MakeBoolResult (_aa .ValueNumber < _fd .ValueNumber ));case BinOpTypeGT :_ded =append (_ded ,MakeBoolResult (_aa .ValueNumber > _fd .ValueNumber ));case BinOpTypeEQ :_ded =append (_ded ,MakeBoolResult (_aa .ValueNumber ==_fd .ValueNumber ));case BinOpTypeLEQ :_ded =append (_ded ,MakeBoolResult (_aa .ValueNumber <=_fd .ValueNumber ));case BinOpTypeGEQ :_ded =append (_ded ,MakeBoolResult (_aa .ValueNumber >=_fd .ValueNumber ));case BinOpTypeNE :_ded =append (_ded ,MakeBoolResult (_aa .ValueNumber !=_fd .ValueNumber ));default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ceg ));};};return MakeListResult (_ded );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_febda .Lock ();defer _febda .Unlock ();if _ ,_gdggd :=_gecbg [name ];_gdggd {_db .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_gecbg [name ]=fn ;};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_ggdb :=len (args );if _ggdb < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efacc :=args [0].ValueNumber ;if _efacc ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bbedd :=[]float64 {};for _ ,_abca :=range args [1:]{switch _abca .Type {case ResultTypeNumber :_bbedd =append (_bbedd ,_abca .ValueNumber );case ResultTypeArray ,ResultTypeList :_fbgdb :=_dacf (_abca );for _ ,_bcdc :=range _fbgdb {for _ ,_dabf :=range _bcdc {if _dabf .Type ==ResultTypeNumber &&!_dabf .IsBoolean {_bbedd =append (_bbedd ,_dabf .ValueNumber );};};};};};_ffgg :=0.0;for _cdbf ,_dgcb :=range _bbedd {_ffgg +=_dgcb /_cd .Pow (1+_efacc ,float64 (_cdbf )+1);};return MakeNumberResult (_ffgg );};const _dcgb =57372;var _bcffg =[...]uint8 {0,17,33,49,63,78,93,108};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fcb :=args [0];switch _fcb .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_gbd :=_cdb (_fcb .ValueNumber );return MakeNumberResult (float64 (_gbd .Minute ()));case ResultTypeString :_geg :=_ea .ToLower (_fcb .ValueString );if !_fcfb (_geg ){_ ,_ ,_ ,_cee ,_bbaf :=_dff (_geg );if _bbaf .Type ==ResultTypeError {_bbaf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _bbaf ;};if _cee {return MakeNumberResult (0);};};_ ,_ceb ,_ ,_ ,_ ,_eed :=_bfe (_geg );if _eed .Type ==ResultTypeError {return _eed ;};return MakeNumberResult (float64 (_ceb ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func (_egbe node )String ()string {return _cb .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_egbe ._dgfdea ,_gefca (string (_egbe ._acfe )));};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agca :=args [0].AsNumber ();if _agca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agca .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cdba :=float64 (1);_bddfc :=_cd .Trunc (_agca .ValueNumber );for _cgab :=_bddfc ;_cgab > 1;_cgab -=2{_cdba *=_cgab ;};return MakeNumberResult (_cdba );};

// Reference returns a string reference value to a named range.
func (_fdefed NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_fdefed ._ffead };};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_cc ,_gfg :=_dd .ParseBool (v );if _gfg !=nil {_db .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_gfg );};return Bool {_cf :_cc };};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_gaeg PrefixHorizontalRange )Update (q *_ef .UpdateQuery )Expression {return _gaeg };

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_agbb :=len (args );if _agbb !=5&&_agbb !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggc ,_fead ,_cfa :=_fcfd (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cfa .Type ==ResultTypeError {return _cfa ;};_cffe ,_cfa :=_bgg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cfa .Type ==ResultTypeError {return _cfa ;};if _cffe >=_ggc {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bceb :=args [3].ValueNumber ;if _bceb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bfcb :=args [4].ValueNumber ;if _bfcb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_edcgd :=0;if _agbb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edcgd =int (args [5].ValueNumber );if !_dca (_edcgd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_eaca ,_cfa :=_bgae (_ggc ,_fead ,_edcgd );if _cfa .Type ==ResultTypeError {return _cfa ;};_bgac ,_cfa :=_bgae (_cffe ,_fead ,_edcgd );if _cfa .Type ==ResultTypeError {return _cfa ;};_bgaea ,_cfa :=_bgae (_cffe ,_ggc ,_edcgd );if _cfa .Type ==ResultTypeError {return _cfa ;};_bdgf :=1+_bgac *_bceb ;_cdbcg :=1+_eaca *_bfcb ;return MakeNumberResult ((_bdgf /_cdbcg -_bgaea *_bceb )*100);};func _dgaf (_eefg []Result )(float64 ,float64 ,Result ){_gdeb :=0.0;_aefge :=1.0;for _ ,_ecge :=range _eefg {switch _ecge .Type {case ResultTypeNumber :_gdeb +=_ecge .ValueNumber ;_aefge *=_gfbce (_ecge .ValueNumber );case ResultTypeList ,ResultTypeArray :_bbbbc ,_ffbe ,_cgba :=_dgaf (_ecge .ListValues ());_gdeb +=_bbbbc ;_aefge *=_gfbce (_ffbe );if _cgba .Type ==ResultTypeError {return 0,0,_cgba ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_ecge ;};};return _gdeb ,_aefge ,_fcc ;};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_bbcd :=len (args );if _bbcd !=4&&_bbcd !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dfcfc ,_ecdb ,_fgag :=_fcfd (args [0],args [1],"\u0044\u0049\u0053\u0043");if _fgag .Type ==ResultTypeError {return _fgag ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdag :=args [2].ValueNumber ;if _fdag <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adag :=args [3].ValueNumber ;if _adag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geaf :=0;if _bbcd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geaf =int (args [4].ValueNumber );if !_dca (_geaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_eadgb ,_fgag :=_bgae (_dfcfc ,_ecdb ,_geaf );if _fgag .Type ==ResultTypeError {return _fgag ;};return MakeNumberResult ((_adag -_fdag )/_adag /_eadgb );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_cfafc ,_eddgg ,_cfec :=_egca (from ,to );if _cfec !=nil {_db .Log .Debug (_cfec .Error ());return NewError (_cfec .Error ());};return Range {_bgaad :_cfafc ,_eeebc :_eddgg };};

// String returns a string representation of String.
func (_cddfb String )String ()string {return "\u0022"+_cddfb ._dfcbb +"\u0022"};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bgde :=_ea .ToLower (args [0].ValueString );if !_fcfb (_bgde ){_ ,_ ,_ ,_gegg ,_dfd :=_dff (_bgde );if _dfd .Type ==ResultTypeError {_dfd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _dfd ;};if _gegg {return MakeNumberResult (0);};};_gdbc ,_aab ,_bdc ,_egaa ,_ ,_aabc :=_bfe (_bgde );if _aabc .Type ==ResultTypeError {return _aabc ;};_efaa :=_gfde (float64 (_gdbc ),float64 (_aab ),_bdc );if _egaa {_efaa +=0.5;}else if _efaa >=1{_efaa -=float64 (int (_efaa ));};return MakeNumberResult (_efaa );};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_gcbd ,_edc :=_gcbc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _edc .Type ==ResultTypeError {return _edc ;};return MakeNumberResult (_efed (_gcbd ._bce ,_gcbd ._dgf ,_gcbd ._fdef ,_gcbd ._fab ));};const _gae =_fbg +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";const _fgeg =57361;type parsedSearchObject struct{_bfdbg string ;_egge string ;_daeag int ;};const _ebaaa int =30;

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_ffead string };

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdcf :=args [0];if _fdcf .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbff :=len (_fdcf .ValueArray );for _ ,_gbge :=range _fdcf .ValueArray {if len (_gbge )!=_fbff {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_efbaf (_fdcf .ValueArray ));};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_eagd :=_ea .Split (v ,"\u003a");if len (_eagd )!=2{return nil ;};if _eagd [0]> _eagd [1]{_eagd [0],_eagd [1]=_eagd [1],_eagd [0];};return PrefixVerticalRange {_feccb :pfx ,_gadf :_eagd [0],_agbc :_eagd [1]};};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_geed NamedRangeRef )Update (q *_ef .UpdateQuery )Expression {return _geed };

// String returns an empty string for EmptyExpr.
func (_cgae EmptyExpr )String ()string {return ""};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_ebfdf :e }};

// Reference returns an invalid reference for String.
func (_abce String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _gdgf (_eadad Result ,_efgea ,_gfcf string )(float64 ,Result ){switch _eadad .Type {case ResultTypeEmpty :return 0,_fcc ;case ResultTypeNumber :return _eadad .ValueNumber ,_fcc ;case ResultTypeString :_cafc ,_daadb :=_dd .ParseFloat (_eadad .ValueString ,64);if _daadb !=nil {return 0,MakeErrorResult (_gfcf +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_efgea );};return _cafc ,_fcc ;default:return 0,MakeErrorResult (_efgea +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gfcf +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_dedf :=len (args );if _dedf !=4&&_dedf !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gaafb ,_ddag ,_dgdb :=_fcfd (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _dgdb .Type ==ResultTypeError {return _dgdb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fffec :=args [2].ValueNumber ;if _fffec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_gdff :=args [3].ValueNumber ;if _gdff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_caed :=0;if _dedf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caed =int (args [4].ValueNumber );if !_dca (_caed ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_ecaea ,_dgdb :=_bgae (_gaafb ,_ddag ,_caed );if _dgdb .Type ==ResultTypeError {return _dgdb ;};return MakeNumberResult (_gdff *(1-_fffec *_ecaea ));};const _cgfeg int =30;

// Update updates references in the Negate after removing a row/column.
func (_dggcb Negate )Update (q *_ef .UpdateQuery )Expression {return Negate {_ebfdf :_dggcb ._ebfdf .Update (q )};};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ddbd :=args [0].AsNumber ();if _ddbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cebe :=float64 (1);if _ddbd .ValueNumber < 0{_cebe =-1;};if len (args )> 1{_dgce :=args [1].AsNumber ();if _dgce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_cebe =_cd .Abs (_dgce .ValueNumber );};if len (args )==1{return MakeNumberResult (_cd .Floor (_ddbd .ValueNumber ));};_fgdbb :=_ddbd .ValueNumber ;_fgdbb ,_gbeab :=_cd .Modf (_fgdbb /_cebe );if _gbeab !=0{if _ddbd .ValueNumber < 0{_fgdbb --;};};return MakeNumberResult (_fgdbb *_cebe );};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _dgdbf (args ,_cdec )};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;var _ffacfe []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_ccce ,_gff :=_gcbc (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _gff .Type ==ResultTypeError {return _gff ;};_gbga :=_ccce ._fdef ;_fcff :=_ccce ._fab ;_gffg ,_gff :=_baag (_ccce ._bce ,_ccce ._dgf ,_gbga ,_fcff );if _gff .Type ==ResultTypeError {return _gff ;};return MakeNumberResult (_gffg );};const _cag ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _aeda (_dffa ,_abgff ,_aae ,_ggbg float64 ,_gcfa int )float64 {var _abcc float64 ;if _dffa ==0{_abcc =(_aae +_ggbg )/_abgff ;}else {_aceg :=_cd .Pow (1+_dffa ,_abgff );if _gcfa ==1{_abcc =(_ggbg *_dffa /(_aceg -1)+_aae *_dffa /(1-1/_aceg ))/(1+_dffa );}else {_abcc =_ggbg *_dffa /(_aceg -1)+_aae *_dffa /(1-1/_aceg );};};return -_abcc ;};func _ebaba (_bcgf []Result ,_eaag string )(*durationArgs ,Result ){_efba :=len (_bcgf );if _efba !=5&&_efba !=6{return nil ,MakeErrorResult (_eaag +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efdd ,_gece ,_fbc :=_fcfd (_bcgf [0],_bcgf [1],_eaag );if _fbc .Type ==ResultTypeError {return nil ,_fbc ;};_ccba :=_bcgf [2];if _ccba .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eaag +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_acb :=_ccba .ValueNumber ;if _acb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_gcfg :=_bcgf [3];if _gcfg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eaag +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fcge :=_gcfg .ValueNumber ;if _fcge < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_abf :=_bcgf [4];if _abf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eaag +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebbe :=float64 (int (_abf .ValueNumber ));if !_egcf (_ebbe ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_aba :=0;if _efba ==6&&_bcgf [5].Type !=ResultTypeEmpty {_cead :=_bcgf [5];if _cead .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eaag +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aba =int (_cead .ValueNumber );if !_dca (_aba ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_eaag );};};return &durationArgs {_efdd ,_gece ,_acb ,_fcge ,_ebbe ,_aba },_fcc ;};func (_dcfe PrefixHorizontalRange )horizontalRangeReference (_addce string )string {return _cb .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_addce ,_dcfe ._ddaba ,_dcfe ._aageg );};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};type rmode byte ;

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfge :=args [0].AsString ();if _gfge .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_gffa :="\u0041\u0031";if len (args )==2{_cccc :=args [1].Ref ;if _cccc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_gffa =_cccc .Value ;};switch _gfge .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_dbcd ,_ddgd :=_f .ParseCellReference (_gffa );if _ddgd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gffa );};_beef :="\u0024"+_dbcd .Column +"\u0024"+_dd .Itoa (int (_dbcd .RowIdx ));if _dbcd .SheetName !=""{_beef =_dbcd .SheetName +"\u0021"+_beef ;};return MakeStringResult (_beef );case "\u0063\u006f\u006c":_gdfb ,_dfcfcd :=_f .ParseCellReference (_gffa );if _dfcfcd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gffa );};return MakeNumberResult (float64 (_gdfb .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_fbcg :=_ea .Contains (ctx .GetFormat (_gffa ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_fbcg );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_cdef :="\u0047";_gbdd :=ctx .GetFormat (_gffa );if _gbdd =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_bgca .MatchString (_gbdd ){_cdef ="\u0046\u0030";}else if _gbdd =="\u0030\u0025"{_cdef ="\u0050\u0030";}else if _gbdd =="\u004d\u004d\u004d\u0020\u0044\u0044"{_cdef ="\u0044\u0032";}else if _gbdd =="\u004d\u004d\u002fY\u0059"{_cdef ="\u0044\u0033";}else if _gbdd =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_gbdd =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_cdef ="\u0044\u0034";}else if _gbdd =="\u004d\u004d\u005c\u002d\u0044\u0044"{_cdef ="\u0044\u0035";}else if _gbdd =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_cdef ="\u0044\u0036";}else if _gbdd =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_cdef ="\u0044\u0037";}else if _gbdd =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_cdef ="\u0044\u0038";}else if _gbdd =="\u0048\u0048\u003aM\u004d"{_cdef ="\u0044\u0039";}else if _eeeg .MatchString (_gbdd ){_cdef ="\u002e\u0030";}else if _dgaa .MatchString (_gbdd ){_cdef ="\u002e\u0030\u0028\u0029";}else if _faac .MatchString (_gbdd ){_cdef ="\u0043\u0030";}else if _ebaab .MatchString (_gbdd )||_ecef .MatchString (_gbdd ){_cdef ="\u0044\u0031";}else if _fbfe :=_cbbg .FindStringSubmatch (_gbdd );len (_fbfe )> 1{_cdef ="\u0046"+_dd .Itoa (len (_fbfe [1]));}else if _bbfg :=_gggc .FindStringSubmatch (_gbdd );len (_bbfg )> 1{_cdef ="\u002e"+_dd .Itoa (len (_bbfg [2]));}else if _gfdef :=_gbfc .FindStringSubmatch (_gbdd );len (_gfdef )> 1{_cdef ="\u0050"+_dd .Itoa (len (_gfdef [2]));}else if _fbde :=_bcbf .FindStringSubmatch (_gbdd );len (_fbde )> 1{_cdef ="\u0043"+_acag (_fbde ,1);}else if _gacc :=_gefc .FindStringSubmatch (_gbdd );len (_gacc )> 1{_cdef ="\u0043"+_acag (_gacc ,1);}else if _cbgggg :=_cgebb .FindStringSubmatch (_gbdd );len (_cbgggg )> 1{_cdef ="\u002e"+_acag (_cbgggg ,1)+"\u0028\u0029";}else if _dffb :=_fcbg .FindStringSubmatch (_gbdd );len (_dffb )> 1{_cdef ="\u002e"+_acag (_dffb ,1);}else if _ffaa :=_aebce .FindStringSubmatch (_gbdd );len (_ffaa )> 1{_cdef ="\u0053"+_acag (_ffaa ,3);};if _cdef !="\u0047"&&_ea .Contains (_gbdd ,"\u005b\u0052\u0045D\u005d"){_cdef +="\u002d";};return MakeStringResult (_cdef );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_dfaef :=ctx .GetFormat (_gffa );if _eabac .MatchString (_dfaef ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_gffa ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_fca :=0.0;if ctx .GetLocked (_gffa ){_fca =1.0;};return MakeNumberResult (_fca );case "\u0072\u006f\u0077":_ddaf ,_accfc :=_f .ParseCellReference (_gffa );if _accfc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gffa );};return MakeNumberResult (float64 (_ddaf .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_fbcgc ,_agge :=_f .ParseCellReference (_gffa );if _agge !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gffa );};if _fbcgc .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_fbcgc .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_fbcgc .SheetName ).GetWidth (int (_fbcgc .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_gfge .ValueString );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_agfdd :=args [0];if _agfdd .Type !=ResultTypeArray &&_agfdd .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_edbd :=_agfdd .ValueArray ;if len (_edbd )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_edbd )));};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_bgad ,_ccag :=_bcb (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _ccag .Type ==ResultTypeError {return _ccag ;};_egbb :=_bgad ._cdee ;_eefb :=_bgad ._dgdf ;_dbfa :=_bgad ._eeab ;_efac :=_bgad ._bdgg ;_dfea :=_bgad ._ceaf ;_eec :=_bgad ._fbgd ;_eadg :=_aeda (_egbb ,_eefb ,_dbfa ,0,_eec );_efaaf :=0.0;if _efac ==1{if _eec ==0{_efaaf =-_dbfa ;_efac ++;};};for _aeeb :=_efac ;_aeeb <=_dfea ;_aeeb ++{if _eec ==1{_efaaf +=_bdce (_egbb ,_aeeb -2,_eadg ,_dbfa ,1)-_eadg ;}else {_efaaf +=_bdce (_egbb ,_aeeb -1,_eadg ,_dbfa ,0);};};_efaaf *=_egbb ;return MakeNumberResult (_efaaf );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_edcaf :=len (args );if _edcaf !=2&&_edcaf !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_accf ,_agg :=_adbcb (args [0],args [1],"\u0058\u0049\u0052\u0052");if _agg .Type ==ResultTypeError {return _agg ;};_cggc :=_accf ._gfbd ;_fcda :=_accf ._ggfb ;_dgfde :=0.1;if _edcaf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgfde =args [2].ValueNumber ;if _dgfde <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _fcec (_cggc ,_fcda ,_dgfde );};func _abd (){_eb ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_gd .MustCompile ("\u005e"+_cag +_cea );_eb ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_gd .MustCompile ("\u005e"+_gae +_cea );_eb ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_gd .MustCompile ("\u005e"+_eag +_cea );_eb ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_gd .MustCompile ("\u005e"+_fec +_cea );_faf ["\u0068\u0068"]=_gd .MustCompile (_bbe +_efg +"\u0024");_faf ["\u0068\u0068\u003am\u006d"]=_gd .MustCompile (_bbe +_ffef +"\u0024");_faf ["\u006d\u006d\u003as\u0073"]=_gd .MustCompile (_bbe +_cdcg +"\u0024");_faf ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_gd .MustCompile (_bbe +_fgc +"\u0024");_fcg =[]*_gd .Regexp {_gd .MustCompile ("\u005e"+_cag +"\u0024"),_gd .MustCompile ("\u005e"+_gae +"\u0024"),_gd .MustCompile ("\u005e"+_eag +"\u0024"),_gd .MustCompile ("\u005e"+_fec +"\u0024")};_ged =[]*_gd .Regexp {_gd .MustCompile ("\u005e"+_efg +"\u0024"),_gd .MustCompile ("\u005e"+_ffef +"\u0024"),_gd .MustCompile ("\u005e"+_cdcg +"\u0024"),_gd .MustCompile ("\u005e"+_fgc +"\u0024")};};func (_ccfc Result )String ()string {return _ccfc .Value ()};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agfg :=args [0].AsNumber ();_gdac :=args [1].AsNumber ();if _agfg .Type !=ResultTypeNumber ||_gdac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _gdac .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_ggca ,_ebccf :=_cd .Modf (_agfg .ValueNumber /_gdac .ValueNumber );if _ebccf < 0{_ggca --;};return MakeNumberResult (_agfg .ValueNumber -_gdac .ValueNumber *_ggca );};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_cacag ,_edcbc :=_dbggd ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _edcbc .Type !=ResultTypeEmpty {return _edcbc ;};_gefg :=_cacag ._ffge ;_cdfc :=_cacag ._adagg ;_cgdee :=_cacag ._ccgg ;_afcb :=_cacag ._bcecb ;_gdaag :=len (_gefg );if _cdfc > _gdaag {_cdfc =_gdaag ;};_cceec :=_cdfc +_cgdee ;if _cceec > _gdaag {_cceec =_gdaag ;};_cbfe :=_gefg [0:_cdfc ]+_afcb +_gefg [_cceec :];return MakeStringResult (_cbfe );};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_fedfe :=MakeNumberResult (0);for _ ,_bece :=range args {_bece =_bece .AsNumber ();switch _bece .Type {case ResultTypeNumber :_fedfe .ValueNumber +=_bece .ValueNumber ;case ResultTypeList ,ResultTypeArray :_becf :=Sum (_bece .ListValues ());if _becf .Type !=ResultTypeNumber {return _becf ;};_fedfe .ValueNumber +=_becf .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bece ;case ResultTypeEmpty :default:return MakeErrorResult (_cb .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bece .Type ));};};return _fedfe ;};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _bg .Reader )Expression {_cbfb :=&plex {_afgb :LexReader (r )};_adebg (_cbfb );if _cbfb ._bbabd !=""{return nil ;};return _cbfb ._addfd ;};type plex struct{_afgb chan *node ;_addfd Expression ;_bbabd string ;};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_ecgb (args ,_cgegb ))};func _dff (_gbfg string )(int ,int ,int ,bool ,Result ){_cae :="";_gfd :=[]string {};for _fdae ,_efeg :=range _eb {_gfd =_efeg .FindStringSubmatch (_gbfg );if len (_gfd )> 1{_cae =_fdae ;break ;};};if _cae ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_feab :=false ;var _ddea ,_bbeg ,_abe int ;var _ede error ;switch _cae {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_bbeg ,_ede =_dd .Atoi (_gfd [1]);if _ede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_abe ,_ede =_dd .Atoi (_gfd [3]);if _ede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_ddea ,_ede =_dd .Atoi (_gfd [5]);if _ede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};if _ddea < 0||_ddea > 9999||(_ddea > 99&&_ddea < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_ddea =_cdeb (_ddea );_feab =_gfd [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_bbeg =_bfd [_gfd [1]];_abe ,_ede =_dd .Atoi (_gfd [14]);if _ede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_ddea ,_ede =_dd .Atoi (_gfd [16]);if _ede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};if _ddea < 0||_ddea > 9999||(_ddea > 99&&_ddea < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_ddea =_cdeb (_ddea );_feab =_gfd [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_aage ,_cbgg :=_dd .Atoi (_gfd [1]);if _cbgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_abbd ,_cbgg :=_dd .Atoi (_gfd [3]);if _cbgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_deg ,_cbgg :=_dd .Atoi (_gfd [5]);if _cbgg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};if _aage >=1900&&_aage < 10000{_ddea =_aage ;_bbeg =_abbd ;_abe =_deg ;}else if _aage > 0&&_aage < 13{_bbeg =_aage ;_abe =_abbd ;_ddea =_deg ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_feab =_gfd [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_ddea ,_ede =_dd .Atoi (_gfd [16]);if _ede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_bbeg =_bfd [_gfd [3]];_abe ,_ede =_dd .Atoi (_gfd [1]);if _ede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};_feab =_gfd [19]=="";};if !_gec (_ddea ,_bbeg ,_abe ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cdf );};return _ddea ,_bbeg ,_abe ,_feab ,_fcc ;};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;func (_bfee *Lexer )emit (_ccca tokenType ,_afggc []byte ){if _daacd {_cb .Println ("\u0065\u006d\u0069\u0074",_ccca ,_gefca (string (_afggc )));};_bfee ._aabcee <-&node {_ccca ,string (_afggc )};};var _cdbaa =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_decga :=args [0].AsNumber ();if _decga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecbdb :=_cd .Signbit (_decga .ValueNumber );_cgca ,_edcef :=_cd .Modf (_decga .ValueNumber /2);_deag :=_cgca *2;if _edcef !=0{if !_ecbdb {_deag +=2;}else {_deag -=2;};};return MakeNumberResult (_deag );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gagf :=args [0].ValueNumber ;if _gagf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adgd :=args [1].ValueNumber ;if _adgd <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dggg :=args [2].ValueNumber ;if _dggg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_cd .Log10 (_dggg )-_cd .Log10 (_adgd ))/_cd .Log10 (1+_gagf ));};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_bfg *defEval )LastEvalIsRef ()bool {return _bfg ._aeb };func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};const _fbebc =57350;func _cgde (_bcd ,_ebacc ,_eaac ,_cdcbg ,_gafe float64 ,_adb int )Result {_ebbc ,_cfea :=_bgae (_bcd ,_ebacc ,_adb );if _cfea .Type ==ResultTypeError {return _cfea ;};_egda ,_ddfb :=_baag (_bcd ,_ebacc ,int (_gafe ),_adb );if _ddfb .Type ==ResultTypeError {return _ddfb ;};_efedd :=0.0;_gbfd :=0.0;_eaac *=100/_gafe ;_cdcbg /=_gafe ;_cdcbg ++;_acdf :=_ebbc *_gafe -_egda ;for _bac :=1.0;_bac < _egda ;_bac ++{_eabf :=_bac +_acdf ;_cagb :=_eaac /_cd .Pow (_cdcbg ,_eabf );_gbfd +=_cagb ;_efedd +=_eabf *_cagb ;};_addc :=(_eaac +100)/_cd .Pow (_cdcbg ,_egda +_acdf );_gbfd +=_addc ;_efedd +=(_egda +_acdf )*_addc ;_efedd /=_gbfd ;_efedd /=_gafe ;return MakeNumberResult (_efedd );};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gfb :=_ea .ToLower (args [0].ValueString );if !_cca (_gfb ){_ ,_ ,_ ,_ ,_gfee ,_ffda :=_bfe (_gfb );if _ffda .Type ==ResultTypeError {_ffda .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _ffda ;};if _gfee {return MakeNumberResult (0);};};_afgc ,_gagd ,_bgb ,_ ,_debf :=_dff (_gfb );if _debf .Type ==ResultTypeError {return _debf ;};return MakeNumberResult (_decg (_afgc ,_gagd ,_bgb ));};func _cgb (_bbg ,_cff ,_ecc int )int {if _bbg > _cff {return 0;};if _bcg (_ecc ){return (_cff -_bbg +1)*360;};_gfea :=0;for _dfaa :=_bbg ;_dfaa <=_cff ;_dfaa ++{_gea :=365;if _eabc (_dfaa ){_gea =366;};_gfea +=_gea ;};return _gfea ;};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_cdbb :=args [0].AsNumber ();if _cdbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_dfec :=int (_cdbb .ValueNumber );_debd :=make ([][]Result ,0,_dfec );for _gdgg :=0;_gdgg < _dfec ;_gdgg ++{_abff :=make ([]Result ,_dfec );for _bgce :=0;_bgce < _dfec ;_bgce ++{if _gdgg ==_bgce {_abff [_bgce ]=MakeNumberResult (1.0);}else {_abff [_bgce ]=MakeNumberResult (0.0);};};_debd =append (_debd ,_abff );};return MakeArrayResult (_debd );};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_ffefa .Float64 ());};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbaa :=0;_cgeaa :=false ;for _ ,_ddeaa :=range args {switch _ddeaa .Type {case ResultTypeList ,ResultTypeArray :_caae :=Xor (_ddeaa .ListValues ());if _caae .Type ==ResultTypeError {return _caae ;};if _caae .ValueNumber !=0{_fbaa ++;};_cgeaa =true ;case ResultTypeNumber :if _ddeaa .ValueNumber !=0{_fbaa ++;};_cgeaa =true ;case ResultTypeString :case ResultTypeError :return _ddeaa ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_cgeaa {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_fbaa %2!=0);};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_gdbd ,_gacb :=_gcbc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _gacb .Type ==ResultTypeError {return _gacb ;};return MakeNumberResult (_aceda (_gdbd ._bce ,_gdbd ._dgf ,_gdbd ._fdef ,_gdbd ._fab ));};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;func _cacde (_abge Result )*criteriaParsed {_acbfd :=_abge .Type ==ResultTypeNumber ;_eeea :=_abge .ValueNumber ;_acegf :=_ea .ToLower (_abge .ValueString );_bedc :=_gbdgb (_acegf );return &criteriaParsed {_acbfd ,_eeea ,_acegf ,_bedc };};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbeb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgcg :=args [2].ValueNumber ;if _bgcg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_fbeb -_efbd )/_bgcg );};